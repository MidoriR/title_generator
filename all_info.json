[{"title": "A Tour of Python Standard Library (1 of 3)", "description": "Welcome to A Tour of Python Standard Library. Together let us explore\nthe various modules, which will help you to build robust working\nprograms. Once you know about a particular library well, you will start\nreplacing those 20 odd lines of code you used to write with a 2-3 lines\nand feel safe that your code will now work on all the platforms that\nPython supports. Just like the galaxy, the Python Standard Library is\nvast and when hitch-hiking I will take you through some important ones\nthat happen to be used most often. You can explore, ask questions,\nexperiment through out the ride. Welcome! And let the journey begin.\n"}, {"title": "A Tour of Python Standard Library (2 of 3)", "description": "Welcome to A Tour of Python Standard Library. Together let us explore\nthe various modules, which will help you to build robust working\nprograms. Once you know about a particular library well, you will start\nreplacing those 20 odd lines of code you used to write with a 2-3 lines\nand feel safe that your code will now work on all the platforms that\nPython supports. Just like the galaxy, the Python Standard Library is\nvast and when hitch-hiking I will take you through some important ones\nthat happen to be used most often. You can explore, ask questions,\nexperiment through out the ride. Welcome! And let the journey begin.\n"}, {"title": "Building a Simple Configuration-driven Web Testing Framework With Twill", "description": ""}, {"title": "Introduction to Object-Oriented Programming (1 of 3)", "description": "[VIDEO HAS ISSUES: 2 speakers, 1 mic.] Although often used as a\n\"scripting\" language, Python is an object-oriented programming language\nat its core. This tutorial is designed for programmers who are familiar\nwith Python yet new to the concept of object-oriented programming. We\nalso welcome programmers who are experienced with other object-oriented\nlanguages yet new to Python. We will begin the tutorial by introducing\nthe general principles of object- oriented programming. We then focus on\nPython's treatment of object orientation. The tutorial will be organized\nas a mix of formal presentations together with hands-on demonstrations\nand exercises. Take your Python programming to the next level!\n"}, {"title": "Introduction to Object-Oriented Programming (2 of 3)", "description": "[VIDEO HAS ISSUES: 2 speakers, 1 mic.] Although often used as a\n\"scripting\" language, Python is an object-oriented programming language\nat its core. This tutorial is designed for programmers who are familiar\nwith Python yet new to the concept of object-oriented programming. We\nalso welcome programmers who are experienced with other object-oriented\nlanguages yet new to Python. We will begin the tutorial by introducing\nthe general principles of object- oriented programming. We then focus on\nPython's treatment of object orientation. The tutorial will be organized\nas a mix of formal presentations together with hands-on demonstrations\nand exercises. Take your Python programming to the next level!\n"}, {"title": "Introduction to Object-Oriented Programming (3 of 3)", "description": "[VIDEO HAS ISSUES: 2 speakers, 1 mic.] Although often used as a\n\"scripting\" language, Python is an object-oriented programming language\nat its core. This tutorial is designed for programmers who are familiar\nwith Python yet new to the concept of object-oriented programming. We\nalso welcome programmers who are experienced with other object-oriented\nlanguages yet new to Python. We will begin the tutorial by introducing\nthe general principles of object- oriented programming. We then focus on\nPython's treatment of object orientation. The tutorial will be organized\nas a mix of formal presentations together with hands-on demonstrations\nand exercises. Take your Python programming to the next level!\n"}, {"title": "PyCon 2009: A better Python for the JVM", "description": "A better Python for the JVM\n\nPresented at PyCon 2009 by Tobias Ivarsson\n\nAt the last PyCon we announced that we were starting a project for\nimproving the Jython compiler. This year we will share the first fruits\nof that work with the Python community!\n\n[VIDEO HAS ISSUES: ambient mic left on; results in echoing audio]\n"}, {"title": "PyCon 2009: A Configuration Comparison in Python (#70)", "description": "A Configuration Comparison in Python\n\nPresented at PyCon 2009 by Terry Peppers\n\nWhen faced with the simple task of figuring out how to use configuration\nto your advantage in Python there are a myriad of methods. The purpose\nof this talk is to walk through the standard library modules and the\npopular Python Package Index modules comparing and contrasting\nconfiguration formats and the code that consumes them. Specifically, I\nwould like to walk through the use of the csv module, the ConfigParser\nmodule, ConfigObj, lxml, PyYaml and SimpleJSON.\n"}, {"title": "PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 3 of 3)", "description": "A Curious Course on Coroutines and Concurrency (part 3 of 3)\n\nPresented at PyCon 2009 by David Beazley\n\nIf you are a programmer who cares about Python and concurrency, then you\nshould also care about Python coroutines. Although they were first\nintroduced in Python 2.5, coroutines remain one of Python's most\noverlooked features--- often vaguely described as a curious \"extension\"\nof generator functions with little insight as to how they might be\napplied to real-world problems. This tutorial examines coroutines in a\nmore practical light by showing how they are actually a very elegant way\nto implement a processing \"task.\" Using this task abstraction, it is\npossible to use coroutines to implement processing pipelines, event\nhandling systems, and programs based on cooperative multitasking.\nMoreover, if you define tasks using coroutines, they can be easily\nincorporated into more traditional concurrent programs that utilize\nthreads or message passing.\n\n[VIDEO HAS ISSUES: bit of clipping start to finish.]\n"}, {"title": "PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 2 of 3)", "description": "A Curious Course on Coroutines and Concurrency (part 2 of 3)\n\nPresented at PyCon 2009 by David Beazley\n\nIf you are a programmer who cares about Python and concurrency, then you\nshould also care about Python coroutines. Although they were first\nintroduced in Python 2.5, coroutines remain one of Python's most\noverlooked features--- often vaguely described as a curious \"extension\"\nof generator functions with little insight as to how they might be\napplied to real-world problems. This tutorial examines coroutines in a\nmore practical light by showing how they are actually a very elegant way\nto implement a processing \"task.\" Using this task abstraction, it is\npossible to use coroutines to implement processing pipelines, event\nhandling systems, and programs based on cooperative multitasking.\nMoreover, if you define tasks using coroutines, they can be easily\nincorporated into more traditional concurrent programs that utilize\nthreads or message passing.\n\n[VIDEO HAS ISSUES: bit of clipping start to finish.]\n"}, {"title": "PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 1 of 3)", "description": "A Curious Course on Coroutines and Concurrency (part 1 of 3)\n\nPresented at PyCon 2009 by David Beazley\n\nIf you are a programmer who cares about Python and concurrency, then you\nshould also care about Python coroutines. Although they were first\nintroduced in Python 2.5, coroutines remain one of Python's most\noverlooked features--- often vaguely described as a curious \"extension\"\nof generator functions with little insight as to how they might be\napplied to real-world problems. This tutorial examines coroutines in a\nmore practical light by showing how they are actually a very elegant way\nto implement a processing \"task.\" Using this task abstraction, it is\npossible to use coroutines to implement processing pipelines, event\nhandling systems, and programs based on cooperative multitasking.\nMoreover, if you define tasks using coroutines, they can be easily\nincorporated into more traditional concurrent programs that utilize\nthreads or message passing.\n\n[VIDEO HAS ISSUES: bit of clipping start to finish.]\n"}, {"title": "PyCon 2009: A Whirlwind Excursion through Writing a C Extension (#68)", "description": "[VIDEO HAS ISSUES: Ambient mic used, some echoing] Everyone's heard of C\nextensions to Python, but few have ventured into those murky depths.\nThis is a quick overview of how to write a C extension, complete with\nhighlights of the C API, memory management, error handling, and type\ncreation. Whether you want to speed up your Python, integrate with\nlegacy code, contribute to Python's core, or just learn a little about\nhow it all works under the covers, you will enjoy this trip through\nunfamiliar territory. I guarantee you will return safely.\n"}, {"title": "PyCon 2009: About Python Namespaces (and Code Objects) (#46)", "description": "About Python Namespaces (and Code Objects)\n\nPresented at PyCon 2009\n\nAn explanation of some of the underlying concepts of Python, come learn\nabout names and values placed in namespaces, modified by code objects\nand collected into modules. We'll explore namespaces using the Python\ninteractive prompt, with graphical display of object trees using\nGraphviz. Also explained will be the namespace concepts of closures and\nearly binding; how to define new objects without subclassing via use of\ndefault/curried arguments and closures.\n\n[VIDEO HAS ISSUES: Audio buzzing, missing beginning, talk is only 15\nmins (may be cut)]\n"}, {"title": "PyCon 2009: Advanced SQLAlchemy (Part 1 of 3)", "description": "SQLAlchemy is the premier SQL toolkit for Python. SQLAlchemy exposes the\nfull power of SQL while remaining easy to use for the basics, and is\nflexible enough to work with existing database schemas as well as fresh\ndesigns. SQLAlchemy is used in production by leading Python web\nframeworks Pylons and TurboGears as well as many other web and non-web\ndevelopers. This tutorial discusses current data mapping techniques,\nadvanced Query techniques, Session/transaction usage, and maximizing\nschema usage with SQLAlchemy's event model.\n"}, {"title": "PyCon 2009: Advanced SQLAlchemy (Part 2 of 3)", "description": "` <http://blip.tv/file/2023897>`__\n\nSQLAlchemy is the premier SQL toolkit for Python. SQLAlchemy exposes the\nfull power of SQL while remaining easy to use for the basics, and is\nflexible enough to work with existing database schemas as well as fresh\ndesigns. SQLAlchemy is used in production by leading Python web\nframeworks Pylons and TurboGears as well as many other web and non-web\ndevelopers. This tutorial discusses current data mapping techniques,\nadvanced Query techniques, Session/transaction usage, and maximizing\nschema usage with SQLAlchemy's event model.\n"}, {"title": "PyCon 2009: Advanced SQLAlchemy (Part 3 of 3)", "description": "SQLAlchemy is the premier SQL toolkit for Python. SQLAlchemy exposes the\nfull power of SQL while remaining easy to use for the basics, and is\nflexible enough to work with existing database schemas as well as fresh\ndesigns. SQLAlchemy is used in production by leading Python web\nframeworks Pylons and TurboGears as well as many other web and non-web\ndevelopers. This tutorial discusses current data mapping techniques,\nadvanced Query techniques, Session/transaction usage, and maximizing\nschema usage with SQLAlchemy's event model.\n"}, {"title": "PyCon 2009: An Introduction to Google App Engine (Part 1 of 2)", "description": "[VIDEO HAS ISSUES: ] Google App Engine allows you to build scalable web\napplications and host them on Google hardware. This hands on tutorial\nwill walk you through the steps of building a basic web application,\nfrom setting up the SDK through to using the major APIs that App Engine\nprovides.\n"}, {"title": "PyCon 2009: An Introduction to Google App Engine (Part 2 of 2)", "description": "[VIDEO HAS ISSUES: ] Google App Engine allows you to build scalable web\napplications and host them on Google hardware. This hands on tutorial\nwill walk you through the steps of building a basic web application,\nfrom setting up the SDK through to using the major APIs that App Engine\nprovides.\n"}, {"title": "PyCon 2009: Application Developing with IronPython (Part 3 of 3)", "description": "A tutorial on \"Developing with IronPython\": Python for .NET and Mono.\nThe Common Language Runtime is very different to CPython, with a\npowerful JIT compiler, and different garbage collection and threading\nmodel. More importantly, .NET's huge range of libraries can now be used\nfrom Python. Various aspects of developing with IronPython will be\ncovered and attendees will put this into practice by extending an\nexample application. Topics include: Differences between IronPython and\nCPython, including \"Why Use IronPython?\" Introduction to the .NET\nframework - a dynamic language on a statically typed framework GUIs with\nWindows Forms Databases Network requests and web services Handling XML\nThreading Come with laptop - running Linux, Windows or Mac OS X - and\nready to code!\n\n[VIDEO HAS ISSUES: first 5 min muted ]\n"}, {"title": "PyCon 2009: Application Developing with IronPython (Part 1 of 3)", "description": "A tutorial on \"Developing with IronPython\": Python for .NET and Mono.\nThe Common Language Runtime is very different to CPython, with a\npowerful JIT compiler, and different garbage collection and threading\nmodel. More importantly, .NET's huge range of libraries can now be used\nfrom Python. Various aspects of developing with IronPython will be\ncovered and attendees will put this into practice by extending an\nexample application. Topics include: Differences between IronPython and\nCPython, including \"Why Use IronPython?\" Introduction to the .NET\nframework - a dynamic language on a statically typed framework GUIs with\nWindows Forms Databases Network requests and web services Handling XML\nThreading Come with laptop - running Linux, Windows or Mac OS X - and\nready to code!\n\n[VIDEO HAS ISSUES: first 5 min muted ]\n"}, {"title": "PyCon 2009: Application Developing with IronPython (Part 2 of 3)", "description": "A tutorial on \"Developing with IronPython\": Python for .NET and Mono.\nThe Common Language Runtime is very different to CPython, with a\npowerful JIT compiler, and different garbage collection and threading\nmodel. More importantly, .NET's huge range of libraries can now be used\nfrom Python. Various aspects of developing with IronPython will be\ncovered and attendees will put this into practice by extending an\nexample application. Topics include: Differences between IronPython and\nCPython, including \"Why Use IronPython?\" Introduction to the .NET\nframework - a dynamic language on a statically typed framework GUIs with\nWindows Forms Databases Network requests and web services Handling XML\nThreading Come with laptop - running Linux, Windows or Mac OS X - and\nready to code!\n\n[VIDEO HAS ISSUES: first 5 min muted ]\n"}, {"title": "PyCon 2009: Behind the scenes of EveryBlock.com (#111)", "description": "PyCon 2009: Behind the scenes of EveryBlock.com by Adrian Holovaty\n\nAdrian Holovaty, bad-boy YouTube guitar star (search for him, if you\ndare!) and co-author of the Django web framework, takes you under the\nhood of EveryBlock.com, a Knight Foundation News Challenge startup which\nrounds up local news and information, and is powered 100% by Python and\nDjango.\n\n[VIDEO HAS ISSUES: Audio humming]\n"}, {"title": "PyCon 2009: Building Real-time Network applications for the web with Twisted and Orbited (Part 3 of 3)", "description": "Haven't you always wanted to create a massively multiplayer, real-time\ngame for the browser? Or perhaps add chat to your website, or maybe\nwrite a real- time financial application, collaborative text editor, or\nnetwork health monitoring app, all in the browser. Forget web\nframeworks; Orbited.TCPSocket lets you communicate directly from a\nbrowser to any network server, with any protocol you want. By tutorial's\nend, every attendee will have built their own real-time data monitoring\napplication, or multiplayer game, from scratch using Orbited, Twisted,\nand js.io.\n"}, {"title": "PyCon 2009: Building Real-time Network applications for the web with Twisted and Orbited (Part 2 of 3)", "description": "Haven't you always wanted to create a massively multiplayer, real-time\ngame for the browser? Or perhaps add chat to your website, or maybe\nwrite a real- time financial application, collaborative text editor, or\nnetwork health monitoring app, all in the browser. Forget web\nframeworks; Orbited.TCPSocket lets you communicate directly from a\nbrowser to any network server, with any protocol you want. By tutorial's\nend, every attendee will have built their own real-time data monitoring\napplication, or multiplayer game, from scratch using Orbited, Twisted,\nand js.io.\n"}, {"title": "PyCon 2009: Building Real-time Network applications for the web with Twisted and Orbited (Part 1 of 3)", "description": "Haven't you always wanted to create a massively multiplayer, real-time\ngame for the browser? Or perhaps add chat to your website, or maybe\nwrite a real- time financial application, collaborative text editor, or\nnetwork health monitoring app, all in the browser. Forget web\nframeworks; Orbited.TCPSocket lets you communicate directly from a\nbrowser to any network server, with any protocol you want. By tutorial's\nend, every attendee will have built their own real-time data monitoring\napplication, or multiplayer game, from scratch using Orbited, Twisted,\nand js.io.\n"}, {"title": "PyCon 2009: Data Storage in Python - An Overview of Options (Part 2 of 3)", "description": "There are many possibilities in Python to store data. This tutorials\nexplores some of them: flat file, Excel files, NetCDF and HDF5,\nserialization with pickle and friends, relational databases, bsddb and\nZODB. The objective of this course is to give the participants an\noverview over available options as well as there advantages and\ndisadvantages for different purposes. Participants are strongly\nrecommended to bring laptops because all topics are introduced with\nexamples and exercises.\n"}, {"title": "PyCon 2009: Data Storage in Python - An Overview of Options (Part 1 of 3)", "description": "There are many possibilities in Python to store data. This tutorials\nexplores some of them: flat file, Excel files, NetCDF and HDF5,\nserialization with pickle and friends, relational databases, bsddb and\nZODB. The objective of this course is to give the participants an\noverview over available options as well as there advantages and\ndisadvantages for different purposes. Participants are strongly\nrecommended to bring laptops because all topics are introduced with\nexamples and exercises.\n"}, {"title": "PyCon 2009: Data Storage in Python - An Overview of Options (Part 3 of 3)", "description": "There are many possibilities in Python to store data. This tutorials\nexplores some of them: flat file, Excel files, NetCDF and HDF5,\nserialization with pickle and friends, relational databases, bsddb and\nZODB. The objective of this course is to give the participants an\noverview over available options as well as there advantages and\ndisadvantages for different purposes. Participants are strongly\nrecommended to bring laptops because all topics are introduced with\nexamples and exercises.\n"}, {"title": "PyCon 2009: Designing a web framework: Django's design decisions (#75)", "description": "Designing a web framework: Django's design decisions\n\nPresented by Jacob Kaplan-Moss\n\nDjango is a high-level web development framework designed for rapid\ndevelopment of database-backed web sites. Since its release three years\nago Django's grown by leaps and bounds; it's now part of a highly\nsuccessful new generation of web development tools.\n"}, {"title": "PyCon 2009: Django in the Real World (Part 1 of 3)", "description": "There's plenty of material (documentation, blogs, books) out there\nthat'll help you write a site using Django... but then what? You've\nstill got to test, deploy, monitor, and tune the site; failure at\ndeployment time means all your beautiful code is for naught. This\ntutorial examines how best to cope when the Real World intrudes on your\ncarefully designed website.\n\n[VIDEO HAS ISSUES: blurry vga]\n"}, {"title": "PyCon 2009: Django in the Real World (Part 2 of 3)", "description": "There's plenty of material (documentation, blogs, books) out there\nthat'll help you write a site using Django... but then what? You've\nstill got to test, deploy, monitor, and tune the site; failure at\ndeployment time means all your beautiful code is for naught. This\ntutorial examines how best to cope when the Real World intrudes on your\ncarefully designed website.\n\n[VIDEO HAS ISSUES: blurry vga]\n"}, {"title": "PyCon 2009: Django in the Real World (Part 3 of 3)", "description": "There's plenty of material (documentation, blogs, books) out there\nthat'll help you write a site using Django... but then what? You've\nstill got to test, deploy, monitor, and tune the site; failure at\ndeployment time means all your beautiful code is for naught. This\ntutorial examines how best to cope when the Real World intrudes on your\ncarefully designed website.\n\n[VIDEO HAS ISSUES: blurry vga]\n"}, {"title": "PyCon 2009: Django on Jython (#101)", "description": "[VIDEO HAS ISSUES: house audio] Django is the most popular Python web\nframework, and the final release of Jython 2.5 should be available a\ncouple of months before PyCon. This means we can now use a modern Python\nweb framework on top of Java infrastructure by running Django on Jython.\nIn this talk, we will show examples of how to use this combination,\nengage a discussion about what can take the Python (and Django)\ncommunity from the Java world, especially the necessary infrastructure\nbits, and how a Django/Jython stack compares with other JVM web stacks\nlike JRuby on Rails.\n"}, {"title": "PyCon 2009: Easy Concurrency with Kamaelia (Part 2 of 2)", "description": "[VIDEO HAS ISSUES: ] Writing concurrent applications in Python is now\nbecoming not only easier, but quite elegant and simple, thanks to\nKamaelia. Kamaelia is an interesting component based framework\noriginating from BBC research. It accomplishes concurrent processing of\ndata from and to many protocols. Components easily connect and pass data\nfrom and to each other. We are going to explore Kamaelia's strengths and\npossibilities, by running simple examples, then trying nested protocol\nsupport, and maybe some other fun examples if time permits.\n"}, {"title": "PyCon 2009: Easy Concurrency with Kamaelia (Part 1 of 2)", "description": "[VIDEO HAS ISSUES: ] Writing concurrent applications in Python is now\nbecoming not only easier, but quite elegant and simple, thanks to\nKamaelia. Kamaelia is an interesting component based framework\noriginating from BBC research. It accomplishes concurrent processing of\ndata from and to many protocols. Components easily connect and pass data\nfrom and to each other. We are going to explore Kamaelia's strengths and\npossibilities, by running simple examples, then trying nested protocol\nsupport, and maybe some other fun examples if time permits.\n"}, {"title": "PyCon 2009: Eggs and Buildout Deployment in Python (Part 2 of 3)", "description": "Puzzled about Python eggs and packages? Wondering how to repeatably pull\ntogether collections of packages into standalone development, testing\nand deployment environments, all while managing inter-dependencies? In\nthis participatory tutorial, we'll start with distutils, walk through\nusing eggs in the cheeseshop and creating your own eggs, touch a bit on\nusing virtualenv to set up a development environment, and then dig into\nusing zc.buildout to rigorously control assembly specifications, with\nbuild recipes, versioning and dependency management. We'll close by\nshowing how to create your own recipes. Attendees are strongly\nencouraged to bring a laptop or partner with someone who does.\n"}, {"title": "PyCon 2009: Eggs and Buildout Deployment in Python (Part 1 of 3)", "description": "Puzzled about Python eggs and packages? Wondering how to repeatably pull\ntogether collections of packages into standalone development, testing\nand deployment environments, all while managing inter-dependencies? In\nthis participatory tutorial, we'll start with distutils, walk through\nusing eggs in the cheeseshop and creating your own eggs, touch a bit on\nusing virtualenv to set up a development environment, and then dig into\nusing zc.buildout to rigorously control assembly specifications, with\nbuild recipes, versioning and dependency management. We'll close by\nshowing how to create your own recipes. Attendees are strongly\nencouraged to bring a laptop or partner with someone who does.\n"}, {"title": "PyCon 2009: Eggs and Buildout Deployment in Python (Part 3 of 3)", "description": "Puzzled about Python eggs and packages? Wondering how to repeatably pull\ntogether collections of packages into standalone development, testing\nand deployment environments, all while managing inter-dependencies? In\nthis participatory tutorial, we'll start with distutils, walk through\nusing eggs in the cheeseshop and creating your own eggs, touch a bit on\nusing virtualenv to set up a development environment, and then dig into\nusing zc.buildout to rigorously control assembly specifications, with\nbuild recipes, versioning and dependency management. We'll close by\nshowing how to create your own recipes. Attendees are strongly\nencouraged to bring a laptop or partner with someone who does.\n"}, {"title": "PyCon 2009: Faster Python Programs through Optimization (Part 1 of 3)", "description": "[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for\ncertain types of tasks, there are many different ways to improve\nperformance. This tutorial will introduce optimization strategies and\ndemonstrate techniques to implement them. Another of the objectives of\nthis course is to give participants the ability to decide what might be\nthe optimal solution for a certain performance problem. Participants are\nstrongly recommended to bring laptops because all techniques are\nintroduced with examples and exercises.\n"}, {"title": "PyCon 2009: Faster Python Programs through Optimization (Part 3 of 3)", "description": "[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for\ncertain types of tasks, there are many different ways to improve\nperformance. This tutorial will introduce optimization strategies and\ndemonstrate techniques to implement them. Another of the objectives of\nthis course is to give participants the ability to decide what might be\nthe optimal solution for a certain performance problem. Participants are\nstrongly recommended to bring laptops because all techniques are\nintroduced with examples and exercises.\n"}, {"title": "PyCon 2009: Faster Python Programs through Optimization (Part 2 of 3)", "description": "[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for\ncertain types of tasks, there are many different ways to improve\nperformance. This tutorial will introduce optimization strategies and\ndemonstrate techniques to implement them. Another of the objectives of\nthis course is to give participants the ability to decide what might be\nthe optimal solution for a certain performance problem. Participants are\nstrongly recommended to bring laptops because all techniques are\nintroduced with examples and exercises.\n"}, {"title": "PyCon 2009: Functional Testing of Desktop Applications (#1)", "description": "Many advocates of unit testing believe that testing desktop (GUI)\napplications is so difficult as to not be worth it. Not only is it\npossible, but 'functional testing' (testing an application from the\npoint of view of the user) is an important part of an agile development\nprocess.\n"}, {"title": "PyCon 2009: Giving back and helping expand the Python community. A roadmap for South America and Africa (#87)", "description": "For many of us, Python has dramatically changed our professional life:\nOpen Source, technologies that get the job done, and let you learn and\nimprove every day, a friendly and mature community, etc. Python is\nimportant! For learning, for science, for business, and for progress in\ngeneral.\n"}, {"title": "PyCon 2009: Hands on with Trac plugins (Part 1 of 2)", "description": "Trac, an open-source project management tool, has been gaining in\npopularity, however few people tap its true potential. To fully mold\nTrac to your team and project, you must venture into the realm of custom\nplugins. These short (or not so short) bits of code allow you to\ncustomize almost every aspect of Trac to your liking. Come learn how to\nget 110% out of your Trac system, or just see what Trac can do for you.\nAttendees should bring a laptop for the hands-on portion or the\ntutorial.\n"}, {"title": "PyCon 2009: Hands on with Trac plugins (Part 2 of 2)", "description": "Trac, an open-source project management tool, has been gaining in\npopularity, however few people tap its true potential. To fully mold\nTrac to your team and project, you must venture into the realm of custom\nplugins. These short (or not so short) bits of code allow you to\ncustomize almost every aspect of Trac to your liking. Come learn how to\nget 110% out of your Trac system, or just see what Trac can do for you.\nAttendees should bring a laptop for the hands-on portion or the\ntutorial.\n"}, {"title": "PyCon 2009: How AlterWay releases web applications using zc.buildout (#22)", "description": "This talk will describe how zc.buildout is used in our company every day\nto develop, package and distribute Pylons, Django or Plone applications.\nIt will focus on the best practices we have built around the tool and\nthe tools we have built on the top of it to speed up our work.\n"}, {"title": "PyCon 2009: How I Distribute Python applications on Windows - py2exe and InnoSetup (#108)", "description": "There are many deployment options for Python code. I'll share what has\nworked well for me on Windows, packaging command line tools and services\nusing py2exe and InnoSetup. I'll demonstrate a simple build script which\ncreates windows binaries and an InnoSetup installer in one step. In\naddition, I'll go over common errors which come up when using py2exe and\nhints on troubleshooting them. This is a short talk, so there will be a\nfollow-up Open Space session to share experience and help each other\nsolve distribution problems.\n"}, {"title": "PyCon 2009: How to Build Applications Linux Distributions will Package (#78)", "description": "[VIDEO HAS ISSUES: no audio first 1.5m] If you've ever created a nifty\napplication that makes people's lives easier you know the truly hard\npart is convincing others to use it. One way to increase the number of\npeople installing your software is to convince Linux distributions to\npackage your software so that their end users can install by using the\nsystem tools they're used to. One way of convincing them is by making\nyour application easy to package.\n"}, {"title": "PyCon 2009: Intermediate Turbogears (Part 1 of 3)", "description": "Have you conquered the basics of Pylons/TurboGears2 (or just taken the\nmorning class)? Do you want to understand more about how everything\nworks, and how you can go beyond the basics to understand how to\ncustomize things? This class will take you from a basic understanding of\nhow to use the framework, to a clear picture of how the framework pieces\nare put together. I will also cover how to create REST+JSON based web\nservices, we'll focus particularly on how all this works with rich\njavascript based user interfaces, but the techniques should easily apply\nto Flex, or other \"Rich Internet Application\" tools.\n"}, {"title": "PyCon 2009: Intermediate Turbogears (Part 2 of 3)", "description": "Have you conquered the basics of Pylons/TurboGears2 (or just taken the\nmorning class)? Do you want to understand more about how everything\nworks, and how you can go beyond the basics to understand how to\ncustomize things? This class will take you from a basic understanding of\nhow to use the framework, to a clear picture of how the framework pieces\nare put together. I will also cover how to create REST+JSON based web\nservices, we'll focus particularly on how all this works with rich\njavascript based user interfaces, but the techniques should easily apply\nto Flex, or other \"Rich Internet Application\" tools.\n"}, {"title": "PyCon 2009: Intermediate Turbogears (Part 3 of 3)", "description": "Have you conquered the basics of Pylons/TurboGears2 (or just taken the\nmorning class)? Do you want to understand more about how everything\nworks, and how you can go beyond the basics to understand how to\ncustomize things? This class will take you from a basic understanding of\nhow to use the framework, to a clear picture of how the framework pieces\nare put together. I will also cover how to create REST+JSON based web\nservices, we'll focus particularly on how all this works with rich\njavascript based user interfaces, but the techniques should easily apply\nto Flex, or other \"Rich Internet Application\" tools.\n"}, {"title": "PyCon 2009: Internet Programming with Python (Part 1 of 3)", "description": "Internet Programming with Python (part 1 of 3)\n\nPresented by Wesley J. Chun\n\nThis tutorial introduces current Python programmers to 3-4 distinct\nareas of Internet programming, each in self-contained (approximately)\n1-hour lectures (unless otherwise noted) with a demonstration of code on\neach lecture topic.\n"}, {"title": "PyCon 2009: Internet Programming with Python (Part 3 of 3)", "description": "Internet Programming with Python (part 3 of 3)\n\nPresented by Wesley J. Chun\n\nThis tutorial introduces current Python programmers to 3-4 distinct\nareas of Internet programming, each in self-contained (approximately)\n1-hour lectures (unless otherwise noted) with a demonstration of code on\neach lecture topic.\n"}, {"title": "PyCon 2009: Internet Programming with Python (Part 2 of 3)", "description": "Internet Programming with Python (part 2 of 3)\n\nPresented by Wesley J. Chun\n\nThis tutorial introduces current Python programmers to 3-4 distinct\nareas of Internet programming, each in self-contained (approximately)\n1-hour lectures (unless otherwise noted) with a demonstration of code on\neach lecture topic.\n"}, {"title": "PyCon 2009: Introduction to Functional Web Testing With Twill and Selenium (Part 2 of 2)", "description": "[VIDEO HAS ISSUES: ] This tutorial aims to educate attendees on the the\nbasics of functional testing of web applications. Is your app rendered\nas plain HTML? Great! We'll show you how to build a test suite for it.\nIs your app all AJAXy? No problem! We can do that too! We're going to\nwrite a web application, first in straight html and then with AJAX, and\nshow you how to try to break it. At the end of this hands-on session,\nyou'll be able to write tests for almost any web site, using all\nopen-source tools and our favorite language - Python.\n"}, {"title": "PyCon 2009: Introduction to Functional Web Testing With Twill and Selenium (Part 1 of 2)", "description": "[VIDEO HAS ISSUES: ] This tutorial aims to educate attendees on the the\nbasics of functional testing of web applications. Is your app rendered\nas plain HTML? Great! We'll show you how to build a test suite for it.\nIs your app all AJAXy? No problem! We can do that too! We're going to\nwrite a web application, first in straight html and then with AJAX, and\nshow you how to try to break it. At the end of this hands-on session,\nyou'll be able to write tests for almost any web site, using all\nopen-source tools and our favorite language - Python.\n"}, {"title": "PyCon 2009: Introduction to SQLAlchemy (Part 1 of 3)", "description": "[VIDEO HAS ISSUES: some buzzing ] SQLAlchemy is the premier SQL toolkit\nfor Python. SQLAlchemy exposes the full power of SQL while remaining\neasy to use for the basics, and is flexible enough to work with existing\ndatabase schemas as well as fresh designs. SQLAlchemy is used in\nproduction by leading Python web frameworks Pylons and Turbogears as\nwell as many other web and non-web developers. This tutorial teaches\nSQLAlchemy's object-relational mapping to automate painlessly loading\nand persisting objects from and to your database, even when complex\nrelationships exist.\n"}, {"title": "PyCon 2009: Introduction to SQLAlchemy (Part 2 of 3)", "description": "[VIDEO HAS ISSUES: some buzzing ] SQLAlchemy is the premier SQL toolkit\nfor Python. SQLAlchemy exposes the full power of SQL while remaining\neasy to use for the basics, and is flexible enough to work with existing\ndatabase schemas as well as fresh designs. SQLAlchemy is used in\nproduction by leading Python web frameworks Pylons and Turbogears as\nwell as many other web and non-web developers. This tutorial teaches\nSQLAlchemy's object-relational mapping to automate painlessly loading\nand persisting objects from and to your database, even when complex\nrelationships exist.\n"}, {"title": "PyCon 2009: Introduction to SQLAlchemy (Part 3 of 3)", "description": "[VIDEO HAS ISSUES: some buzzing ] SQLAlchemy is the premier SQL toolkit\nfor Python. SQLAlchemy exposes the full power of SQL while remaining\neasy to use for the basics, and is flexible enough to work with existing\ndatabase schemas as well as fresh designs. SQLAlchemy is used in\nproduction by leading Python web frameworks Pylons and Turbogears as\nwell as many other web and non-web developers. This tutorial teaches\nSQLAlchemy's object-relational mapping to automate painlessly loading\nand persisting objects from and to your database, even when complex\nrelationships exist.\n"}, {"title": "PyCon 2009: Introduction to TurboGears2 and WSGI (Part 2 of 2)", "description": "[VIDEO HAS ISSUES: annoying noise starting at 1:17 (2nd half)] Are you\ninterested in building web applications with modern libraries and tools?\nDo you want to build on top of the work that many others have done? Have\nyou done some basic web development, but want to be more productive. If\nso this is the class for you. TurboGears 2 provides a well defined set\nof the best libraries for web development python has to offer. But more\nimportantly it brings them together in a clean, well documented way that\nallows for developing reusable TurboGears 2 components. The result is a\npowerful, flexible, set of tools that helps make it easy to build\ndynamic web applications.\n"}, {"title": "PyCon 2009: Introduction to TurboGears2 and WSGI (Part 1 of 2)", "description": "[VIDEO HAS ISSUES: annoying noise starting at 1:17 (2nd half)] Are you\ninterested in building web applications with modern libraries and tools?\nDo you want to build on top of the work that many others have done? Have\nyou done some basic web development, but want to be more productive. If\nso this is the class for you. TurboGears 2 provides a well defined set\nof the best libraries for web development python has to offer. But more\nimportantly it brings them together in a clean, well documented way that\nallows for developing reusable TurboGears 2 components. The result is a\npowerful, flexible, set of tools that helps make it easy to build\ndynamic web applications.\n"}, {"title": "PyCon 2009: Keynote: Reddit: Steve Huffman and Alexis Ohanian", "description": "Keynote: Reddit: Steve Huffman and Alexis Ohanian\n\nThe co-founders of reddit.com spoke about Reddit's origin, the switch to\nPython, and took many questions.\n"}, {"title": "PyCon 2009: Paver: easy build and deployment automation for Python projects (#13)", "description": "[VIDEO HAS ISSUES: Audio clipping, ambient mic up (echoing audio)] Paver\nmakes managing common aspects of Python projects easier, by providing\njust the right kind of scaffolding on which to automate building and\npackaging of your software. In this talk, you'll see how easy it is to\nget started with Paver, how you can use Paver without alienating other\nusers of your code, and how you can use Paver to trivially extend\nPython's distutils commands.\n"}, {"title": "PyCon 2009: Plenary: Afternoon Lightning Talks", "description": "Plenary: Afternoon Lightning Talks\n\n(00:05) Easy command line parsing with argparse - Steven Bethard\n\n(04:14) Moments - Charles Brandt\n\n(11:45) Crowdsourcing lightning -\n\n(13:40) Python 3.1 changes - Benjamin Peterson\n\n(19:35) The Poor Man's Continuous Integration - Zain Memon\n\n(25:55) cluemapper - Nate Aune\n\n(29:55) ReleaseBot - Brian Warner\n\n(34:50) worldPloneday - Jordan Baker and Roberto\n\n(40:15) blist - Daniel Stutzbach\n\n(45:10) Python Open Source Overview on Launchpad - Gary Poster\n\n(49:50) Pyjamas - Bernd Dorn\n\n(53:50) \u00a0is Evil and IP Addresses in Python - Gregory Smith\n\n(56:00) ctypes - Jason Coombs\n\n(61:10) Come to EuroPython - Jonathan Hartley\n\n(65:45) Zope - Lennart Regebro\n\n(71:05) Site Checker - Eric Holscher\n\n(76:20) PSF Community Awards\n"}, {"title": "PyCon 2009: Plenary: Intro to Sprinting", "description": "by Brett Cannon What sprinting is: a group of people doing something\ntogether. Who goes: everyone! Why: fun, great learning, you can do it\nyour way How: get a table, some chairs, some people...\n"}, {"title": "PyCon 2009: Plenary: Morning Lightning Talks (Saturday)", "description": "Plenary: Morning Lightning Talks\n\n[VIDEO HAS ISSUES: missing a bit at the beginning]\n\n(00:00) Building Appliances with Python - Moshe Zadka\n\n(05:40) Proposed Python License V3 and ... VAN LINDBERG'D - Jesse Noller\n\n(08: 20) The Status is Not Quo - Mike Pirnat\n\n(12:55) Cork, building tiny apps - Alex Morega\n\n(19:10) NASA uses Python? - Katie Cunningham\n\n(23:35) SQLPython, command line interface to Oracle - Catherine Devlin\n(half done)\n\n(25:20) Gitosis - Tommi Virtanen\n\n(29:05) SQLPython, command line interface to Oracle (reprised) -\nCatherine Devlin\n\n(35:00) Player Piano - Peter Fein\n\n(40:10) Why DVCS - James Bennett\n\n(45:15) PyMite - Dean Hall\n\n(49:50) web2py - ?\n"}, {"title": "PyCon 2009: Plenary: Morning Lightning Talks", "description": "-  (00:20) GeoDjango - Justin Bronn\n-  (05:50) What's up with Zope - Martijn Faassen\n-  (10:55) Scripting Launchpad - Paul Hummer\n-  (13:50) JSQT - ?\n-  (16:10) Python, AppEngine, and Informatics - Charles Severance\n-  (20:55) an online game called stackoverflow - John Mulder\n-  (25:25) Miro - Chris Webber\n-  (28:40) Deploying applications with zc.buildout and RPM - Jim Fulton\n-  (34:10) Ham radio and Python - Adam Fast\n-  (38:30) Plone + Pylons = Plyne - Roberto Allende\n-  (41:35) GozerBot - John Hampton\n-  (44:25) Software Engineering and the Pickling Tools - Rich Saunders\n-  (48:45) Talks about the stop watch\n\n"}, {"title": "PyCon 2009: Plenary: Sprint Intro", "description": "Plenary: Sprint Prep\n\nTalks about what sprints were happening, what was getting worked on, and\nwho to talk to.\n"}, {"title": "PyCon 2009: py.test II - cross-platform and distributed testing (Part 3 of 3)", "description": "py.test II - cross-platform and distributed testing (part 3 of 3)\n\nWant to know more about advanced automated testing with Python? Use a\ntool that allows you to ad-hoc distribute tests to multiple CPUs for\nspeed and to multiple platforms for compatibility checks? With tons of\ndebugging help in failure situations? This tutorial provides in-depth\ninformation on advanced usages of the popular py.test tool. We highlight\nits current feature set including using and writing extensions for\ngenerating HTML pages, testing Javascript or ReST documents. We showcase\nand discuss ways of distributing tests across CPUs and platforms and\nwill leave time to discuss and tackle specific scenarios brought up\nduring the session. The tutorial format will be an interactive lecture\nwith plenty of time for questions.\n\n[VIDEO HAS ISSUES: ]\n"}, {"title": "PyCon 2009: py.test II - cross-platform and distributed testing (Part 1 of 3)", "description": "py.test II - cross-platform and distributed testing (part 1 of 3)\n\nWant to know more about advanced automated testing with Python? Use a\ntool that allows you to ad-hoc distribute tests to multiple CPUs for\nspeed and to multiple platforms for compatibility checks? With tons of\ndebugging help in failure situations? This tutorial provides in-depth\ninformation on advanced usages of the popular py.test tool. We highlight\nits current feature set including using and writing extensions for\ngenerating HTML pages, testing Javascript or ReST documents. We showcase\nand discuss ways of distributing tests across CPUs and platforms and\nwill leave time to discuss and tackle specific scenarios brought up\nduring the session. The tutorial format will be an interactive lecture\nwith plenty of time for questions.\n\n[VIDEO HAS ISSUES: ]\n"}, {"title": "PyCon 2009: py.test II - cross-platform and distributed testing (Part 2 of 3)", "description": "py.test II - cross-platform and distributed testing (part 2 of 3)\n\nWant to know more about advanced automated testing with Python? Use a\ntool that allows you to ad-hoc distribute tests to multiple CPUs for\nspeed and to multiple platforms for compatibility checks? With tons of\ndebugging help in failure situations? This tutorial provides in-depth\ninformation on advanced usages of the popular py.test tool. We highlight\nits current feature set including using and writing extensions for\ngenerating HTML pages, testing Javascript or ReST documents. We showcase\nand discuss ways of distributing tests across CPUs and platforms and\nwill leave time to discuss and tackle specific scenarios brought up\nduring the session. The tutorial format will be an interactive lecture\nwith plenty of time for questions.\n\n[VIDEO HAS ISSUES: ]\n"}, {"title": "PyCon 2009: Pylons on Jython (#96)", "description": "Pylons on Jython\n\nPresented by Philip Jenvey\n\nJython is back, and better than ever.\n\n[VIDEO HAS ISSUES: house audio]\n"}, {"title": "PyCon 2009: PyMite: Python-on-a-chip", "description": "PyMite: Python on a chip\n\nLightning talk at PyCon 2009 by James Snyder\n\n\"a significant subset of the Python language on microcontrollers without\nan OS. Lets Python run in a BILLION new places.\"\n\nhttp://www.pythononachip.org/\n"}, {"title": "PyCon 2009: PyMite lightning talk", "description": "PyMite ligntning talk at PyCon09\n\nPresenter: Dean Hall\n\nProject Site:\n`http://www.pythononachip.org <http://www.pythononachip.org/>`__\n"}, {"title": "PyCon 2009: Python 102 (Part 1 of 3)", "description": "Python 102 (Part 1 of 3)\n\nThis half-day tutorial presents intermediate and some advanced features\nof Python to beginning and intermediate programmers. It pairs well with\nPython 101 following a similar outline but at a deeper level. Rather\nthan starting with \"Hello, world!\", we use the interactive Python\ninterpreter to get hands- on familiarity with much of core Python before\ncovering blocks and scripts. The tutorial is divided into short\nsections, each with presentation and exercises, to quickly cover lots of\nground. Advanced topics are introduced throughout and covered in \"extra\ncredit\" exercises such that more advanced participants can learn at\ntheir own pace.\n"}, {"title": "PyCon 2009: Python 102 (Part 2 of 3)", "description": "Python 102 Part 2 of 3)\n\nThis half-day tutorial presents intermediate and some advanced features\nof Python to beginning and intermediate programmers. It pairs well with\nPython 101 following a similar outline but at a deeper level. Rather\nthan starting with \"Hello, world!\", we use the interactive Python\ninterpreter to get hands- on familiarity with much of core Python before\ncovering blocks and scripts. The tutorial is divided into short\nsections, each with presentation and exercises, to quickly cover lots of\nground. Advanced topics are introduced throughout and covered in \"extra\ncredit\" exercises such that more advanced participants can learn at\ntheir own pace.\n"}, {"title": "PyCon 2009: Python 102 (Part 3 of 3)", "description": "Python 102 (Part 3 of 3)\n\nThis half-day tutorial presents intermediate and some advanced features\nof Python to beginning and intermediate programmers. It pairs well with\nPython 101 following a similar outline but at a deeper level. Rather\nthan starting with \"Hello, world!\", we use the interactive Python\ninterpreter to get hands- on familiarity with much of core Python before\ncovering blocks and scripts. The tutorial is divided into short\nsections, each with presentation and exercises, to quickly cover lots of\nground. Advanced topics are introduced throughout and covered in \"extra\ncredit\" exercises such that more advanced participants can learn at\ntheir own pace.\n"}, {"title": "PyCon 2009: Python 401: Some Advanced Topics (Part 1 of 3)", "description": "Python 401: Some Advanced Topics\n\nSteve Holden challenges you to find new and interesting applications for\nsome of the less heavily utilized features of Python including generator\nexpressions, string interpolation, iteration and metaclasses.\n"}, {"title": "PyCon 2009: Python 401: Some Advanced Topics (Part 2 of 3)", "description": "Python 401: Some Advanced Topics (Part 2 of 3)\n\nSteve Holden challenges you to find new and interesting applications for\nsome of the less heavily utilized features of Python including generator\nexpressions, string interpolation, iteration and metaclasses.\n"}, {"title": "PyCon 2009: Python 401: Some Advanced Topics (Part 3 of 3)", "description": "Python 401: Some Advanced Topics (Part 3 of 3)\n\nSteve Holden challenges you to find new and interesting applications for\nsome of the less heavily utilized features of Python including generator\nexpressions, string interpolation, iteration and metaclasses.\n"}, {"title": "PyCon 2009: Python for Teachers (and Teachers of Teachers) (Part 1 of 2)", "description": "As a geek with Python kung fu, you have fun skills to share with others,\nincluding those still in high school and seeking to master mathematical\nconcepts that will serve them for a life time. In taking this tutorial,\nyou're opening a communications channel between yourself, and other\neager learners hoping to partake more deeply of open source culture and\nthe opportunities it offers. We know from last year that many PyCon\ndelegates are broadly interested in education track. This proposal\nattempts to support this demand by developing some publicly-accessible\nPython-related material that demonstrates how object-oriented\nprogramming be learned by using them to implement concepts from the\nmathematical domain. Learning can take place at multiple levels: Python\nand object-oriented concepts. Mathematical concepts, which will be\ndemonstrated in ways readily accessible to anyone who understands\nPython. Presentation of programming topics in the educational\nenvironment. From this latter point of view the pair teaching format can\nbe considered experimental. Its success or otherwise will be determined\nlargely by group dynamics, and our goal is to make the outcome in and of\nitself provide useful empirical data helpful to others planning\nworkshops.\n"}, {"title": "PyCon 2009: Python for Teachers (and Teachers of Teachers) (Part 2 of 2)", "description": "As a geek with Python kung fu, you have fun skills to share with others,\nincluding those still in high school and seeking to master mathematical\nconcepts that will serve them for a life time. In taking this tutorial,\nyou're opening a communications channel between yourself, and other\neager learners hoping to partake more deeply of open source culture and\nthe opportunities it offers. We know from last year that many PyCon\ndelegates are broadly interested in education track. This proposal\nattempts to support this demand by developing some publicly-accessible\nPython-related material that demonstrates how object-oriented\nprogramming be learned by using them to implement concepts from the\nmathematical domain. Learning can take place at multiple levels: Python\nand object-oriented concepts. Mathematical concepts, which will be\ndemonstrated in ways readily accessible to anyone who understands\nPython. Presentation of programming topics in the educational\nenvironment. From this latter point of view the pair teaching format can\nbe considered experimental. Its success or otherwise will be determined\nlargely by group dynamics, and our goal is to make the outcome in and of\nitself provide useful empirical data helpful to others planning\nworkshops.\n"}, {"title": "PyCon 2009: Scrape the Web: Strategies for programming websites that don't expect it (Part 1 of 3)", "description": "[VIDEO HAS ISSUES: Speaker walked away from the mic most of the time.]\nDo you find yourself faced with websites that have data you need to\nextract? Would your life be simpler if you could programmatically input\ndata into web applications, even those tuned to resist interaction by\nbots? We'll discuss the basics of web scraping, and then dive into the\ndetails of different methods and where they are most applicable. You'll\nleave with an understanding of when to apply different tools, and learn\nabout a \"heavy hammer\" for screen scraping that I picked up at a project\nfor the Electronic Frontier Foundation. Atendees should bring a laptop,\nif possible, to try the examples we discuss and optionally take notes.\n"}, {"title": "PyCon 2009: Scrape the Web: Strategies for programming websites that don't expect it (Part 3 of 3)", "description": "[VIDEO HAS ISSUES: Speaker walked away from the mic most of the time.]\nDo you find yourself faced with websites that have data you need to\nextract? Would your life be simpler if you could programmatically input\ndata into web applications, even those tuned to resist interaction by\nbots? We'll discuss the basics of web scraping, and then dive into the\ndetails of different methods and where they are most applicable. You'll\nleave with an understanding of when to apply different tools, and learn\nabout a \"heavy hammer\" for screen scraping that I picked up at a project\nfor the Electronic Frontier Foundation. Atendees should bring a laptop,\nif possible, to try the examples we discuss and optionally take notes.\n"}, {"title": "PyCon 2009: Scrape the Web: Strategies for programming websites that don't expect it (Part 2 of 3)", "description": "[VIDEO HAS ISSUES: Speaker walked away from the mic most of the time.]\nDo you find yourself faced with websites that have data you need to\nextract? Would your life be simpler if you could programmatically input\ndata into web applications, even those tuned to resist interaction by\nbots? We'll discuss the basics of web scraping, and then dive into the\ndetails of different methods and where they are most applicable. You'll\nleave with an understanding of when to apply different tools, and learn\nabout a \"heavy hammer\" for screen scraping that I picked up at a project\nfor the Electronic Frontier Foundation. Atendees should bring a laptop,\nif possible, to try the examples we discuss and optionally take notes.\n"}, {"title": "PyCon 2009: The (lack of) design patterns in Python (#60)", "description": "The (lack of) design patterns in Python\n\nPresented at PyCon 2009 by Joe Gregorio\n\nThere is a distinct lack of Design Patterns discussed in relation to\nPython. Are the communities ignorant of Design Patterns or is there\nsomething else going on here? This talk is based on my well-trafficked\narticle \"Python isn't just Java without the compile\" and expands on that\narticle by using Design Patterns as a crude metric of gaps in a\nprogramming language.\n\n[VIDEO HAS ISSUES: ]\n"}, {"title": "PyCon 2009: The Big F'ing Tutorial: Development Using the repoze.bfg Web Framework (Part 2 of 3)", "description": "The Big F'ing Tutorial: Development Using repoze.bfg Web Framework (Part\n2 of 3)\n\nPresented by Chris McDonough\n\nAre you a Python web developer who thinks there might be some great\nstuff hidden away in Zope but you consider it inaccessible to you\nbecause you feel that Zope imposes too many foreign concepts for your\ntastes? Are you a more- or-less happy Zope developer that has the\nnagging feeling that much of Zope is unnecessary \"baggage\" on your\ncurrent project? Maybe you're a Plone developer who feels that Plone is\nunsuitable for one of your current projects because it's too\ncomplicated? This tutorial will present everything you need to know\nabout repoze.bfg, a small Python web framework in the spirit of Pylons.\nThe goals of repoze.bfg are simplicity, familiarity to Zope programmers\n(but no Zope experience is required), execution speed, and complete,\ncomprehensive, and up-to-date documentation. In this tutorial, we'll\nexplain the core concepts in repoze.bfg, then we'll lead a guided\ndevelopment session where we make a small application using the\nframework. We'll also cover packaging and deployment of the application.\nQuestions are highly encouraged during the presentation.\n\n[VIDEO HAS ISSUES: ]\n"}, {"title": "PyCon 2009: The Big F'ing Tutorial: Development Using the repoze.bfg Web Framework (Part 3 of 3)", "description": "The Big F'ing Tutorial: Development Using repoze.bfg Web Framework (Part\n3 of 3)\n\nPresented by Chris McDonough\n\nAre you a Python web developer who thinks there might be some great\nstuff hidden away in Zope but you consider it inaccessible to you\nbecause you feel that Zope imposes too many foreign concepts for your\ntastes? Are you a more- or-less happy Zope developer that has the\nnagging feeling that much of Zope is unnecessary \"baggage\" on your\ncurrent project? Maybe you're a Plone developer who feels that Plone is\nunsuitable for one of your current projects because it's too\ncomplicated? This tutorial will present everything you need to know\nabout repoze.bfg, a small Python web framework in the spirit of Pylons.\nThe goals of repoze.bfg are simplicity, familiarity to Zope programmers\n(but no Zope experience is required), execution speed, and complete,\ncomprehensive, and up-to-date documentation. In this tutorial, we'll\nexplain the core concepts in repoze.bfg, then we'll lead a guided\ndevelopment session where we make a small application using the\nframework. We'll also cover packaging and deployment of the application.\nQuestions are highly encouraged during the presentation.\n\n[VIDEO HAS ISSUES: ]\n"}, {"title": "PyCon 2009: The Big F'ing Tutorial: Development Using the repoze.bfg Web Framework (Part 1 of 3)", "description": "The Big F'ing Tutorial: Development Using repoze.bfg Web Framework (Part\n1 of 3)\n\nPresented by Chris McDonough\n\nAre you a Python web developer who thinks there might be some great\nstuff hidden away in Zope but you consider it inaccessible to you\nbecause you feel that Zope imposes too many foreign concepts for your\ntastes? Are you a more- or-less happy Zope developer that has the\nnagging feeling that much of Zope is unnecessary \"baggage\" on your\ncurrent project? Maybe you're a Plone developer who feels that Plone is\nunsuitable for one of your current projects because it's too\ncomplicated? This tutorial will present everything you need to know\nabout repoze.bfg, a small Python web framework in the spirit of Pylons.\nThe goals of repoze.bfg are simplicity, familiarity to Zope programmers\n(but no Zope experience is required), execution speed, and complete,\ncomprehensive, and up-to-date documentation. In this tutorial, we'll\nexplain the core concepts in repoze.bfg, then we'll lead a guided\ndevelopment session where we make a small application using the\nframework. We'll also cover packaging and deployment of the application.\nQuestions are highly encouraged during the presentation.\n\n[VIDEO HAS ISSUES: ]\n"}, {"title": "PyCon 2009: The State of Django (#76)", "description": "Django 1.0 was released in September 2008. This release marks a major\nturning point in Django's development; a real maturation of the project.\nJoin the lead developers of Django as they discuss what's new in Django\n1.0, cover the Django 1.1 release (currently scheduled for a few weeks\nbefore PyCon), and discuss the project's future.\n"}, {"title": "PyCon 2009: The State of the Python Community: Leading the Python tribe (#118)", "description": "Steve Holden, Chairman of the Python Software Foundation, reflects on\nthe meaning of the phrase \"the Python community\" and the changes that\nhave taken place in the PSF in the last year. He discusses further\npossible changes that could turn the PSF into a more \"community-facing\"\norganization, and solicits your input on what kind of projects and\nactivities it should be supporting.\n"}, {"title": "PyCon 2009: ToscaWidgets: Test Driven Modular Ajax (Part 2 of 2)", "description": "[VIDEO HAS ISSUES: room's AC was loud] If you have ever struggled with\nhaving to re-create the same content in multiple places in your web\napplication it might be time to look at ToscaWidgets. ToscaWidgets gives\nthe developer the ability to create reusable web content. This 3 hour\nlesson will cover installation, integration, and usage of ToscaWidgets.\nAfter we have a handle on how to create validated forms with\nToscaWidgets, we will spend the second half of this lesson creating a\nworking ajax widget, which we will test the client side component using\nToscaWidget javascript technology.\n"}, {"title": "PyCon 2009: ToscaWidgets: Test Driven Modular Ajax (Part 1 of 2)", "description": "[VIDEO HAS ISSUES: room's AC was loud] If you have ever struggled with\nhaving to re-create the same content in multiple places in your web\napplication it might be time to look at ToscaWidgets. ToscaWidgets gives\nthe developer the ability to create reusable web content. This 3 hour\nlesson will cover installation, integration, and usage of ToscaWidgets.\nAfter we have a handle on how to create validated forms with\nToscaWidgets, we will spend the second half of this lesson creating a\nworking ajax widget, which we will test the client side component using\nToscaWidget javascript technology.\n"}, {"title": "PyCon 2009: Using Twisted Deferreds (Part 1 of 3)", "description": "While the documentation about deferreds is good, it is still not enough\nfor many. In this interactive tutorial, I will cover both the basics of\ndeferreds and many non-trivial use-cases, with discussion of various\napproaches. Common mistakes, gotchas and other issues will be explained,\nas well as good idioms and techniques to use deferreds without pain.\nDeferreds bring asynchronous APIs the clarity and programming power that\nis sometimes lost when using event-based programming. They are an idea\ntaken from many other programming languages, and made into a Pythonic\nsolution If you are using Twisted, or would like to use Twisted, this\ntutorial can help you with one of the most subtle issues inherent in its\nAPIs - Deferreds.\n"}, {"title": "PyCon 2009: Using Twisted Deferreds (Part 2 of 3)", "description": "` <http://blip.tv/file/1997952>`__\n\nWhile the documentation about deferreds is good, it is still not enough\nfor many. In this interactive tutorial, I will cover both the basics of\ndeferreds and many non-trivial use-cases, with discussion of various\napproaches. Common mistakes, gotchas and other issues will be explained,\nas well as good idioms and techniques to use deferreds without pain.\nDeferreds bring asynchronous APIs the clarity and programming power that\nis sometimes lost when using event-based programming. They are an idea\ntaken from many other programming languages, and made into a Pythonic\nsolution If you are using Twisted, or would like to use Twisted, this\ntutorial can help you with one of the most subtle issues inherent in its\nAPIs - Deferreds.\n"}, {"title": "PyCon 2009: Using Twisted Deferreds (Part 3 of 3)", "description": "While the documentation about deferreds is good, it is still not enough\nfor many. In this interactive tutorial, I will cover both the basics of\ndeferreds and many non-trivial use-cases, with discussion of various\napproaches. Common mistakes, gotchas and other issues will be explained,\nas well as good idioms and techniques to use deferreds without pain.\nDeferreds bring asynchronous APIs the clarity and programming power that\nis sometimes lost when using event-based programming. They are an idea\ntaken from many other programming languages, and made into a Pythonic\nsolution If you are using Twisted, or would like to use Twisted, this\ntutorial can help you with one of the most subtle issues inherent in its\nAPIs - Deferreds.\n"}, {"title": "PyCon 2009: PyPy status talk (#72)", "description": "PyPy Status Talk\n\nPresented by Holger Krekel and Maciej Fijalkowski\n\nPyPy has come a long way. It's gone from being purely a research project\nto providing a flexible and reasonably fast Python Interpreter, itself\nimplemented in Python. Although PyPy is not yet a viable CPython\nreplacement, PyPy is able to run sophisticated python applications like\nDjango and Twisted. In this talk, we'll focus on improvements that\nhappened during the last year in PyPy. This talk will also explain the\nmotivations driving current PyPy development and its targets for the\nfuture.\n\n[VIDEO HAS ISSUES: Audio humming, other misc audio issues]\n"}, {"title": "Python 101 (1 of 2)", "description": "Python 101 (Part 1 of 2)\n\nThis 2 part tutorial presents the basics of Python to beginning and\nintermediate programmers. It pairs well with Python 102 which follows a\nsimilar outline but goes much deeper. Rather than starting with \"Hello,\nworld!\", we use the interactive Python interpreter to get hands-on\nfamiliarity with much of core Python before covering blocks and scripts.\nThe tutorial is divided into short sections, each with presentation and\nexercises, to quickly cover lots of ground. Advanced topics are\nintroduced throughout and covered in \"extra credit\" exercises such that\nmore advanced participants can learn at their own pace.\n"}, {"title": "Python 101 (2 of 2)", "description": "Python 101 (Part 2 of 2)\n\nThis half-day tutorial presents the basics of Python to beginning and\nintermediate programmers. It pairs well with Python 102 which follows a\nsimilar outline but goes much deeper. Rather than starting with \"Hello,\nworld!\", we use the interactive Python interpreter to get hands-on\nfamiliarity with much of core Python before covering blocks and scripts.\nThe tutorial is divided into short sections, each with presentation and\nexercises, to quickly cover lots of ground. Advanced topics are\nintroduced throughout and covered in \"extra credit\" exercises such that\nmore advanced participants can learn at their own pace.\n"}, {"title": "Tour of Python Standard Library (3 of 3)", "description": "Welcome to A Tour of Python Standard Library. Together let us explore\nthe various modules, which will help you to build robust working\nprograms. Once you know about a particular library well, you will start\nreplacing those 20 odd lines of code you used to write with a 2-3 lines\nand feel safe that your code will now work on all the platforms that\nPython supports. Just like the galaxy, the Python Standard Library is\nvast and when hitch-hiking I will take you through some important ones\nthat happen to be used most often. You can explore, ask questions,\nexperiment through out the ride. Welcome! And let the journey begin.\n"}, {"title": "Creating Rich Client Applications Using Dabo", "description": "Creating Rich Client Applications Using Dabo\n\nPresented by Ed Leafe and Paul McNett\n\nWhile web applications seem to get all the attention these days, many\nbusinesses still rely on desktop, or \"rich client\", applications to run\ntheir business. For those who prefer to do their coding with Python,\nDabo is the only full-featured desktop app framework.\n\nIn this tutorial, we'll cover the general structure and approach to\napplication development used in Dabo, including lots of interactive work\nwhere we will all develop applications that will be able to query a\ndatabase, display the results, allow the user to edit the data, and then\nsave it back to the database. We will cover the various tools available\nin Dabo to help you develop your applications, and how they work\ntogether.\n\nIntended Audience\n\nDevelopers with basic to intermediate Python experience.\n\nClass Outline\n\nIntroduction: The thinking and design approach behind the framework. (15\nmin).\n\n-  Explanation of the framework design. Frameworks are great if you're\n   working with them, but not if you're constantly fighting them! We'll\n   outline the various parts of the framework, and how they work\n   together to create applications.\n\nBuilding an app in 30 seconds. (15 min)\n\n-  You can use the AppWizard to create a completely functional CRUD\n   application in less than 30 seconds. We'll demonstrate how to use the\n   AppWizard, and how you can build on and further customize the\n   application it creates.\n\nThe primary non-UI classes in Dabo (15 min)\n\n-  There are lots of classes in Dabo, but only a few main ones that are\n   used in every app. This section will cover them: the application\n   class, the business object class, and the DBAPI data adapter class.\n\nIntroduction to the Dabo Tools (30 min)\n\n-  One of the benefits of a framework is that the mundane, repetitive\n   tasks are handled by the framework, leaving you to focus on the\n   creative parts of app development. In this section we'll discuss\n   several of the visual tools available to help you create Dabo\n   applications faster and easier.\n\nDeveloping an actual application, part 1 (15 min)\n\n-  Talk is fine, but here's where we begin creating an actual\n   application. Attendees will learn how to create a new Dabo app, along\n   with database connections, menus and a main form. In the second half\n   of the tutorial we'll use this app as the basis for more complex\n   development.\n\nREFRESHMENT BREAK\n\nOverview of UI Classes (30 min)\n\n-  This is where we talk about the \"rich\" in \"rich client\". Dabo has a\n   full set of UI widgets, based on the wxPython toolkit. We've taken\n   those widget classes and added a consistent interface, so that the\n   developer uses the same properties and methods to accomplish the same\n   thing in all the classes, making developing smoother and more\n   intuitive. We'll cover all of the most-commonly used controls, and\n   how to work with them.\n\nDeveloping an actual application, part 2 (30 min)\n\n-  The basic app created in the first half was an impressive result for\n   such a short amount of time, but here's where we'll start to make it\n   more interesting. We'll create several related business objects, bind\n   them to the UI elements, and have it all work seamlessly with a\n   database. After that, we'll show how to create and run reports\n   against that same data. We'll then wrap up by explaining how to\n   deploy your finished application.\n\nRich Client Web Applications with Dabo (10 min)\n\n-  HTML web apps are trying to get a richer client experience through\n   the increased use and sophistication of Javascript-based tools.\n   That's great if you like spending your time in Javascript, but not so\n   great if you are a Python dev. We take the opposite approach: taking\n   our rich-client apps and deploying them over the web so that users\n   can run them without first installing the app.\n\nFuture plans for Dabo (5 min)\n\n-  Dabo is being actively developed, and we have plans for future\n   enhancements that we'll cover here.\n\nWrap-up and Final Questions (15 min)\n\nRequirements\n\nStudents do not need to have a computer, but they will not get as much\nout of the session if they cannot actively participate in creating the\nexample applications. They should have the following prerequisites\ninstalled, using the latest available stable releases except where\nspecific version numbers are indicated:\n\n-  Python 2.5.4\n-  wxPython 2.8.10.1 unicode\n-  MySQLdb\n-  reportlab\n-  Python Imaging Library\n-  Dabo 0.9.2\n\n"}, {"title": "Dude, Where's My Database? (#133)", "description": "Dude, Where's My Database?\n\nPresented by Eric Florenzano (Django)\n\nThere are so many great open source databases out on the market right\nnow-- we're really in the golden age of databases. Fortunately, Python\ncan talk to virtually all of them. With so many databases at our\ndisposal, how do we choose which one to use for our particular use case?\n\nThis talk will go over the many different classes of databases,\nintroduce some of the particular implementations for each class of\ndatabase, and describe the strengths and weaknesses of each. By weighing\nthe pros and cons of each type of database, the speaker hopes to dispel\nthe many rumors and misconceptions that people have about what's out\nthere today.\n\n[VIDEO HAS ISSUES: Audio cuts out at about 20 seconds in, then gets out\nof sync until around 3:10.]\n"}, {"title": "Evolving Your Framework Under Fire (#150)", "description": "Evolving your framework under fire\n\nPresented by Tres Seaver (Agendaless Consulting, Inc.)\n\nWriting frameworks is fun, which is why we have so many of them in the\nPython web development world. Making your shiny new framework stand up\nunder the load of a demanding application can be painful, but can lead\nto substantial improvements.\n"}, {"title": "How Python is guiding infrastructure construction in Africa (#84)", "description": "How Python is guiding infrastructure construction in Africa\n\nPresented by Roy Hyunjin Han (InvisibleRoads)\n\nA whirlwind tour of the roles of different Python modules in the\narchitecture of a geospatial infrastructure planning system.\n\nWe used Python to transform an elaborate, multistep process for finding\nand connecting households in villages into a single, streamlined\nplanning experience. I'll explain how Python's freely available\nlibraries empowered a small team of developers under a minimal budget\nand timeframe. Now just imagine if we had to do the same thing with\nJava.\n"}, {"title": "Keynote: State of CPython", "description": "Uses the Twitter feed for PyCon and a floor mic for a Q&A; session\ncovering the state of CPython and what's in the future.\n"}, {"title": "Pycon 2010: 508 and You: Taking the Pain out of Accessibility (#119)", "description": "508 and You: Taking the Pain out of Accessibility\n\nPresented by Katie A Cunningham (NASA/Indyne)\n\nThinking about scoring a government contract, but haven't heard of 508\ncompliance yet? Interested in making your site accessible to people with\ndisabilities? Never thought about compliance, but want to know why it's\na good idea?\n"}, {"title": "Actors: What, Why, and How (#161)", "description": "Actors: What, Why and How\n\nPresented by Donovan Preston\n\nSince the dawn of concurrency research, there have been two camps:\nshared everything, and shared nothing. Most modern applications use\nthreads for concurrency, a shared everything architecture.\n\nActors, however, use a shared nothing architecture where lightweight\nprocesses communicate with each other using message passing. Actors can\nchange their state, create a new Actor, send a message to any Actor it\nhas the Address of, and wait for a specific kind of message to arrive in\nit's mailbox.\n\nWe will discuss the benefits of using the Actor architecture and\nstrategies for implementing an Actor system in Python.\n\n`http://bitbucket.org/fzzzy/python-actors/ <http://bitbucket.org/fzzzy/python-%20actors/>`__\n"}, {"title": "Advanced String Formatting (#117)", "description": "Advanced String Formatting\n\nEric Smith (True Blade Systems, Inc.)\n\nAdvanced string formatting (str.format, described in PEP 3101) was added\nin Python 2.6 and 3.0 as a more powerful, flexible, and extensible\nalternative to the existing %-based string formatting.\n\nThis talk will discuss how to use str.format, how your own types can\nbenefit from it, its strengths and weaknesses, how to migrate to it, and\nadvanced topics such as implementing your own templating language.\n"}, {"title": "An Underwater Python: Tortuga the Python Powered Robot (#175)", "description": "An Underwater Python: Tortuga the Python Powered Robot\n\nPresented by Joseph Lisee (Robotics @ Maryland)\n\nLearn about Tortuga, the python powered Autonomous Underwater Vehicle\n(AUV) developed by Robotics @ Maryland (http://ram.umd.edu). See how\npython provides a flexible and efficient way to build the software that\ncommands, simulates and controls Tortuga. Also learn about the trials,\ntribulations, and glory experienced developing, competing, losing, and\nwinning with Tortuga in AUVSI AUV Competition\n(`http://www.auvsi.org/competitions/wate\nr.cfm <http://www.auvsi.org/competitions/water.cfm>`__).\n"}, {"title": "Pycon 2010: Analysis: The other kind of testing (#185)", "description": "Analysis: The other kind of testing\n\nPresented by Bob Ippolito\n\nSoftware testing helps verify that your code meets a specification, but\nnot how to improve the specification. How can you stay competitive when\nmost of the big names today are using analysis to guide product\nevolution? Level the playing field and make better products by learning\nhow to design experiments, collect data, make measurements, and optimize\nyour specifications.\n"}, {"title": "Building Leafy Chat, DjangoDose, and Hurricane, Lessons Learned on the Real-Time Web with Python (#24)", "description": "Building Leafy Chat, DjangoDose, and Hurricane. Lessons learned on the\nreal- time web with Python\n\nPresented by Alex Gaynor (Eldarion)\n\nWebsites are getting increasingly dynamic and realtime in order to\ncompete with desktop applications. This talk is an examination of 3\nwebsites/tools I've built, all using Python. I'm going to try to explain\nwhat we did to build these, and how you can do the same.\n"}, {"title": "Cooperative Multitasking with Twisted: Getting Things Done Concurrently. (#11)", "description": "Cooperative Multitasking with Twisted: Getting Things Done Concurrently\n\nPresented by David A Reid\n\nTwisted is a framework for building asynchronous networking\napplications. It also provides powerful tools for writing non-blocking\nnon-network code, tools which are vital for building real large scale\napplications in Twisted. I hope to give a comprehensive overview of\nthese tools to help the intermediate Twisted user get things done\nconcurrently.\n\n[VIDEO HAS ISSUES: Picture out of focus at the beginning]\n"}, {"title": "Creating RESTful Web services with restish (#17)", "description": "Creating RESTful Web Services with restish\n\nPresented by Grig Gheorghiu\n\nRoy Fielding described REST in his Ph.D. dissertation in the year 2000.\nAlmost ten years later, Web developers are still confused as to how to\napply the REST principles in their applications. Examples of poorly\ndesigned 'REST' APIs abound, and I will make use of them in my talk.\n\nIn this presentation, I will give an overview of REST and its design\nprinciples, and I will show a concrete example of a RESTful Web service\nimplemented in the restish framework. My examples will include CRUD\noperations, as well as transactions. I will also show how to consume\nthis Web service using both httplib2 and curl. I would be remiss if I\ndidn't describe ways to test the Web service with WebTest and twill.\n"}, {"title": "Cross platform application development and distribution (#116)", "description": "Cross platform application development and distribution\n\nPresented by Stani Michiels and Nadia Alramli\n\nYou think Python gives you native cross platform applications for free?\nThink twice. Are you interested in distributing your application to\nother platforms but not sure how?\n\nWe will give tips and examples on how to enhance the native feel of your\napplication: notifications, registration of file types and more. The\ntalk will also help you to avoid common pitfalls and provides solutions\nfor designing cross platform user interfaces. (Although we use wxPython\nas an example, the principles are valid for other toolkits as well.)\nWe'll show you where to start if you want to distribute your application\nto different platforms, briefly discussing tools like py2exe, py2app and\nDebian/Ubuntu packaging ecosystem. This talk is based on our experience\nfrom developing Phatch (Photo Batch Processor) and SPE (Python Editor).\n"}, {"title": "Customizing your editor for maximum productivity (#171)", "description": "Customizing your editor for maximum productivity\n\nPresented by Justin Lilly\n\nThis will be an overview of the sorts of things that editors can offer\nto make your programming life easier. It will also include specifics of\nhow to get these features working in a basic editor. (Vim or Emacs, yet\nundecided)\n"}, {"title": "Dealing with unsightly data in the real world. (#156)", "description": "Dealing with unsightly data in the real world\n\nPresented by Alexander Dutton\n\nDrawing on experiences writing http://m.ox.ac.uk/, we'll explore the art\nof getting data out of unhelpful systems. We'll start with working out\nhow to interact with a system, move on to techniques for parsing the\ndata it gives you, and round off by implementing a shinier interface\nover the top.\n"}, {"title": "Debating 'til Dawn: Topics to keep you up all night (#183)", "description": "Debating 'til Dawn: Topics to keep you up all night\n\nMike C. Fletcher (VRPlumber Consulting Inc.)\n\nPyCon is about staying up all night hacking. When you're tired, you\ndon't sleep, you debate ideas with your sprint-mates! This presentation\nwill attempt to condense the best of the last few years of PyGTA into a\n30-minute jumping off point full of wild assertions, unreasonable\nassumptions, and just plain wrong-headed ideas to kick-start those\nheated discussions that just keep going long into the night. What are\nyour programming mantras? What million-dollar ideas do you have to\nimprove Python? Should there be programmer liability? Is there art in\nprogramming and should there be? Are you a cowboy coder or an\nstraight-laced engineer? Is PyCon really about staying up all night\ndiscussing ideas? We'll have a feedback channel to share your thoughts,\nwe'll keep it moving, and we'll see if we can't make this the most\nsleepless PyCon yet.\n"}, {"title": "Deconstruction of an Object (#62)", "description": "Deconstruction of an Object\n\nPresented by Jeff Rush (Tau Productions Inc.)\n\nAn incremental deconstruction of a class definition identifying the key\nelements such as layered namespaces, common attributes, lifecycle and\naccess controls. We'll also look at calling into, out of and through an\nobject, making classes extensible and various object behaviors like\ncontainment, sequence, iteration and arithmetic.\n"}, {"title": "Decorators From Basics to Class Decorators to Decorator Libraries (#138)", "description": "Decorators from Basics to Class Decorators to Decorator Libraries\n\nPresented by Charles Merriam\n\nDecorators simplify design and improve readability and reliability. This\ntutorial starts from the beginning with basic decorators, showing how\nsimple tasks like restricting administration functions are clearer and\nmore readable with decorators, and exactly how the decorators work. A\nsimple library of decorators for tracing, logging, and caching results\nis presented. This leads into writing your own decorators and\nparameterized decorators either from scratch or by using libraries like\nSimionato's Decorator Decorator and \"@call\\_before(fn)\". Finally, using\nPython 3.x class decorators in place of metaclasses for most common\ndictionary modifications is covered.\n\n[VIDEO HAS ISSUES: Missing about 1 minute at start, because of technical\nproblems.]\n"}, {"title": "Demystifying Non-Blocking and Asynchronous I/O (#164)", "description": "Demystifying non-blocking and asynchronous I/O\n\nPresented by Peter A Portante\n\nWe will first define what blocking, non-blocking, synchronous and\nasynchronous I/O are under the POSIX interfaces. We'll cover how and\nwhen these four types of I/O should be used, and their individual\neffects on a Python based application. The notion of concurrency will be\ndiscussed by comparing a simple threaded blocking I/O application to a\nsimple single threaded non-blocking I/O application by walking the\nattendees through the python code for those applications.\n"}, {"title": "Designing to Scale: The Story of ShootQ (#5)", "description": "Designing to Scale: The story of ShootQ\n\nJonathan LaCour (ShootQ)\n\nShootQ is a web-based studio management solution for professional\nphotography studios, designed to automate and simplify the task of\nrunning a small business. In this talk, Jonathan LaCour, the CTO of\nShootQ, hopes to share his experience designing a web application that\ncan scale up to meet the demands of a rapidly growing customer base. The\ntalk will cover a variety of topics including TurboGears 2.0, WSGI,\nhorizontal and vertical scaling, database replication, load balancing,\ndeployment, and more.\n"}, {"title": "Distributed Programming with Pyro (#7)", "description": "Distributed Programming with Pyro\n\nPresented by Alfredo Deza\n\nCreate distributed code that communicates trivially over the network\nwith objects that answer as if they were local.\n\nSend, receive and manage data with this powerful library. Presentation\nwill include real life example for restarting a load balanced web\ninstance running two Apache web servers and a MySQL database.\n\nAlthough Python allows you to perform simple network operations, Pyro\ncreates a nice layer between core networking essentials and your code,\nallowing you to concentrate more in developing your application.\n"}, {"title": "Diversity as a Dependency (#49)", "description": "Diversity as a Dependency\n\nPresented by Anna M Ravenscroft (PSF)\n\nThe PSF recently adopted a diversity statement. While some argue that we\nshould do this just because it's \"the right thing to do\", others\nquestion why we, as a technical community, should even worry about\ndiversity. This talk addresses the diversity question, not in moralistic\nor ethical terms, but in pragmatic ones. Studies on creativity and\nproductivity demonstrate the potential benefits of diversity for the\nPython community. Making Python the best language it can be is not\nmerely helped by increasing diversity, but may be dependent on\ndiversity.\n"}, {"title": "Django Deployment Workshop", "description": "Django Deployment Workshop\n\nPresented by Jacob Kaplan-Moss\n\nSo you've written a Django site... now what? Writing the application is\njust the beginning; now you've got to put it into production! In this\nhands-on workshop we'll walk through the creation of a full Django\ndeployment environment running on a cluster of (virtual) machines.\n\nThis class will introduce students to a wide variety of technologies,\nincluding Amazon's EC2 and S3, Fabric, Varnish, nginx, mod\\_wsgi,\nmemcached, PostgreSQL, pgpool, pg\\_standby, and more.\n\nBy the end of the class, each student will have created an environment\nfeaturing:\n\n-  Multiple levels of caching and load balancing.\n-  Multiple web application servers.\n-  Shared media servers.\n-  Redundant replicated database servers.\n-  Separate caching servers.\n\nWe'll create this whole stack on Amazon EC2 virtual machines, so\nstudents will be able to take home a complete copy of all the deployment\nconfiguration for future review at their leisure.\n\nNote: the example application used in this class with be a Django site,\nand the class assumes at least a moderate comfort level with Django.\nHowever, the tools and techniques apply just as well to other Python web\nframeworks, so users of other tools will likely be able to follow along\nfairly easily.\n\nIntended Audience\n=================\n\nIntermediate to advanced Django users with sites nearing or in\nproduction. Python developers using other web frameworks will likely be\nable to follow along -- see the note in the summary, above.\n\nClass Outline\n=============\n\n-  Introduction: the deployment question\n-  Application server: mod\\_wsgi\n-  Database server: PostgreSQL\n-  Automated deployment with Fabric\n-  Multiple web servers; load balancing with nginx\n-  Adding memcached\n-  Database connection middleware: pgpool\n-  Database redundancy: warm standby\n-  Upstream caching: Varnish\n-  Final load testing: how'd we do?\n\nRequirements\n============\n\nStudents will need a computer and Amazon EC2 and S3 accounts, and will\nbe asked to familiarize themselves with the process of starting and\nstopping EC2 virtual machines before the class.\n\n`http://us.pycon.org/2010/tutorials/kaplanmoss\\_django/ <http://us.pycon.org/20%2010/tutorials/kaplanmoss_django>`__\n"}, {"title": "Django in Depth", "description": "Django In Depth\n\nPresented by James Bennett\n\nMost books, tutorials and other documentation for Django take a\nhigh-level approach to its components and APIs, and so barely scratch\nthe surface of the framework. In this tutorial, however, we'll take a\ndetailed look under the hood, covering everything from the guts of the\nORM to the innards of the template system to how the admin interface\nreally works.\n\nWhether you're the newest of newbies or the most seasoned of application\ndevelopers, you'll come away with a deeper knowledge of Django, and a\nplethora of new tips and tricks you can use in your own applications.\n\nIntended Audience\n\nBeginning to intermediate users of the Django web framework.\n\nClass Outline\n\n-  Introduction: going beyond Django's documentation\n-  Under the hood of the ORM\n-  Forms and validation\n-  Inside the template system\n-  How Django processes requests\n-  Understanding the view layer\n-  The admin interface, inside and out\n-  Q&A;\n\n[VIDEO HAS ISSUES: Cam frezz from time to time]\n"}, {"title": "Easy command-line applications with cmd and cmd2 (#153)", "description": "Easy command-line applications with cmd and cmd2\n\nPresented by Catherine Devlin (IntelliTech Systems)\n\nThe Python Standard Library's cmd module makes it absurdly simple to\nwrite command-line interpreters - non-graphical programs that\ncommunicate with users interactively through a simple text interface.\nThe third-party cmd2 module adds high-powered \"batteries\" to\napplications written for cmd.\n\nThis presentation teaches attendees how to easily make their own\npowerful command-line interpreters with cmd and cmd2. It also describes\nthe tricks cmd2 uses for some of its more interesting functionality so\nthat they can implement them in their own programs (even unrelated\nones). It ends with a brief demonstration of sqlpython, a cmd2-based\napplication that improves on existing ad-hoc SQL applications.\n"}, {"title": "Ecommerce in Python: Introduction to Satchmo and GetPaid (#146)", "description": "Ecommerce in Python: Introduction to Satchmo and GetPaid\n\nPresented by Christopher Johnson (ifPeople); Chris Moffitt (Satchmo)\n\nThe world of open source ecommerce is dominated by PHP-based solutions.\nHowever, in the past few years, there has been significant progress in\nbuilding robust python-based alternatives. This discussion will cover 2\ndifferent python approaches. Satchmo is based on the Django framework\nand GetPaid is a framework for credit card processing in Plone. These\nsolutions share a similar philosophy and approach but can be used in\nvery different ways. This discussion will increase awareness of these\napplications, feature successful projects, explain how they can be used\nin your projects, and help you connect with the open source community.\n"}, {"title": "Eventlet: Asynchronous I/O with a synchronous interface (#141)", "description": "Eventlet: Asynchronous I/O with a synchronous interface\n\nPresented by Donovan Preston\n\nNetwork servers which scale to thousands of simultaneous connections\nhave always been possible in Python thanks to libraries such as asyncore\nand twisted. More recently, FriendFeed's new open source project Tornado\nhas stirred debate in this area. These libraries allow a Python process\nto scale to many simultaneous connections using non-blocking I/O (also\nknown as asynchronous I/O). However these projects require that the\nprogrammer learn a custom API to abstract away the complexities of using\na callback-style API.\n\nEventlet uses greenlet, which provides coroutines as described in \"The\nArt of Computer Programming\", to implement efficient cooperative\nconcurrency while retaining synchronous semantics. Eventlet also\nprovides an implementation of the standard library's socket module. Code\nwritten to use Python's standard socket library can be transparently\nconverted to use nonblocking I/O and green threads with eventlet. This\nleads to much greater code reuse and programmer efficiency.\n\nhttp://www.eventlet.net/\n"}, {"title": "Extending Java Applications with Jython (#65)", "description": "Extending Java Applications with Jython\n\nPresented by Frank J Wierzbicki (Jython)\n\nJython is an implementation of Python for the JVM. This talk covers the\noptions available for integrating Jython and Java code, especially Java\ncalling into Jython, since this is the trickier case. This talk will\nalso cover some Java specific deployment options, such as deploying your\nJython application as a jar file. Jar files allow you to package\nJava/Jython applications into a single archive. In many environments a\nuser can click on a jar file to launch the contained application.\n"}, {"title": "Faster Python Programs Through Optimization", "description": "Faster Python Programs Through Optimization\n\nMike M\u00c3\u00bcller\n\nAlthough Python programs may be slow for certain types of tasks, there\nare many different ways to improve performance. This tutorial will\nintroduce optimization strategies and demonstrate techniques to\nimplement them. Another of the objectives of this course is to give\nparticipants the ability to decide what might be the optimal solution\nfor a certain performance problem. Participants are strongly recommended\nto bring laptops because all techniques are introduced with examples and\nexercises.\n\nIntended Audience\n\nPython programmers with intermediate knowledge.\n\nClass Outline\n\n-  How Fast is Fast Enough?\n-  Optimization Guidelines\n\n   -  Premature optimization\n   -  Optimization rules\n   -  Seven steps for incremental optimization\n\n-  Optimization strategy\n\n   -  Measuring in stones\n   -  Profiling CPU usage\n   -  Profiling memory usage\n\n-  Algorithms and Anti-patterns\n\n   -  String Concatenation\n   -  List and Generator Comprehensions\n   -  The Right Data Structure\n   -  Caching\n\n-  The Example\n-  Testing Speed\n-  Pure Python\n-  Meet Psyco, the JIT\n-  Numpy for Numeric Arrays\n-  Using multiple CPUs with pyprocessing/multiprocessing\n-  Combination of optimization strategies\n-  Results of Different Example Implementations\n\nThe following third-party packages are needed:\n\n-  psyco (version 1.5.2 or higher)\n-  numpy (version 1.2 or higher)\n-  pyprocessing (2.5 or lower only)\n-  Guppy\\_PE framework\n\n"}, {"title": "Hacking the Social Web with Python", "description": "Open Stack: Hacking the Social Web\n\nPresented by David Recordon/Mike Malone\n\nIn this tutorial we'll explain what the Open Stack is and how you can\nuse tools like OAuth, OpenID, and Portable Contacts to integrate your\napp with the rest of the web. We'll cover each component in depth, and\nwalk through example Python implementations for a variety of scenarios.\n\nIntended Audience\n\n-  Beginning to intermediate Python programmers interested in Web\n   Development\n-  Python programmers who provide or consumer web service APIs\n\nClass Outline\n\n-  Intro: what is the \"Open Stack\"\n-  Working with HTTP in Python\n-  Working with responses: JSON, XML, Atom, RSS, HTML\n-  Decentralized identity with OpenID\n\n   -  Implementing a Provider in Python\n   -  Implementing a Relying Party in Python\n\n-  Delegated authorization with OAuth\n\n   -  Implementing a Provider in Python\n   -  Implementing a Consumer in Python\n\n-  Exchanging contacts with Portable Contacts\n-  Aggregating activity with Activity Streams\n-  Discovering how to communicate: LRDD + XRD\n-  Making markup structured: microformats\n-  The future of the Open Stack\n-  Learn more & get involved: resources and communities\n-  Q&A;\n\nRequirements\n\nSome experience doing web development or working with web service APIs\n"}, {"title": "Hg and Git : Can't we all just get along? (#154)", "description": "Hg and Git: Can't we all just get along?\n\nPresented by Scott Chacon\n\nThere is a fair amount of unnecessary animosity between developers about\nversion control systems, especially between Mercurial and Git users. In\nreality, these two systems are very similar and can actually cooperate\npretty well. In this talk we will show just how similar Git and\nMercurial are, look at some of their technical differences, and see how\nthey can work together by looking at hg-git, the bidirectional\nGit/Mercurial bridge, implemented in Python.\n"}, {"title": "How and why Python is being used to by the Military to model real-world battlefield scenarios (#13)", "description": "How and why Python is being used by the Military to model real-world\nbattlefield scenarios\n\nMr. Eric Silverman (ALATEC Inc. / US Army)\n\nLeveraging the power of Python, military analyst and software developers\nout at White Sands Missile Range in New Mexico have converted a\nclosed-form model, which was developed for scripted Cold War scenarios,\ninto a more sophisticated and adaptive system. COMBATXXI is a premium\nwargaming model, which now is poised to answer questions that have a\ndirect effect on military operations currently in theater, in large part\nbecause of Python.\n\n[VIDEO HAS ISSUES: High pitched noise on audio]\n"}, {"title": "How Are Large Applications Embedding Python? (#6)", "description": "How Are Large Applications Embedding Python?\n\nPresented by Peter Shinners\n\nAn examination of the ways Python is being embedded and deployed in the\nlarge applications used for computer graphics; like Renderman, Maya,\nHoudini, and Nuke.\n\nThis session is for those interested in the popular techniques of\nembedding the Python interpreter. The survey will determine the best\npractices for embedding Python at the core of a large application.\n"}, {"title": "How does Enthought distribute packages? (#108)", "description": "How does Enthought distribute packages?\n\nPresented by Dr. Ilan Schnell\n\nThis presentation gives an overview of how packages are build and\ndistributed for different operating systems in the Enthought Python\nDistribution. Enstaller (http://pypi.python.org/pypi/Enstaller/4.0.0) is\na tool I wrote for installing egg-based packages, which are not\nnecessarily Python packages, such as SWIG or HDF5. I will discuss the\narchitecture of Enstaller, and in particular the egg-based distribution\nformat.\n\n[VIDEO HAS ISSUES: Frezz frame in the start of the video]\n"}, {"title": "How Python, TurboGears, and MongoDB are Transforming SourceForge.net (#47)", "description": "How Python, TurboGears, and MongoDB are transforming SourceForge.net\n\nPresented by Rick Copeland\n\nIn mid-2009, SourceForge embarked on a quest to modernize our websites,\nstarting with the download (consumer) flow on SourceForge.net. A small\nteam was tasked the rewrite, converting a site originally implemented in\nPHP with Python. Using a customized TurboGears as a core component, the\nrewrite was completed and the new site deployed in under 2 months. This\ntalk tells the story of that rewrite and explains our new technology\nstack, which includes TurboGears, MongoDB, and Jinja templates.\n"}, {"title": "How to write cross-interpreter Python programs (#101)", "description": "How to write cross-interpreter Python programs\n\nPresented by Maciej Fijalkowski (merlinux GmbH, pypy)\n\nThis talk will cover basics about writing cross-interpreter python\nprograms. What to do and most of all what not to do. This will help you\nif you want at some point in time to run program on for example Java\nplatform or faster python interpreter, but also if you want to keep it\nrunning between CPython releases.\n"}, {"title": "Implementing Domain Specific Languages In Python", "description": "Implementing Domain Specific Languages In Python\n\nPresented by Sean Jensen-Grey\n\nIntended Audience\n\nIntermediate\n\nClass Outline\n\n-  What are DSLs? Internal/External\n-  Why DSLs?\n-  How can they be expressed in Python?\n-  Mini Language Design\n-  Implementing External DSLs\n-  Web / AI / Enterprise\n-  Testing\n-  Documenting\n\nRequirements\n\nStudents should have their own computer with Python 2.6 installed\n"}, {"title": "Import this, that, and the other thing: custom importers (#9)", "description": "Import this, that, and the other thing. Custom importers\n\nPresented by Brett Cannon\n\nSince Python 2.3, the ability has existed to customize the import\nprocess so that one can support code stored in alternative formats, e.g.\nzipimport and its support of importing code from a zip file. The aim of\nthis talk is to make sure you understand how the custom import mechanism\nworks and how to write your own custom importers using importlib from\nPython 3.1.\n"}, {"title": "Interfaces, Adapters and Factories (#181)", "description": "Interfaces, Adapters, and Factories\n\nPresented by Jeff Rush\n\nA step-by-step introduction to the idea of object interfaces and\nadapters using incremental code examples, based on the zope.interface\nmodule. The case for adaption to ease code brittleness will be made and\nhow we can reason about interfaces. I'll show how to automatically check\ncode for conformance to your interfaces and then cover where objects\ncome from, the several kinds of object factories in Python and how one\nkind can be based on interfaces.\n\n[VIDEO HAS ISSUES: Beginning out of focus]\n"}, {"title": "Internationalizing your Django project (#74)", "description": "Internationalizing your Django project\n\nPresented by Matt Croydon (Mediaphormedia)\n\nInternationalizing your Django application isn't as hard as it sounds.\nThis session introduces the topic of internationalization and walks\nthrough what it takes to use Django's internationalization tools,\nincluding how to mark models, views, and templates for translation and\nhow to enable internationalization in your application. We will also\nstep through localizing your application in a new language.\n"}, {"title": "Introduction to Django", "description": "Introduction to Django\n\nPresented by Chander Ganesan\n\nThe Django framework is a fast, flexible, easy to learn, and easy to use\nframework for designing and deploying web sites and services using\nPython. In this session, we'll cover the fundamentals of development\nwith Django, generate a Django data model, and put together a simple web\nsite using the framework.\n\nIntended Audience\n\nBeginner to Intermediate Python programmers\n\nClass Outline\n\n-  Django Overview and Basic Introduction (~ 5 min)\n-  Downloading & Installing Dango (~ 10 min)\n-  Creating a new project (~ 5 min)\n-  Choosing a database (~ 5 min)\n-  Creating a new application (~ 5 min)\n-  Installing & Using Django contrib applications (~ 7 min)\n-  Overview of Django flow (i.e., URLconf expression, view function,\n   HTTPResponse object, etc.) (~7 min)\n-  Generating Simple Dango Views (~ 5 min)\n-  Configuring a URLConf for basic views (~ 5 min)\n-  Creating Django Templates (template syntax, common filters and tags,\n   loops, etc) (~ 10 min)\n-  Creating & using Template Context objects (~ 5 min)\n-  Introduction to Django Models (~ 10 min)\n-  Defining basic Django models (~ 15 min)\n-  Understanding basic model fields & options (~ 15 min)\n-  Generating & Reviewing Model SQL (~ 5 min)\n-  Adding data to a model (~ 7 min)\n-  Simple data retrieval using models (~ 7 min)\n-  Working with QUerySets (filters, slicing, ordering, common methods)\n   (~ 10 min)\n-  Overview of Q objects (~ 5 min)\n-  Using the Admin interface (~ 10 min)\n-  Using Generic views (~ 10 min)\n-  Access control with sessions & users (~ 10 min)\n\nRequirements\n\n-  Attendees wishing to try the examples should have Python 2.6\n   pre-installed (http://www.python.org)\n-  Attendees should have Django pre-downloaded or pre-installed.\n   (http://www.djangoproject.com)\n\n"}, {"title": "Introduction to Internet Programming", "description": "Introduction to Internet Programming (Wesley J. Chun)\n\nPython is an interpreted, cross-platform, object-oriented programming\nlanguage that is popular for a wide range of applications, one of which\nis Internet programming. This tutorial introduces current Python\nprogrammers to 3-4 distinct areas of Internet programming, each in\nself-contained lectures with a demonstration of code following each\nlecture topic. Intended Audience\n\nDevelopers familiar with Python who are interested in exploring\nclient/server network programming with sockets, Internet client (FTP,\nNNTP, e-mail), development and web programming.\n\nClass Outline\n\nPython is an interpreted, cross-platform, object-oriented programming\nlanguage that is popular for a wide range of applications, one of which\nis Internet programming. This tutorial introduces current Python\nprogrammers to distinct areas of Internet programming, each in\nself-contained lectures with a demonstration of code following these\nlecture topics (each ranging from 20-60min in length):\n\n-  Network Programming using Sockets\n-  Internet Client Programming\n-  Web/CGI Programming and Concepts\n-  Intro to Django (time-permitting)\n\nWe start at the lowest layer, where one creates communication channels\ndirectly between clients and servers using sockets then move up one\nlevel to discuss well-known Internet protocols such as FTP. Then we move\nup even higher to address the concept of web programming, including a\ndescription and purpose of all \"CGI\" interfaces, and finally, if there's\ntime, to give a high-level quick introduction to one of the most popular\nPython web frameworks today, Django. We'll try build and implement a\nsimple blog in 15-20 minutes! This is especially for those of you who\ncouldn't sign up for the intro to Django tutorial at this PyCon which\nwill likely be full.\n\nAbout the Instructor\n\nWESLEY J. CHUN, MSCS, is the author of Prentice Hall's bestseller, \"Core\nPython Programming\", its video training course, \"Python Fundamentals\"\n(LiveLessons DVD), and co-author of \"Python Web Development with\nDjango\". In addition to being a software architect and Developer\nAdvocate for Google, he runs CyberWeb, a consulting business\nspecializing in Python software engineering and technical training. He\nhas over 25 years of programming, teaching, and writing experience,\nincluding more than a decade of Python. While at Yahoo!, he helped\ncreate Yahoo! Mail and Yahoo! People Search using Python. He holds\ndegrees in Computer Science, Mathematics, and Music from the University\nof California.\n"}, {"title": "Introduction to SQLAlchemy", "description": "Introduction to SQLAlchemy\n\nPresented by Johnathan Ellis\n\nSQLAlchemy is the premier SQL toolkit for Python. SQLAlchemy exposes the\nfull power of SQL while remaining easy to use for the basics, and is\nflexible enough to work with existing database schemas as well as fresh\ndesigns. SQLAlchemy is used in production by leading Python web\nframeworks Pylons and Turbogears as well as many other web and non-web\ndevelopers.\n\nThis tutorial teaches SQLAlchemy's object-relational mapping to automate\npainlessly loading and persisting objects from and to your database,\neven when complex relationships exist.\n\nIntended Audience\n\nPython experience: intermediate. You should already have some hands-on\nexperience with Python and be comfortable reading modern Python code.\n\nSQL experience: beginning. You should know how to SELECT, INSERT, and\nDELETE, and how to read queries involving JOINs, but we will only be\nreading the SQL generated by SA, not writing our own.\n\nORM experience: prior experience with an object-relational mapper is not\nnecessary.\n\nClass Outline\n\nIntroduction:\n\n-  Philosophy\n-  SA features\n\nFundamentals:\n\n-  Introduction to ORM\n-  Data Mapper pattern vs Active Record\n-  Tables\n-  Mapping basics\n\nQueries:\n\n-  Conditions, operators\n-  Joins\n-  lazy / eager loading\n-  Relation-based queries\n\nSessions & identity map:\n\n-  detatching, attaching objects\n-  Lifecycle relations\n\nMore Mapping:\n\n-  one to one, many to many\n-  backreferences\n\nExtensions, etc.:\n\n-  DDL\n-  Migrate\n-  FormAlchemy\n-  SqlSoup\n-  Elixir\n\nRequirements\n\nLaptop with Python 2.5 or 2.6 and SQLAlchemy 0.6 installed. Code samples\nmay also work with Python 2.4 but will not be tested on that platform.\nSQLAlchemy also supports Jython and cPython 3.x, but this tutorial will\nbe using \"classic\" cPython.\n"}, {"title": "Introduction to Traits", "description": "Introduction to Traits\n\nPresented by Corran Webster\n\nThe Traits project allows you to simply add validation, initialization,\ndelegation, notification and a graphical user interface to Python object\nattributes. In this tutorial we will explore the Traits toolset and\nlearn how to dramatically reduce the amount of boilerplate code you\nwrite, do rapid GUI application development, and understand the ideas\nwhich underly other parts of the Enthought Tool Suite (such as MayaVi\nand Chaco plotting toolkits).\n\nTraits and the Enthought Tool Suite are open source projects licensed\nunder a BSD-style license.\n\nIntended Audience\n\nIntermediate to advanced Python programmers\n\nClass Outline\n\n-  Introduction to ETS and Traits\n-  Basic Traits + Trait types + Property Traits + Trait Validation\n-  Traits UI + Basic Traits UI + Tour of the Trait editors + Advanced\n   Trait editors\n-  Notification in Traits + Static notification + Dynamic notification\n-  Advanced Traits UI + Customizing Views, Groups and Items + Traits UI\n   Handlers + Buttons, Menus and Toolbars + Drag and Drop\n-  Q&A;\n\nRequirements\n\nLaptop recommended (any major OS is fine), with the following software\ninstalled:\n\n-  Python 2.5 or 2.6 (www.python.org)\n-  Either wxPython (http://www.wxpython.org/) or PyQt\n   (http://www.riverbankcomputing.co.uk/software/pyqt/intro)\n-  Numpy and Scipy (http://www.scipy.org)\n-  Enthought Tool Suite 3.2 or higher\n   (http://code.enthought.com/projects)\n\nAll required software can be obtained by installing the free trial\nversion of the Enthought Python Distribution v5 or later\n(http://www.enthought.com/products/epd.php).\n"}, {"title": "Introduction to Twisted", "description": "Introduction to Twisted\n\nPresented by Chander Ganesan\n\nInterested in faster networking with Python? Twisted is an event-driven\nnetworking engine written in Python that allows developers to quickly\nand easily develop and deploy network services.\n\nIn this tutorial, attendees will learn what twisted is, why to use it,\nhow it works, and how to install, develop, and deploy simple clients and\nservers using Twisted.\n\nAttendees should bring a laptop if possible, to try out code examples in\nclass.\n\nIntended Audience\n\nIntermediate Python Programmers with an understanding of Pythons object\noriented syntax (classes, inheritance, etc.)\n\nClass Outline\n\n-  Introduction to Twisted (15 min) - Basic Concepts\n\n   -  Event-Driven model, cooperative multi-tasking\n\n-  Installing Twisted & Verifying Installation (10 min)\n-  Starting the Event loop (10 min)\n-  Timed Events (10 min)\n-  Understanding Twisted Factories & their use (15 min)\n-  Understanding Protocol Objects & their use (15 min)\n-  Creating a simple Twisted Client (25 min)\n\n   -  Using twisted.internet.reactor.connectTCP()\n   -  Creating a Client Factory\n   -  Creating a Protocol\n\n-  Creating a simple Twisted Server (Server Factory) (25 min)\n\n   -  Using twisted.internet.reactor.listenTCP()\n   -  Creating a Server Factory\n\n-  Using Twisted SMTP to Send Mail (15 min)\n-  Twisted Web Basics (25 min)\n-  Introduction to the twist Daemonizer & tac files (15 min)\n\nRequirements\n\n-  An understanding of Object Oriented Python (OOP concepts,\n   inheritance, classes, etc.)\n-  Attendees wishing to try the examples should have Python 2.4 or newer\n   and Twisted pre-installed.\n-  Attendees wishing to try the examples should have Python 2.4 or newer\n   and Twisted pre-downloaded (we'll go over installation)\n-  Twisted may be downloaded at\n   `http://www.twistedmatrix.com/ <http://www.twistedmatrix.com>`__\n-  Windows users will require the Win32 extensions for Python as well\n   http://starship.python.net/crew/mhammond/win32/Downloads.html\n\n"}, {"title": "Introduction to unittest (a.k.a. PyUnit) (#96)", "description": "Introduction to Unittest (a.k.a. PyUnit)\n\nPresented by Chander K Ganesan\n\nThe PyUnit (unittest) unit testing framework provides an easy-to-use set\nof tools and techniques to add robust unit testing to your Python code.\nBy integrating unit testing in their code, developers allow for a robust\nset of tools to quickly and easily identify \"broken\" code.\n\nIn this session we'll explore the unittest module and demonstrate how to\nleverage PyUnit for unit testing.\n"}, {"title": "IronPython Tooling (#67)", "description": "IronPython Tooling\n\nPresented by Dino E Viehland (Microsoft)\n\nOne of the most popular requests for the IronPython team is tooling\nsupport. During this talk I\u00e2\u20ac\u2122ll show you some of the existing tools\navailable to help create IronPython applications. I\u00e2\u20ac\u2122ll also look at\nthe latest IronPython features which can help you debug, profile and\nimprove your applications. I\u00e2\u20ac\u2122ll also compare and contrast these with\nthe solutions available for CPython that you may already be familiar\nwith.\n"}, {"title": "Keynote: Building the Python Community", "description": "Keynote: Building the Python Community\n\nPresented by Steve Holden\n\nSteve addresses the Python community, thanks helpers for PyCon 2010, and\ntalks about the PSF and where it's at.\n"}, {"title": "Keynote: Cadence, Quality and Design", "description": "Keynote: Cadence, Quality and Design\n\nPresented by Mark Shuttleworth\n\nTalks about things we can do as a community to accelerate the\ndevelopment of software, increase collaboration, and build better\napplications. Approaches this by talking about cadence, quality and\ndesign.\n"}, {"title": "Keynote: Relentlessly Pursuing Opportunities With Python, or why the AIs will Spare Us All!", "description": "Keynote: Relentlessly pursuing opportunities with Python, or why the AIs\nwill Spare us all!\n\nPresented by Antonio Rodriguez\n\nTalks about how in every startup, success is defined by how many people\nyou can get to hack.\n"}, {"title": "Keynote: State of PyPy", "description": "Keynote: State of PyPy\n\nPresented by Maciej Fijalkowski\n\nTalks about the current state of PyPy.\n"}, {"title": "Keynote: State of Unladen Swallow", "description": "Keynote: State of Unladen Swallow\n\nPresented by Collin Winter\n\nTalks about the current state of Unladen Swallow.\n"}, {"title": "Learning Hosting Best-Practices From WebFaction (#57)", "description": "Learning Hosting Best-Practices From WebFaction\n\nBrandon Craig Rhodes (Rhodes Mill Studios, Inc.)\n\nThe rise of WebFaction has been dramatic in the world of Python-friendly\nhosting services. What are the secrets to getting the most out of their\nfeatures? From the point of view of a customer with no other affiliation\nwith WebFaction \u00e2\u20ac\u201d as a customer advising other customers \u00e2\u20ac\u201d this talk\noffers lessons learned in using WebFaction to host everything from lone\nstatic content to multiple Python web applications and services\nco-existing together. WebFaction uses some unique techniques to support\nboth user-local *and* application-local Python packages. Should you use\ntheir special installation techniques, or install and use virtualenv on\nyour own initiative? Learn the trade-offs, and learn how *not* to get\nyourself in trouble while running ``easy_install`` on WebFaction, my\nfavorite hosting service.\n\n[VIDEO HAS ISSUES: Audio slightly clipping]\n"}, {"title": "Managing the world's oldest Django project (#80)", "description": "Managing the world's oldest Django project\n\nPresented by James Bennett\n\nOr, \"how we cut 40,000 lines of code and learned to love unit testing.\"\n\nThis talk will cover some of the development history behind Ellington,\nthe CMS which spawned the open-source Django web framework, and some of\nthe issues involved in developing and maintaining a codebase of this age\nand size. Highlights include branch management, the advantages of\nopen-sourcing non- critical functionality, the pain of porting and the\njoy that can only be found in a passing test suite.\n"}, {"title": "Mastering Python 3 I/O (part 1)", "description": "Mastering Python 3 I/O\n\nPresented by David Beazley\n\nAs most Python programmers know, Python 3 breaks backwards compatibility\nwith Python 2 in a number of significant ways. Although guides to Python\n3 tend to focus on superficial incompatibilities such as the new print\nfunction, changes to exception handling, or new language features, the\nmost substantial changes concern the strict separation of Unicode and\nbytes as well as the new I/O stack. Not only do these changes have\nfar-reaching effects throughout the standard library, but changes to I/O\nare likely to be the most major source of problems for anyone porting an\nexisting Python application to Python 3. In this tutorial, we're going\nto take a top-to-bottom tour of the entire Python 3 I/O system. We'll\nfocus on how to properly handle both text and binary data, changes to\nstandard library modules, examine advanced features such as the buffer\nAPI, perform some performance experiments, and end with practical advice\nfor programmers working on porting applications from Python 2 to 3.\nIntended Audience\n\nIntermediate to advanced Python programmers who are either developing\nnew applications or contemplating a migration to Python 3. Attendees\nshould already be familiar with the basics of Python programming\nincluding standard datatypes and commonly used library modules. A\nbackground in systems programming topics such as file handling,\nsubprocesses, and socket programming is also recommended. Class Outline\n\n-  Introducing Python 3 (with a focus on I/O)\n-  Text Processing\n-  Binary Data Handling\n-  Dealing with System Interfaces and External Programs\n-  The New io library\n-  Network programming\n-  The revised buffer API and direct I/O\n-  Porting from Python 2 to 3.\n\n"}, {"title": "Mastering Team Play: Four powerful examples of composing Python tools (#184)", "description": "Mastering Team Play: Four powerful examples of composing Python tools\n\nPresented by Raymond Hettinger\n\nStarts with a quick review of the performance characteristics of major\nindividual tools in Python: bisect, heapq, lists, deques, sets,\nfrozensets, class structures, sorts, and weakreferences. Show how these\ntools can be powerfully combined to create elegant solutions to four\nhard problems.\n\n1. Random sampling: when one data structure isn't enough. Discuss how\n   the nature of the problem dictates when to use one of two alternate\n   data structures.\n2. Ordered dictionaries: with the right compostion of dictionaries,\n   linked lists, and weak references, a dictionary can remember its\n   insertion order without any impact on its big-Oh running times.\n3. NFA to DFA conversion. The classic, but difficult, algorithm for\n   lexical analysis becomes simple when composing Python's dicts and\n   frozensets.\n4. Running median: the obvious approaches are horribly slow. The problem\n   centers around how to efficiently maintain sorted data while\n   advancing a large sliding window one value at a time. A list of\n   deques provides a dramatic and scalable improvement in running time.\n\n"}, {"title": "Modern version control: Mercurial internals (#113)", "description": "Modern version control: Mercurial internals\n\nPresented by Dirkjan Ochtman\n\nIn this talk, I'd like to talk a bit about Mercurial. This will not be a\nbeginner-level talk on DVCS or hg; it aims to be a higher-level\ndiscussion of the concepts employed in Mercurial. After having discussed\nthese, I'd also like to compare Mercurial and git based on UI,\nperformance and underlying concepts.\n"}, {"title": "New *and* Improved: Coming changes to unittest, the standard library test framework (#52)", "description": "New *and* Improved: Coming changes to unittest, the standard library\ntest framework\n\nPresented by Michael J Foord\n\nIn Python 2.7 and 3.2 a whole bunch of improvements to unittest will\narrive. unittest is the Python standard library testing framework and\nfor several years it has languished whilst other Python testing\nframeworks have innovated. Some of the best innovations have made their\nway into unittest which has had quite a renovation.\n\nThis talk will go through the major changes, like the new assert\nmethods, test discovery and the load\\_tests protocol, and also explain\nhow they can be used with earlier versions of Python.\n"}, {"title": "Optimal Resource Allocation using Python (#36)", "description": "Optimal Resource Allocation using Python\n\nPresented by Ryan J O'Neil\n\nA brief introduction to modeling and solving resource allocation and\nscheduling problems using Python and SCIP.\n\nAt times a programmer is faced with difficult, possibly NP-Hard,\noptimization problems such as scheduling or assignment. Sophisticated\ntechniques exist for modeling and solving these sorts of problems which\nare well implemented in optimization solvers. This talk introduces some\nof these techniques using the ZIB Optimization Suite and its new Python\ninterface.\n\n[VIDEO HAS ISSUES: Audio buzzing]\n"}, {"title": "Optimizations And Micro-Optimizations In CPython (#38)", "description": "Optimizations and Micro-Optimizations in CPython\n\nPresented by Mr. Larry Hastings\n\nCPython mostly gets faster from one version to the next. And when\nCPython gets faster, your programs get faster. This talk is a survey of\noptimizations made to CPython, recent and historical, large and small.\nAudience doesn't need to be familiar with CPython internals, but should\nbe familiar with Python and conversant in C.\n\n[VIDEO HAS ISSUES: Audio interference]\n"}, {"title": "Panel: Form Generator Generators (#28)", "description": "Panel: Form Generator Generators\n\nChristopher Perkins; Brandon Craig Rhodes (Rhodes Mill Studios, Inc.);\nChris P McDonough (Agendaless Consulting); Jacob Kaplan-Moss\n(jacob@jacobian.org); Jonathan Ellis\n\nIt seems that almost every python web framework in existence has solved\nthe problem of automatically generating forms. Some have straight\nforward techniques, some are unique or even an unusual approach to the\nproblem. The question is: \"what can we learn from each other?\". This\npanel will examine the different ways developers generate forms by\noffering examples, and summarizing the functionality, differences, and\nsimilarities between these valuable web development tools.\n\n[VIDEO HAS ISSUES: Feedback galore when moving between mics, cover your\nears]\n"}, {"title": "Pay only for what you eat: A tour of the Repoze.BFG repository and philosophy (#174)", "description": "Pay only for what you eat: A tour of the Repoze.BFG repository and\nphilosophy\n\nPresented by Carlos de la Guardia\n\nBFG is a Python web application framework based on WSGI. It is a \"pay\nonly for what you eat\" framework. Meaning that you can get started\neasily and learn new concepts as you go, and only if you need them. It's\nsimple, well tested, well documented, and fast. It also tries to make\ndevelopment fun.\n\nThis talk will introduce the framework and its philosophy, including\nsimilarities and differences with other frameworks. I will then show\nsome of the software available in its repository and discuss the\ninclusive, loose connection approach that the BFG community prefers for\ncreating a flexible web development platform.\n"}, {"title": "Persistent Graphs in Python with Neo4j (#140)", "description": "Persistent Graphs in Python with Neo4j\n\nPresented by Tobias Ivarsson\n\nDatabases that employ a data model other than the relational model are\nincreasingly a hot topic. Neo4j is an open source database where the\ndata model is a graph. Data in Neo4j is stored as Nodes and\nRelationships in between nodes. A lot of the data we model in\napplications every day is actually graph oriented, having a database\nthat persists such data natively is a huge benefit. In this presentation\nwe will see how to use Neo4j in Python, and demonstrate this with a web\napplication in Django.\n"}, {"title": "Plenary: Friday Evening Lightning Talks", "description": "Plenary: Friday Evening Lightning Talks\n\n(00:00) Jacob Kaplan-Moss - lightning talk about lightning talks\n\n(03:50) Van Lindberg - What an Open Source Lawyer Actually Does\n\n(09:40) Greg Wilson - The Next Big Programming Book and How You Can Make\nit Happen (http://www.third-bit.com/)\n\n(14:25) Moshe Zadka - Don't Write Big Applications (more info\n`here <http://moshez.wordpress.com/2010/02/17/dont-write-big-applications-a%20-lightning-talk/>`__)\n\n(19:35) Ned Batchelder - What's new in coverage.py\n(http://nedbatchelder.com/,\n`coverage.py <http://nedbatchelder.com/code/coverage/>`__)\n\n(25:10) Mike Maccana - Python Docx\n(`http://github.com/mikemaccana/python-\ndocx/ <http://github.com/mikemaccana/python-docx/>`__)\n\n(29:25) Trent Mick - ActiveState Code v3/Python Cookbook v3\n(http://code.activestate.com/)\n\n(34:40) Daniel Holth - Writing a SQLAlchemy Dialect\n\n(37:30) Dave Malcolm - Better Ways of Debugging the CPython Runtime\n\n(43:00) David Huggins-Daines - Recognizing Speech With Python\n(http://cmusphinx.sourceforge.net/)\n\n(48:00) Lucio Torre - Ubuntu One and Windows\n"}, {"title": "Plenary: Intro to sprints", "description": "Plenary: Intro to Sprinting and Intro to Sprints\n"}, {"title": "Plenary: Saturday Evening Lightning Talks", "description": "Saturday Evening Lightning Talks\n\n(00:00) Jacob Kaplan-Moss - Introduction\n\n(00:30) Guido van Rossum - PSF community service awards\n\n(02:42) Ka-Ping Yee - Using scrape.py to test your web apps\n\n(07:35) Ayman Hourieh - Python debugging techniques\n\n(12:28) Robin Mills - Geo-tagging and Phatch\n\n(17:30) Allen Short - Big brother's design rules\n\n(21:25) David Goodger - PyCon swag\n\n(25:00) David Ewing - Python in tiny embedded systems for the Smart Grid\nand beyond\n\n(30:15) Dmitry Jemerov - Introducing PyCharm\n\n(33:50) Dirkjan Ochtman - PEP 385: hg conversion\n\n(37:30) Jesse Noller - Python: Hell Yeah.\n"}, {"title": "PLY and PyParsing (#93)", "description": "PLY and PyParsing\n\nPresented by Andrew Dalke\n\nGot a text parsing problem? In most cases using string manipulation and\nregular expressions will solve it for you. But when the input is\ncomplex, try reaching for a parsing system to help out.\n\nThe two most popular in Python are PLY and PyParsing. PLY follows the\nlex/yacc tradition with a domain specific language to describe the\ntokens and grammar. It was built with both error diagnostics and\nperformance in mind. PyParsing is a recursive descent parser which\nexpresses the format as a Python data structure. It make no distinction\nbetween lexer and grammar and has a uniform callback system which makes\ncertain types of data extraction very easy.\n\nIn my talk I'll show the basics of how to use both systems for several\ndifferent format parsing tasks, of different complexity. This will let\nyou see how to use the parsers and understand more of the tradeoffs\nbetween complexity, readability, error handling, and performance.\n"}, {"title": "Powerful Pythonic Patterns (#186)", "description": "Powerful Pythonic Patterns video\n\nPresented by Alex Martelli\n\nAn extremely misguided meme is going around: that Python doesn't have,\nor need, any Design Patterns. Maybe the meme springs from not realizing\nwhat the Gang Of Four state so plainly in their historical \"Design\nPatterns\" book: which design patterns are useful DOES depend on the\nprogramming language one targets -- design is NOT independent of\nimplementation, as the epic-fail \"Waterfall\" Methodology Pattern would\nsuggest. If you examine a \"classic DP\" that's basically a workaround for\nsome other language's lack of garbage collection, or for a clumsy\nstatic-typing system, it may indeed be worthless for Python. But many\nother DPs are still perfectly useful and applicable, and indeed Python's\nstrengths as a language afford riffing on them to develop highly\nPythonic, powerful, productive variants.\n\nIn this talk, I analyze some of my favorite pattern families -- e.g.,\nTemplate Method and its variants, Dependency Injection and its ilk,\nCallback and friends -- in a highly Pythonic context. Non-pattern\nIdioms, and Patterns that aren't really Design Patterns but rather\nArchitecture or Methodology ones, also make cameo appearances.\n"}, {"title": "Powering the real-time web with Python: PubSubHubbub on App Engine (#173)", "description": "Powering the real-time web with Python: PubSubHubbub on App Engine\n\nPresented by Brett Slatkin\n\nPubSubHubbub is an open protocol that turns Atom and RSS feeds into\nreal-time streams. I built the reference Hub run by Google using Python\nand App Engine. In this talk you will learn how I made the real-time\nsystem work: An intro to the protocol, asynchronous processing on App\nEngine, fault-tolerance, and scalability.\n\nFor details on PubSubHubbub and the Hub's source code, see\n`http://code.google\n.com/p/pubsubhubbub/ <http://code.google.com/p/pubsubhubbub/>`__.\n"}, {"title": "py.test - Rapid Testing with Minimal Effort", "description": "py.test I - rapid testing with minimal effort\n\nPresented by Holger Krekel\n\nWant to learn writing tests in Python? This tutorial introduces basic\npractises using the popular py.test (http://pytest.org) tool. We start\nwith an overview on testing and tools in Python and then discuss and\nexercise basic idioms in a step-by-step manner. We cover the basic\nwriting, organisation and running of tests and debugging options. In the\nsecond part we discuss setup and teardown of test state, usage and\nconfiguration of test functions arguments and introduce coverage\ntesting. We will close with time to answer questions and discuss topics\nfrom the participants.\n\nIntended Audience\n\nbeginner programmers\n\nPerequisites/knowledge: basic knowledge of python programming\n\nRequirements: Laptop with Python 2.4 or greater installed. Pairing\nwelcome. outline\n\n-  why automated testing?\n-  Developer oriented automated tests\n-  The test tool question\n-  py.test basics\n-  py.test fundamental features\n-  cross-project test tool\n-  A Typical Python test layout\n-  Another typical test layout\n-  Choosing a test layout\n-  automatic test discovery\n-  mind the **init**.py files\n-  no boilerplate python test code\n-  assert introspection\n-  asserting expected exceptions\n-  print() debugging / output capturing\n-  Getting Started, basic usage [0]\n-  Failure / Traceback Demo [0]\n-  Skipping tests\n-  Dynamically skipping tests\n-  Marking test functions\n-  Marking a test for conditional skip\n-  Marking a test as expected to fail\n-  Conditional expected to fail\n-  Marking / Skipping exercise [0]\n-  Applying Marks to classes or modules\n-  break\n-  warm up: boilerplate test code\n-  \"myscan\" Exercises of this tutorial\n-  sketching our \"myscan\" project\n-  Starting Exercise [1]\n-  The example Solution [1]\n-  The \"test setup\" and fixture Problem\n-  test functions and funcargs\n-  How do funcargs work?\n-  funcarg factory notes\n-  builtin funcargs\n-  usage example: per-test temporary directory\n-  next step: adding more tests [2]\n-  observation on new tmpdir-using tests\n-  The mysetup pattern\n-  How the mysetup pattern works\n-  next step: introducing \"mysetup\" pattern [3]\n-  The new test function using \"mysetup\"\n-  a simple hook: adding a command line opt\n-  the py.test config object\n-  exercise: implement a new command line option [4]\n-  myscan example completed\n-  py.test hooks and plugins\n-  Installing \"global\" plugins\n-  exercise: use the \"figleaf\" plugin\n-  local plugins: conftest.py\n-  a simple config: ignoring directories\n-  a simple default option: verbose\n-  quick discussion of advanced usages\n-  Summary / questions and answers\n\n"}, {"title": "Pynie: Python 3 on Parrot (#148)", "description": "Pyine: Python 3 on Parrot\n\nPresented by Allison Randal\n\nPynie is an implementation of Python 3 on Parrot. The goal of Pynie is\nto duplicate the pure-Python behavior of CPython 3.x, and perhaps\neventually a C API compatibility layer. Parrot provides a set of\ncompiler tools and core functionality common to many dynamic languages,\nso the core code of Pynie is lightweight. Pynie allows Python 3\nlibraries to be shared between multiple languages. This talk is an\noverview of the features Pynie currently supports and the work left to\nbe done, together with an introduction to the internals of Pynie.\n"}, {"title": "Python's Dusty Corners (#182)", "description": "Python's Dusty Corners\n\nPresented by Jack Diederich\n\nThe talk will be a brief overview of all the features in python that you\ndon't need to know about right up until the moment you do. The list\nincludes how comparisons work, descriptors, iterators, context managers,\nnamespaces, else clauses on for/while loops (suggested by Hettinger).\nThe narrative of the talk is that these are features that you don't need\nand/or shouldn't use in your day-to-day code but that you need to keep\nin the back of your mind because other people's code and the stdlib do\nuse them. As Alex Martelli pointed out in his wonderful talk\n\"Abstractions as Leverage\" you can't successfully function at one level\nof abstraction if you don't know what is going on at the next level\ndown. This talk is a whirlwind tour of the next level down.\n"}, {"title": "Python 101", "description": "Python 101\n\nPresented by Stuart Williams\n\nThis half-day tutorial presents the basics of Python to beginning and\nintermediate programmers. It pairs well with ''Python 102'' which\nfollows a similar outline but goes much deeper.\n\nRather than starting with \"Hello, world!\", we use the interactive Python\ninterpreter shell to get hands-on familiarity with much of core Python\nbefore covering blocks and scripts.\n\nThe tutorial is divided into short sections, each with presentation and\nhands- on exercises, to quickly cover lots of ground.\n\nAdvanced topics are introduced throughout and covered in \"extra credit\"\nexercises such that more advanced participants can learn at their own\npace.\n\nIntended Audience\n\nProgrammers with experience in other languages who want a fast hands-on\nintroduction to Python. Content will target both Python 3.1 and 2.6.\n\nRequirements\n\nBring a laptop computer with Python 2.6 or 3.1 installed. Try to get as\nmuch of an overview of Python before the tutorial as you have time to in\norder to get more out of the tutorial. Two angles on this are the Python\nQuick Reference and the Python website's tutorial.\n\nClass Outline\n\n-  Numbers and operators\n-  Strings - immutability, operators, methods, functions, and formatting\n-  Introspection/Discovery\n-  Tuples and Lists\n-  List Comprehensions\n-  Objects and Names\n-  Dictionaries\n-  Loops and Blocks\n-  Iterables\n-  Generator Expressions\n-  Functions\n-  Generators\n-  Namespaces\n-  Simple Classes\n-  Exceptions\n\nThe handouts at\n`http://swilliams.ca/python-tutorials <http://swilliams.ca%20/python-tutorials>`__.\nIf you're interested in the software I wrote to deliver the talk drop me\na line. My address is in the handouts.\n"}, {"title": "Python 102", "description": "Python 102\n\nPresented by Stuart Williams\n\nThis half-day tutorial presents intermediate and some advanced features\nof Python to beginning and intermediate programmers. It pairs well with\nPython 101 which follows a similar outline but at a more introductory\nlevel.\n\nRather than starting with \"Hello, world!\", we use the interactive Python\ninterpreter shell to get hands-on familiarity with much of core Python\nbefore covering blocks and scripts.\n\nThe tutorial is divided into short sections, each with presentation and\nhands- on exercises, to quickly cover lots of ground.\n\nAdvanced topics are introduced throughout and covered in \"extra credit\"\nexercises such that more advanced participants can learn at their own\npace.\n\nIntended Audience\n\nProgrammers with experience in other languages who want a fast hands-on\nintroduction to intermediate and some advanced features of Python.\nContent will target both Python 3.1 and 2.6.\n\nClass Outline\n\n-  Numbers and Strings - operators, functions and methods\n-  Introspection\n-  Sequences - overview, concepts, and methods\n-  Objects\n-  Dictionaries\n-  Files\n-  Classes\n-  Namespaces\n-  Dynamic Classes\n-  Iterators and Generators\n-  Functions\n-  Exceptions\n-  Standard Library\n\nRequirements\n\nBring a laptop computer with Python 2.6 or 3.1 installed. Try to get as\nmuch of an overview of Python before the tutorial as you have time to in\norder to get more out of the tutorial. Two angles on this are the Python\nQuick Reference and the Python website's tutorial.\n"}, {"title": "Python 201: How to Solve It Using Python", "description": "Python 201: How to Solve it using Python\n\nPresented by Senthil Kumaran\n\nOne good way to develop applications is to divide the problem into\nsmaller manageable chunks and the build those. Once we identify and\ndefine those smaller piece of tasks, our problem becomes incredibly\neasy.\n\nBut we are still faced with the question of what is the best way to do\nthat smaller task in Python? This tutorial will answer those questions.\n\nIn this tutorial, we will identify the commonly occurring tasks that\nwould fit into to bigger problems and learn how do we solve it using\nPython.\n\nThe aim of the tutorial is help you develop the correct intuition when\ndeveloping applications using Python.\n\nIntended Audience\n\nBeginning to intermediate Python Programmers. Familiarity with Python's\nsyntax and usage is assumed.\n\nThis tutorial will use Python 3.1 examples (with changes from Python 2.6\nexplained, when it is required).\n\nThe source code and the handout will contain the snippets written in\nboth Python 2.6 and Python 3.1.\n\nClass Outline\n\n-  Outline of the Tutorial and a Brief Overview of Standard Library.\n-  Lets start with Strings.\n-  Files - We deal with them often.\n-  Date time related tasks.\n-  Dealing with Database stuff.\n-  Process Handling.\n-  Processing XMLs.\n-  Web Programming\n-  Programming tasks.\n-  Unit Testing\n-  How to Convert Python 2 to Python 3.\n\nRequirements\n\nAttendees are welcome to bring their laptops with Python installed (\nversion 3.1 and version 2.6 both installed).\n\nSome snippets will be using Twisted Matrix Framework, those who would\nlike to try those recipes, would like to have Twisted Package installed\nfor their Python Distribution.\n\n[VIDEO HAS ISSUES: Some missing sections of video due to technical\nissues (approx 3 mins in)]\n"}, {"title": "Python 3: The Next Generation (#48)", "description": "Python 3: The Next Generation\n\nPresented by Wesley J. Chun\n\nThis talk is about the evolution of Python. We will discuss Python 2 and\nPython 3: what the compatibility issues are, what the main differences\nare, and also talk about migration, Python 2.6, and other transition\ntools.\n"}, {"title": "Python for Large Astronomical Data Reduction and Analysis Systems (#107)", "description": "Python for Large Astronomical Data Reduction and Analysis Systems\n\nPresented by Francesco Pierfederici (Harvard-Smithsonian Center for\nAstrophysics)\n\nWe describe how Python is used in a large astronomy project to\nautomatically process data from several telescopes in both the\nhemispheres. We introduce the general problem and discuss challenges and\nlessons learned.\n"}, {"title": "Python in the Browser (#71)", "description": "Python in the Browser\n\nPresented by Jimmy Schementi\n\nYou write your server code in Python because you want to. You write your\nbrowser code in JavaScript because you have to. But with IronPython and\nSilverlight, you can write your browser code in Python and leave\nJavaScript behind. This talk provides an overview of Silverlight for\nPython developers, including out of browser applications as well as the\nnew \u00e2\u20ac\u0153just text\u00e2\u20ac\u009d model where Python code is embedded directly in HTML\npages. Even if you develop on Linux or Mac, you can still take advantage\nof Silverlight in the browser\n"}, {"title": "Python Metaprogramming (#64)", "description": "Python Metaprogramming\n\nPresented by Nicolas Lara\n\nPython makes a great metaprogramming languages. Metaprogramming is great\nfor solving problems faster, in a more generic way and providing rich\nAPIs. This talk explores the different options provided in python to do\nmetaprogramming and the right way to use them.\n"}, {"title": "Rapid multi-purpose testing (#81)", "description": "Rapid multi-purpose testing\n\nPresented by Holger Krekel\n\nWant to rapidly test code, javascript or documents on different Python\nInterpreters and versions? This talk gives an overview on new py.test\nfeatures of the last year. I'll discuss the minimal-boilerplate testing\nand new plugin model and give an overview on which testing needs are\ncovered so far, for example:\n\n-  run tests written for nose or unittest\n-  ad-hoc distribute tests to local or remote Python environments\n-  test compatibility with Python3\n-  run javascript unit-tests in real browsers\n-  coverage testing\n-  django-specific testing\n\nI'll conclude with upcoming features regarding testing-in-the-cloud and\nplans on more test tool convergence. (URL:\n`http://pytest.org <http://pytest.org/>`__)\n\n[VIDEO HAS ISSUES: first 47 seconds or so are really quiet]\n"}, {"title": "Relational Database Applications", "description": "Turbogears Database Applications (Relational Database Applications)\n\nPresented by Chris Perkins\n\nTurboGears2 provides a rich toolset to provide developers with a\nplatform for developing web applications with existing databases. This\n\u00e2\u20ac\u0153un-tutorial\u00e2\u20ac\u009d has a simple goal. The participants may bring in their\nown databases, and we will explore how TurboGears can use this database\nto create a working web application. If the student does not want to use\nher own database, one will be provided. This tutorial will focus on the\nTurboGears Admin system, along with relational databases.\n\nThis tutorial is intended to be an un-tutorial. The idea is simple.\nBring a public database, (or 4) and share with the class as we explore\nthe new admin- level RESTful features that TurboGears2 employs.\n\nAt the end of the class, the goal is for everyone to have a working TG2\napplication, with a working admin, at least one customized form or\ntable, based on a database they, or another student brought to class.\n\nRequirements\n\nLaptop with Python 2.5 or 2.6 installed. Database system of your choice\n(Postgres, Sqlite, MySQL) Python drivers for your desired database\nsystem installed. (psychopg2, pg8000, pysqlite, mysql-python)\n"}, {"title": "Remixing Music Pythonically (#157)", "description": "Remixing Music Pythonically\n\nPresented by Adam T. Lindsay\n\nThe Echo Nest Remix API (`http://code.google.com/p/echo-nest-\nremix/ <http://code.google.com/p/echo-nest-remix/>`__) was made open\nsource by The Echo Nest, a \"music intelligence\" company based in the\nBoston area in the autumn of 2008. This talk will offer details on the\nconcise expressivity offered when editing multimedia driven by\ncontent-based features, and some insights on what Pythonic magic did and\ndidn't work in the development of the modules. Audio and video examples\nof the fun-yet-odd outputs that are possible will be shown.\n"}, {"title": "Revisioned Databases for MultiUser Editing (#86)", "description": "Revisioned Databases for MultiUser Editing\n\nPresented by John Rittenhouse (CCP Games)\n\nAt CCP Games (www.ccpgames.com), we work on large MMO projects with tens\nof content editors editing the same data. To make this possible, we\ncreated a Revisioned Database framework that allows for us to create new\nmultiuser editing systems without data synchronization between users\nhaving to be a major concern. In this talk, solutions we've tried are\ndiscussed, the basic layout of our revision database shown, the Python\nlayer which handles it transparently for the programmer detailed, and\nhow the Python layer is used in practice. All of this is focused on\ndiscussing what worked well and what pitfalls we ran into during\ndevelopment.\n"}, {"title": "Scaling Python webapps from zero to 50 million users - A top-down approach. (#134)", "description": "Scaling Python webapps from zero to 50 million users - A top-down\napproach\n\nPresented by Jinal Jhaveri\n\nLOLapps is one of the top providers of social games and user generated\napplications with 50+ million monthly uniques on Facebook, MySpace and\nBebo. This session will focus on the top-down approach we took to scale\nour webapps for millions of users. Here are the 6 topics we will cover:\n\n-  Why is performance a big issue for Social Media\n-  How we profiled our apps and found bottlenecks using custom developed\n   and existing middleware\n-  The web application best practices we applied and results obtained\n-  How we traced database connection leaks\n-  Our caching strategies and the changes we made to speed up the\n   memcache client\n-  Results of our experiment using Paster and Tornado as our web\n   servers.\n\n"}, {"title": "Scaling your Python application on EC2 (#191)", "description": "Scaling Your Python Application on EC2\n\nPresented by Jeremy Edberg\n\nCome hear about the trials and tribulations of moving reddit's Python\napplication from physical hardware to EC2's cloud infrastructure, and\nhow they have scaled since moving. Will include general discussion of\ntheir learnings about scaling as well cloud specific issues.\n\n[VIDEO HAS ISSUES: Missing audio first few seconds]\n"}, {"title": "Scrape the Web: Strategies for programming websites that don't expect it", "description": "Scrape the Web: Strategies for programming websites that don't expect it\n\nPresented by Asheesh Laroia\n\nDo you find yourself faced with websites that have data you need to\nextract? Would your life be simpler if you could programmatically input\ndata into web applications, even those tuned to resist interaction by\nbots?\n\nYear by year, the web is becoming a stronger force. Learn how to get the\nbest of it.\n\nWe'll discuss the basics of web scraping, and then dive into the details\nof different methods and where they are most applicable. You'll leave\nwith an understanding of when to apply different tools, and learn about\nautomating a full web browser, a \"heavy hammer\" that I picked up at a\nproject for the Electronic Frontier Foundation.\n\nAtendees should bring a laptop, if possible, to try the examples we\ndiscuss and optionally take notes. Code samples will be made available\nafter class with no restrictions. Intended Audience\n\nIntermediate (or better) Python programmers, probably without extensive\nweb testing experience\n\nClass Outline\n\n-  My motto: \"The website is the API.\"\n-  Choosing a parser: BeautifulSoup, lxml, HTMLParse, and html5lib.\n-  Extracting information, even in the face of bad HTML: Regular\n   expressions, BeautifulSoup, SAX, and XPath.\n-  Automatic template reverse-engineering tools.\n-  Submitting to forms.\n-  Playing with XML-RPC\n-  DO NOT BECOME AN EVIL COMMENT SPAMMER.\n-  Countermeasures, and circumventing them:\n\n   -  IP address limits\n   -  Hidden form fields\n   -  User-agent detection\n   -  JavaScript\n   -  CAPTCHAs\n\n-  Plenty of full source code to working examples:\n\n   -  Submitting to forms for text-to-speech.\n   -  Downloading music from web stores.\n   -  Automating Firefox with Selenium RC to navigate a pure-JavaScript\n      service.\n\n-  Q&A; and workshopping\n-  Use your power for good, not evil.\n\n"}, {"title": "Seattle: A Python-based Platform for Easy Development and Deployment of Networked Systems and Applications (#162)", "description": "A Python-based Platform for Easy Development and Deployment of Networked\nSystems and Applications\n\nPresented by Ivan Beschastnikh, Justin Samuel, and Justin Cappos\n\nSeattle is an open-source platform for developing and deploying\nnetworked applications. Core feature of Seattle is that it allows safe\nexecution of untrusted code on end-user systems. In our talk we look at\nhow we used Python to build a safe, restricted code execution\nenvironment for Seattle that not only provides execution safety but also\nenforces strict resource consumption limits. In addition, Seattle\nincludes a high-level API to hide inconsistent OS-specific behaviors\nfrom developers. What results is a platform that welcomes the\nparticipation of end-user machines for general-purpose distributed\nprogramming and creates new possibilities for developers.\n\nhttp://seattle.cs.washington.edu/\n\n[VIDEO HAS ISSUES: Beginning of talk missing, due to technical\nproblems.]\n"}, {"title": "Simple WSGI composition: story of one refactoring (#51)", "description": "Simple WSGI composition: story of one refactoring\n\nPresented by Max Ischenko\n\nStory of a refactoring I did to split one big, monolithic Pylons app\ninto a bunch of smaller ones, using power of WSGI and nginx. The devil\nis in the details: how to handle common auth, site-wide look and feel,\ncommon utilities, database management. Pros and cons of the approach,\npossible alternatives.\n\nThe talk assumes listeners know what WSGI is and preferably have used\nsome WSGI-centered framework like Pylons, Werkzeug, Paste or other.\n\nThe application this talk describes powers developers.org.ua.\n"}, {"title": "Sprox: data driven web development (#137)", "description": "Sprox: data driven web development\n\nPresented by Jorge L Vargas\n\nSprox is a web frontend tool built to handle the creation and\nmanipulation of data.\n\nSprox is smart about your data. You should never write repetitive code\nagain. Sane defaults and easy overwrites is what makes Sprox guess what\nyou need for your fields.\n\nThis talk will give an overview of Sprox, what it does and how to use\nit. Then we'll explore the available backends (SQLAlchemy, MongoDB) and\ndive into the tgext.admin package, which is the \"Admin Tool\" for the\nTurboGears2 framework.\n"}, {"title": "Sunday Afternoon Lightning Talks", "description": "Plenary: Afternoon Lightning Talks\n\n(02:20) Steve Holden - Lightning talk about lightning talks\n\n(02:55) Michael Foord - Little Bit of Python podcast, upcoming unittest\nstuff, mock\n\n(08:00) Harald Armin Massa - The real harm of functional programming\n\n(11:41) Karl ? - FreeBSD certiciation\n\n(13:50) Peter Fein - Please Pirate\n\n(19;15) Chris McDonough - writing books with Sphinx\n(`repoze.bfg <http://bfg.repoze.org/book>`__);\n`createspace <https://www.createspace.com/>`__\n\n(22:05) Chris Petrilli - celery, distributed task queue\n\n(26:30) Godefroid Chapelle - vim and pdb\n\n(29:20) ? - fork() vs. threads\n\n(33:40) - doing pyweek game with a large number of contributors\n\n(38:05) Jason Huggins - Orbison\n\n(43:20) Noufal Brahim - State of Python community in India\n\n(47:40) Mike M\u00fcller - EuroSciPy 2010\n\n(49:50) David gives away stuff, sprint intros, ...\n"}, {"title": "Sunday Morning Lightning Talks", "description": "Sunday morning lightning talks\n\n(00:20) Tim Cooper - Lightning sound bytes\n\n(01:05) Gregg Lind, Dan Callahan - Python spring cleanup, contributing\nto FLOSS projects\n\n(05:30) Natalia Bidart, Mat\u00c3\u00adas Bordese, Facundo Batista - PyAr\n\n(10:40) D Huggins - You got your Cython in my NumPy\n\n(16:05) Ken Elkabany - PiCloud\n\n(21:20) Tim Fernando - Mobile web in Django\n\n(26:40) ? - Running a standard webapp on stackless; monkeypatching\n"}, {"title": "Supercharging Web Communications: Integrating Python-based Apps with Salesforce.com CRM (#152)", "description": "Supercharging Web Communications: Integrating Python-based Apps with\nSalesforce.com CRM\n\nPresented by Christopher Johnson\n\nSalesforce.com is a leading provider of Customer Relationship Management\n(CRM) for enterprises (over 55,000 customers) and nonprofits (over 6,000\ncustomers). While it handles sales, marketing and support processes, it\ncan be extended to automate any business process, making it a core part\nof business operations. Python developers working with companies using\nsalesforce.com need to be able to integrate applications with\nSalesforce. Luckily, Salesforce.com has an elegant and powerful SOAP\nAPI. This presentation will introduce an example of using the Python\nwrapper for the Salesforce.com API (Beatbox) in an interactive website.\nWhile the library itself is powerful and can be used in custom Python\napplications, the Python community can also leverage the advanced\nintegration between the Plone Content Management System (CMS) and\nsalesforce.com. We will demonstrate how a Plone website can post forms,\necommerce transactions, and event RSVPs to salesforce. Additionally, we\nwill show how developers can make Salesforce.com data interactive in a\nPlone website.\n"}, {"title": "Teaching compilers with python (#87)", "description": "Teaching compilers with python\n\nPresented by Dr. Matthieu Amiguet\n\nWhy choose Python to teach compilers?\n\nIn the University of Applied Sciences ARC, compilers are taught in a\nrelatively short amount of time. Focus is put on the main conceptual\nideas, letting aside many technical details. Still, the students are\nexpected to write a full compiler within a few weeks' time.\n\nAfter trying the traditional C/Lex/Yacc based approach, and a more\neducation- oriented Java/Jaccie solution, we settled on Python and PLY,\nplus a few enhancements (syntax tree graphical representation, decorator\nto achieve better code separation).\n\nAs a result, the students get a better understanding of the compiler\nconcepts and produce more interesting and creative projects.\n"}, {"title": "Tests and Testability (#188)", "description": "Tests and Testability\n\nPresented by Ned Batchelder\n\nTesting software is difficult. Large complex systems don't lend\nthemselves naturally to automated testing. This isn't just because they\nare large, it's because developers often don't consider how testable\ntheir code is. Testability is as important as all the other -ilities in\nyour code (portability, maintainability, efficiency, etc).\n\nTestability is a characteristic of your code that makes it easier to\ntest. Increased testability can give you better tests, but it also gives\nyou just plain better code. Improving testability generally means\nconsidering the interfaces to your internal modules and improving them\nto provide better modularity. This improvement often has benefits in\nyour product code.\n\nI'll discuss specific examples to demonstrate how code can be made more\ntestable. Mocks, dependency injection, and crisp API design are just a\nfew of the techniques that can improve your code's testability and make\nyou a happier person.\n"}, {"title": "The Meaty Parts of Python: Closures, Decorators, List Comprehension, and Functional Constructs", "description": "The Meaty Parts of Python: Closures, Decorators, List Comprehension, and\nFunctional Constructs\n\nPresented by Matt Harrison\n\nAre you new to Python and want to learn how to step it up to the next\nlevel? Have you wondered about functional programming, closures,\ndecorators, generators or list comprehensions and when you should use\nthem? This hands-on tutorial will cover these intermediate subjects in\ndetail, by explaining the theory behind them then walking through\nexamples. It will also cover how to test such programs. The session will\nconclude with some basic problems to work through.\n\nOutline:\n\n-  Testing (45 min)\n\n   -  unittest\n   -  doctest\n   -  brief code coverage intro\n   -  other testing tools\n\n-  Functional Programming (15 min)\n\n   -  lambda\n   -  map\n   -  reduce\n   -  filter\n   -  Substitutes for above constructs\n\n-  Functions (20 min)\n\n   -  callables\n   -  arguments (args, kw)\n   -  mutable parameters\n\n-  Scoping (10 min)\n-  Closures (5 min)\n-  Decorators (20 min)\n\n   -  Simple decorators\n   -  parameterized decorators\n   -  mangling\n   -  templates for decorators\n   -  classmethod staticmethod\n\n-  Properties (5 min)\n-  List comprehensions (10 min)\n-  Iterator pattern (5 min)\n-  Generators (15 min )\n-  Hands-on application (50 min)\n\n"}, {"title": "The Python and the Elephant: Large Scale Natural Language Processing with NLTK and Dumbo (#120)", "description": "The Python and the Elephant: Large Scale Natural Language Processing\nwith NLTK and Dumbo\n\nPresented by Nitin Madnani (University of Maryland, College Park); Dr.\nJimmy J Lin (University of Maryland)\n\nA practical look at NLTK and Dumbo, python-powered and open-source\ntoolkits and APIs for processing natural language on a large scale.\n\nFor people like us who make a living trying to make a computer\n\"understand\" human language, Python is a very powerful language, given\nits rapid prototyping abilities, native unicode support and a stellar\nstandard library. This relationship has been strengthened further by an\nopen-source, python- based Natural Language ToolKit\n(`www.nltk.org <http://www.nltk.org/>`__) which is being widely used in\nthe community for both teaching and research purposes and gaining\ntraction in the general Python community as well\n(`www.nltk.org/book <http://www.nltk.org/book>`__). Recently, the Python\ncommunity has seen the release of Dumbo\n(`http://wiki.github.com/klbostee/dumb\no <http://wiki.github.com/klbostee/dumbo>`__), an open-source,\npython-based cloud-computing API (based on Hadoop) via the hands of\nKlaas Bosteels.\n\nIn this talk, we show how the amalgamation of Python, NLTK and Dumbo can\nallow for very large-scale natural language processing efficiently and\nelegantly.\n"}, {"title": "The speed of PyPy (#83)", "description": "The Speed of PyPy\n\nPresented by Maciej Fijalkowski (merlinux GmbH, pypy)\n\nThe first part of the talk will cover PyPy's speed achievements\nresulting from the last year's work on the Just-In-Time Compiler. I'll\npresent and discuss a number of benchmarks and compare against other\nPython-speed projects. I'll also cover the basics of how the JIT works\nand what sort of programs it can greatly speedup (and which ones it\ncan't).\n"}, {"title": "The state of Packaging (#63)", "description": "The state of Packaging\n\nPresented by Tarek Ziad\u00e9\n\nThe Python Package Index (PyPI) became over the last years an essential\ntool to share your Python programs. As long as you use Distutils\nstandards, you can register and upload your work at PyPI in a few\nseconds.\n\nProjects like Setuptools and Pip added great features on the top of this\n: the ability to fetch PyPI to install a project and its dependencies.\nSo you can \"easy\\_install A-Program\" and everything is done\nautomatically for you.\n\nBut all these features have shown the flaws and limitations of the\ncurrent Distutils design, and the urgency to make it evolve with respect\nto the existing OS-specific packaging systems.\n\nThis talk will detail the biggest issues that need to be solved, and the\nwork that is being done. It will end up with a presentation of the\nDistutils roadmap, and an overview of the Distribute project, the\nSetuptools replacer.\n"}, {"title": "The Zen of CherryPy (#111)", "description": "The Zen of CherryPy\n\nPresented by Robert E Brewer\n\nCherryPy will be 8 years old in June 2010! This presentation will look\nat the \"Zen of CherryPy\": a set of 10 design guidelines which CherryPy\nhas developed over those years, explaining why they're useful, why some\nare uniquely Python, and how to apply them in your own projects.\n"}, {"title": "Think Globally, Hack Locally - Teaching Python in Your Community (#122)", "description": "Think Globally, Hack Locally - Teaching Python in Your Community\n\nPresented by Leigh Honeywell (HackLab.TO)\n\nFor over a year, HackLabTO (`http://hacklab.to <http://hacklab.to/>`__),\na hackerspace in Toronto, has been the home of an informal Python class\n/ hack night every Thursday evening. Our participants represent a\ndiverse cross- section of the lab's community, and include everyone from\ncomplete beginners who hadn't written code since BASIC in high school,\nto seasoned veterans. Come hear about our successes and failures, and\nlearn how to start such an event in your local community.\n"}, {"title": "Threading is not a model (#187)", "description": "Threading is not a model\n\nPresented by Joe Gregorio\n\nWe have many concurrency/multiprocessing capabilities at our finger\ntips, such as threads, processes, locks, mutexes, select, epoll,\ntransactional memory, etc. But none of them are a model for\nmultiprocessing, they are only tools on which you would build an\nimplementation of such a model. So what are the models we can choose\nfrom? How would they be implemented in Python? And why may the GIL\nactually be a good thing?\n"}, {"title": "To relate or not to relate, that is the question (#99)", "description": "To relate or not to relate, that is the question\n\nPresented by Mark Ramm\n\nThere is a lot of buzz about Couch, Casandra, MongoDB, and other non\nrelational databases, and at the same time there are decades of hard\nwork that's gone into optimizing databases built around the relational\nmodel. This talk will focus on comparing relational DB's to their new\nfriends in practice, and on providing practical tools for deciding\nwhat's right for your project.\n"}, {"title": "TurboGears Geospatial Framework (#19)", "description": "TurboGears Geospatial Framework\n\nPresented by Sanjiv Singh\n\nIt is now possible to develop feature rich GIS web applications using\nTurboGears by harnessing the power of spatial databases using GeoAlchemy\nand integrating python GIS frameworks & utilities with TurboGears using\ntgext.geo\n"}, {"title": "Turtles All The Way Down: Demystifying Deferreds, Decorators, and Declarations (#169)", "description": "Turtles all the way down: Demystifying deferreds, decorators and\ndeclarations\n\nPresented by Glyph Lefkowitz\n\nPython's flexible object model allows library and framework authors to\nadd very flexible declarations. Metaclasses, decorators, callable\nobjects, and operator overloading practically allow libraries to\nre-define the language in order to provide a more concise, natural style\nfor that library. Unfortunately, the library user's first experience of\nsuch conveniences is often confusing, because it's not clear what's\ngoing on.\n\nIn this talk, I will try to convince you that all of this wonderful\nmagic isn't all that weird. This is not a typical how-to session on how\nto use a particular feature, either of Python or of Twisted, but will\nrather draw examples from Python, Twisted, and Zope to illustrate\ntechniques you can use to read and understand \"magical\" Python code.\n"}, {"title": "Understanding the Python GIL (#82)", "description": "Understanding the Python GIL\n\nPresented by David Beazley\n\nThe Python Global Interpreter Lock (GIL) is a frequent source of debate\nand concern for programmers working with threads and concurrency.\nAlthough most Python programmers generally know that the GIL restricts\nPython's ability to utilize multiple CPUs, few know the inner details of\nhow it actually works and how it impacts applications. This talk will\ndive into the inner workings of the GIL like you've never seen before.\nTopics include details about the execution of the Python interpreter,\nthread implementation, the GILs surprising behavior on multicore CPUs,\nand more.\n"}, {"title": "Unladen Swallow: fewer coconuts, faster Python (#73)", "description": "Unladen Swallow: fewer coconuts, faster Python\n\nCollin Winter (Google / Unladen Swallow)\n\nUnladen Swallow is a Google-sponsored optimization branch of CPython.\nThis talk will cover Google's motivation for Unladen Swallow, the\napproach being taken, results so far, challenges faced, cancers cured\nand plans for merger with CPython.\n"}, {"title": "Using Python to Create Robotic Simulations for Planetary Exploration (#159)", "description": "Using Python to Create Robotic Simulations for Planetary Exploration\n(#159)\n\nPresented by Dr. Jonathan M Cameron (Jet Propulsion Laboratory (NASA))\n\nThe primary activity of the Dartslab (http://dartslab.jpl.nasa.gov) at\nJet Propulsion Laboratory (JPL) is to create simulations of robotic\nvehicles for planetary exploration. We have created simulations of a\nwide variety of robotic vehicles such as spacecraft, rovers, and\nairships. We have been using Python in a variety of ways to build our\nsimulations. In this talk we will outline how we use Python to set up a\nruntime environment for our simulations and to tie together\ncomputationally intense C++ code modules at runtime. We will also\ndiscuss how we have been using Python to help prototype and design C++\ncode.\n"}, {"title": "What every developer should know about database scalability (#21)", "description": "What every developer should know about database scalability\n\nPresented by Jonathan Ellis\n\nCaching, replication, partitioning, and distributed databases: how these\ncan (and can't!) help you scale your data.\n"}, {"title": "What We've Learned From Building Basie (#85)", "description": "What We've Learned from Building Basie\n\nPresented by Dr. Greg Wilson (University of Toronto)\n\nSince September 2008, teams of undergraduates from half a dozen\ndifferent universities have been building a Django-based replacement for\nTrac called Basie. This talk will present what they've accomplished and\ndiscuss what we've learned about getting junior developers who are\njuggling half a dozen projects at once to build production-quality code.\n"}, {"title": "Why not run all your tests all the time? A study of continuous integration systems (#160)", "description": "Why not run all your tests at all the time? A study of continuous\nintegration systems\n\nPresented by Dr. C. Titus Brown (Michigan State University)\n\nThere are an increasing number of continuous integration (CI) systems\navailable for use by Pythonistas, but no clear guide to how to choose a\nCI system for your project. I will examine the architecture choices made\nby buildbot, bitten, Hudson, continuum, CruiseControl, DART, and\npony-build, and discuss the configuration and customization of several\nof these systems for Pythonic needs, as well as give short demos (for\nbuildbot, bitten, Hudson, and pony-build).\n"}, {"title": "wxPython I: Introduction to GUI Programming", "description": "wxPython I: Introduction to GUI Programming\n\nDavid Goodger\n\nwxPython is an open-source graphical user interface (GUI) toolkit that\nruns on multiple platforms, including Linux, Windows, and Mac OS X. By\nthe end of this tutorial, attendees will have built a simple form-based\napplication from scratch using wxPython. We will build the application\nstep by step, discussing the choices and rationale as we go.\n"}, {"title": "wxPython II: Introduction to GUI Programming and MVC", "description": "wxPython II: Introduction to GUI Programming and MVC\n\nPresented by David Goodger\n\nwxPython is an open-source graphical user interface (GUI) toolkit that\nruns on multiple platforms, including Linux, Windows, and Mac OS X. By\nthe end of this tutorial, attendees will understand the concepts behind\nthe Model-View- Controller (MVC) design pattern and will have built a\ncomplex wxPython application.\n\nIntended Audience\n\nPython programmers (of any level; familiarity with Python is assumed)\nwith some wxPython experience. Attending the \"wxPython I\" tutorial is\nrecommended.\n\nRequirements\n\nAttendees are welcome to bring a laptop loaded with Python 2.4+ and\nwxPython 2.6+ to follow along, but this is not required.\n"}, {"title": "PyCon 2010:Advanced SQL Alchemy", "description": "Advanced SQLAlchemy\n\nPresented by Michael Bayer\n\nSQLAlchemy is the premier SQL toolkit for Python. SQLAlchemy exposes the\nfull power of SQL while remaining easy to use for the basics, and is\nflexible enough to work with existing database schemas as well as fresh\ndesigns. SQLAlchemy is used in production by leading Python web\nframeworks Pylons and TurboGears as well as many other web and non-web\ndevelopers.\n\nThis tutorial discusses current data mapping techniques, advanced Query\ntechniques, Session/transaction usage, and maximizing schema usage with\nSQLAlchemy's event model.\n\nIntended Audience\n\nPython experience: intermediate. You should already have some hands-on\nexperience with Python and be comfortable reading modern Python code.\n\nSQL experience: intermediate. We will use subselects and outer joins as\npart of the SQL layer.\n\nORM experience: prior experience with SQLAlchemy is recommended.\n\nClass Outline\n\nDeclarative Mapping\n\n-  Initial configuration\n-  Basic mapping\n-  Building a many-to-many relation\n-  Using late-evaluated configuration arguments\n\nAdvanced queries\n\n-  Selecting objects, selecting columns\n-  Thinking generatively\n-  Joining like a Pro\n-  Power Eager Loading\n-  Selecting from Anything\n\nSession Techniques\n\n-  Transaction lifecycle\n-  Scoping objects in and out of caches using merge()\n\nInheritance Mapping\n\n-  Single Table Inheritance\n-  Joined Table Inheritance\n-  High Level/Low Level Joined Queries\n\nExtending SQL\n\n-  Creating new SQL constructs\n-  Creating new DDL constructs\n\nExtending the ORM\n\n-  Using SessionExtension to populate denormalized views\n-  Subclassing Query to Suit Your Needs\n\n"}, {"title": "Python in quantitative finance (#158)", "description": "Python in quantitative finance\n\nPresented by Wes McKinney (AQR Capital Management, LLC)\n\nThis talk will show how Python and libraries such as NumPy were\ninstrumental at AQR for building a robust research platform for\nprototyping and implementing quantitative trading models. We will\ndiscuss many different tools, including pandas, a new open source\nlibrary designed for analyzing common financial and economic data sets.\n\nA variety of examples will be presented to explore Python's current\nstatus as a replacement for other statistical computing environments (as\ncompared with R, MATLAB, or other commercial and open-source statistical\nproducts).\n"}, {"title": "Small acts make great revolutions: crafting Python and Open Source communities in Rio de Janeiro (#78)", "description": "Small acts make great revolutions: crafting Python and Open Source\ncommunities in Rio de Janeiro\n\nPresented by Guilherme Chapiewski; Henrique Bastos\n\nEven though we are Python lovers, we at PythOnRio (Python's Rio de\nJaneiro users group) strongly believe in differences. Programming\nlanguages and technologies are not religions. Why do we have to compete\nagainst each other when we can take advantage of diversity by sharing\nour knowledge and learning to use the best tools for each job? By\npromoting this thinking we are gathering people from many different open\nsource communities.\n\nThat's our main recipe for the success of initiatives like Coding Dojo\nRio, PythOnCampus, Dev in Rio, #horaextra and many other social meetings\nwhere we have gathered some of the smartest people in Rio's software\ndevelopment community.\n\nWith this philosophy, Rio de Janeiro communities are growing and\nstarting to jell - they are becoming so strongly knit that the whole is\ngreater than the sum of the parts.\n\nIn this talk, we would like to share not only our \"methods\" and\n\"formulas\", but the values and experiences that are leading us to build\na strong and active community while having lots of fun.\n"}, {"title": "The Mighty Dictionary (#55)", "description": "The Mighty Dictionary\n\nPresented by Brandon Craig Rhodes\n\nBoth newcomers and experienced developers alike love Python's built-in\ndata types \u00e2\u20ac\u201d especially dictionaries! But how do dictionaries work?\nWhat do they do better than other container types, and where, on the\nother hand, are their weaknesses? Using simple, vivid diagrams that show\nthe secrets of how the dictionary is implemented, and a series of\nprogressively interesting examples of its behavior, we will train the\nPython developer's mind to picture what the dictionary is doing in just\nenough detail to make good decisions, as your data sets get larger,\nabout when to use dictionaries and when other data structures might be\nmore appropriate.\n"}, {"title": "The Ring of Python (#189)", "description": "The Ring of Python\n\nPresented by holger krekel (merlinux gmbh)\n\nCPython 2.5/2.6/3.1, Jython, IronPython, PyPy, StacklessPython,\nUnladenSwallow, Cython ... what do we make of all these cool interpreter\nprojects and versions? Where does competition help and where does it\nhamper?\n\nIn this interactive talk I'll highlight the main strengths of each of\nthe Python interpreters. Furthermore, I'll discuss ways to leverage\nPython interpreters in a co-operative way, discuss challenges, projects\nand issues ahead and also briefly highlight 'execnet', one my own\nprojects for bridging (Any) Python to (Any) Python. This is also the\nfirst time i am going to try out a new and funvisual presentation\ntechnique after several years of having done mostly text-based ones\n"}, {"title": "VisTrails: A Python-Based Scientific Workflow and Provenance System (#172)", "description": "VisTrails: A Python-Based Scientific Workflow and Provenance System\n\nPresented by David Koop (University of Utah and VisTrails, Inc.)\n\nIn this talk, we will give an overview of VisTrails\n(`http://www.vistrails.org <http://www.vistrails.org/>`__), a\npython-based open- source scientific workflow that transparently\ncaptures provenance (i.e., lineage) of both data products and the\nprocesses used to derive these products. We will show how VisTrails can\nbe used to streamline data exploration and visualization. Using real\nexamples, we will demonstrate key features of the system, including the\nability to visually create information processing pipelines that combine\nmultiple tools and Iibraries such as VTK, pylab, and matplotlib. We will\nalso show how VisTrails leverages provenance information not only to\nsupport result reproducibility, but also to simplify the creation and\nrefinement of pipelines.\n"}, {"title": "Writing Books using Python and Open Source Software (#40)", "description": "Writing Books using Python and Open Source Software\n\nPresented by Mr. wesley j. chun\n\nThese days, there are countless number of software applications and web\nservices that have been developed using free and open source software\n(FOSS). Such tools have become so flexible, powerful, and universal,\nthat it should also be possible for authors to write manuscripts using\nopen source tools like Python in the same way that applications are\ndeveloped. In this talk, we present some case studies of this\nphenomenon.\n"}, {"title": "Panel: Python VMs", "description": "Panel: Python VMs\n\nPresented by Jacob Kaplan-Moss, Brett Cannon, Maciej Fijalkowski, Frank\nWierzbicki, Dino Viehland\n\nPython is lucky enough to have a healthy ecosystem of virtual machines\n(VMs) exist. CPython, Jython, IronPython, and PyPy are all used\nextensively by people in real-world situations. This panel brings\ntogether a representative from each of the major VMs to discuss where\nthey are now, going in the future, and to answer questions from the\ncommunity.\n\nAbstract\n\nAll four major Python VMs will be represented:\n\n-  `CPython <http://python.org/>`__: Brett Cannon\n-  `Jython <http://www.jython.org/>`__: Frank Wierzbicki\n-  `IronPython <http://ironpython.net/>`__: Dino Viehland\n-  `PyPy <http://pypy.org/>`__: Maciej Fijalkowski Moderation will be\n   handled by Jacob Kaplan-Moss of Django.\n\n"}, {"title": "\"Dude, Where's My RAM?\" - A deep dive into how Python uses memory", "description": "\"Dude, Where's My RAM?\" - A deep dive into how Python uses memory\n\nPresented by Dave Malcolm\n\nThis talk will give a deep dive into how CPython uses memory. I'll be\ndemonstrating a new tool I've written that analyses CPython's memory\nusage, and offer hints and tips on how you can reduce the memory\nfootprint of your Python programs.\n\nAbstract\n\nIs your Python program using too much memory? This talk will give a deep\ndive into how CPython uses memory - starting from objects in your Python\ncode, down through the various implementations layers, eventually\nreaching actual hardware.\n\nIn particular, I'll be demonstrating a new tool I've written that can\ntrack CPython's memory usage down to the level of individual bytes, and\noffer hints and tips on how you can reduce the memory footprint of your\nPython programs.\n"}, {"title": "Advanced Network Architectures With ZeroMQ", "description": "Advanced Network Architectures With ZeroMQ\n\nPresented by Zed A. Shaw\n\nIn this talk I will demonstrate how to use ZeroMQ with Python (and\nothers) to do really advanced or even weird network architectures.\nYou'll see Python talk to other languages, handle HTTP, JSON, XML,\nWebSockets, encode videos, chat messaging, etc. All in a short talk with\nonly code, no diagrams. You should know ZeroMQ already.\n\nAbstract\n\nThis talk will demonstrate a series of progressively difficult problems\nthat you can solve with ZeroMQ:\n\n1. Basic messaging types (request/response, publish/subscribe).\n2. Mongrel2 and HTTP processing.\n3. Coroutine based web frameworks and why they suck (so quit making\n   them).\n4. Distributed worker queues of various flavors.\n5. Asynchronous chat protocols with JSON and XML.\n6. Clusters of calculators considering and communicating.\n7. Talking to other languages and easily ditching Python if you need.\n8. Anything else I can think up and do in a single screen of Python.\n\nThis talk will assume you know ZeroMQ and Python, but if you don't know\nZeroMQ you can probably still keep up.\n"}, {"title": "Algorithmic Generation of OpenGL Geometry", "description": "Algorithmic Generation of OpenGL Geometry\n\nPresented by Jonathan Hartley\n\nStarting from a basic 'hello world' OpenGL app, a simple and Pythonic\nmodel of 3D polyhedra is presented, with neat generators to convert\nthese into ctype arrays for OpenGL. Geometric algorithms then generate\nsome fun geometry, and these are compounded to produce successively more\ncomplex and interesting shapes.\n\nAbstract\n\nThe author's intent is to demonstrate that effective stylistic 3D\ngraphics can be achieved using surprisingly small amounts of code. This\nhopefully makes the topic amenable to 3D beginners, while possibly\nsuggesting some alternative approaches to those with 3D experience.\n\nTalk Outline\n\nThroughout, discussion of ideas and code dissection alternates with live\nanimated demos, at 60fps on very modest hardware.\n\n1.  Inspirations - Effective non-photo-realistic work in gaming, movies\n    and the demo scene. (1m)\n2.  A convenient & Pythonic way to model 3D polyhedra, and some neat\n    generators to convert these into OpenGL arrays at runtime. (7m)\n3.  Composition of polyhedra to create more complex shapes. (3m)\n4.  The resulting performance characteristics: What works well from\n    Python, and what doesn't. (2m)\n5.  Koch tetrahedron & tetrix, aka Sierpinski tetrahedron. (1m)\n6.  Surprisingly effective 3D models created from small bitmaps. (1m)\n7.  Automatic generation of trees, mazes, complex spaces. (3m)\n8.  Algorithmic modification of existing shapes, such as bevels,\n    geometric duals, and polyhedron stellation. (2m)\n9.  Shapes that morph: Rearranging vertices on the fly (5m)\n10. Questions (5m)\n\nThe ideas demonstrated in the talk are written against OpenGL 2.1, but\nwritten in a 'mostly OpenGL 3' style, using vertex buffer objects or\nvertex arrays.\n\nThe demo code uses pyglet to create a window and handle GUI events, and\nuses PyOpenGL for the majority of OpenGL calls, since it provides a more\nfriendly and Pythonic interface. In the performance-sensitive inner\nrender loop, however, I use pyglet's slightly more bare-bones OpenGL\nbindings.\n\nHowever, the majority of the talk focuses on the manipulation of\nabstract data structures to represent geometry, which is not affected by\nthese or other OpenGL library choices.\n\nThis is a substantially improved version of the talk 'Flying High:\nHobbyist OpenGL from Python', previously presented at EuroPython 2010.\n"}, {"title": "An (biased) survey of the python web", "description": "An (biased) survey of the python web\n\nPresented by Mark Ramm\n\nI may be BDFL of one framework, but that's also why I pay attention to\nthe whole ecosystem. From the release of Plone 4, TurboGears 2, Django\n1.2 and Pylons 1 ,it's been an interesting year. And things like\nhtml5lib, an updated WSGI spec, and a contender for the next generation\nWSGI have all made things interesting. Come explore the wild and dynamic\njungle that I call \"the python web toolkit.\"\n\nAbstract\n\nThis talk will not teach people to use python to make websites. It's to\nteach people who already use python, that there are lots of different\ntools out there, and to help us all get some perspective on the python\nweb toolkit.\n\nIn 2005 Pycon had the great PyWebOff, and while this talk won't be about\nthrowing Twisted into a cage match with Zope3, or setting Flask up in a\nfight to the death against web.py, it will one again provide an attempt\nto survey the full landscape of the python web world, and to see how far\nwe've come in the last 5 years.\n\nWe've definitely come a long way. Django has brought over many converts\nto Python, google released app engine with python as the first supported\nlanguage, and there are quite a few sites in the top 100 using python to\nserve up dynamic content to hundreds of millions of users.\n\nBut it hasn't all been good either, there's more fragmentation than\never. We've also got more half finished libraries, and broken framework\nextensions, and abandoned projects littering up the landscape.\n"}, {"title": "An Introduction to Tornado", "description": "An Introduction to Tornado\n\nPresented by Gavin M. Roy\n\nTornado is an open source version of the scalable, non-blocking web\nserver and tools that power FriendFeed. It is not only a web server but\nit is a light- weight, use only what you need, web development\nframework. In this talk we will review the current state of the Tornado\nproject, review the features Tornado provides and give examples of how\nto implement asynchronous web applications in Tornado.\n\nAbstract\n\nTornado is an open source version of the scalable, non-blocking web\nserver and tools that power FriendFeed. It is not only a web server but\nit is a light- weight, use only what you need, web development\nframework. In this talk we will review the current state of the Tornado\nproject, review the features Tornado provides and give examples of how\nto implement asynchronous web applications in Tornado.\n\nTopics covered will include:\n\n-  Core Tornado concepts\n-  Building an asynchronous web application\n-  Using the Tornado template engine\n-  Database Interaction\n-  Secure cookies and Sessions\n-  Utilizing built-in OAuth Clients for Authentication\n-  Websockets\n-  State of asynchronous drivers available to Tornado\n-  A light introduction to Tornado internals\n\n"}, {"title": "An Open success for the cloud: OpenStack", "description": "An Open success for the cloud: OpenStack\n\nPresented by Andy Smith\n\nOpenStack is a collection of open source technologies written entirely\nin Python, delivering a massively scalable cloud operating system.\nOpenStack is currently developing two interrelated projects: OpenStack\nCompute and OpenStack Object Storage. OpenStack Compute is software to\nprovision and manage large groups of virtual private servers, and\nOpenStack Object Storage is software for creating redundant, scalable\nobject storage using clusters of commodity servers to store terabytes or\neven petabytes of data.\n\nThis talk will go into details about the success of OpenStack with\nPython, limitations and how overall, Python was the right technology\nchoice.\n"}, {"title": "An outsider's look at co-routines.", "description": "An outsider's look at co-routines.\n\nPresented by Peter Portante\n\nLet's take an outsiders look at coroutines, the underlying concept used\nby greenlets. First we'll define what they are conceptually, and show\nsome typical use cases. Then we'll take a look at a sampling of the\nimplementations out there to see what they are actually doing to\nimplement the concept. Finally, we'll show their pluses and minuses, and\nhighlight some features of packages that use them.\n\nAbstract\n\nTalk outline:\n\n-  Define what a coroutine is\n\n   -  Coroutine state not known to operating system\n   -  Difference between a thread or process\n   -  What state is required for tracking\n\n-  Show how coroutines are used\n\n   -  gevent example\n   -  concurrence example\n\n-  Review two implementations\n\n   -  Greenlets\n   -  Python based co-routines using generators\n\n-  Advantages/Disadvantages\n-  Differentiating features of packages that use them\n\n   -  Concurrence\n   -  Gevent\n   -  Eventlets\n\n\n"}, {"title": "API Design: Lessons Learned", "description": "Share the lessons learned from a decade of core Python development, what\nworked and what didn't. Look at the development process and thinking\nbehind some of Python's successful APIs and ones that leave something to\nbe desired. Learn general principles for designing a good API for public\nconsumption.\n\nHear the story and principles behind the design of Python's \"in\"\noperator, the development of deques, and the evolution of the set API.\n\nExamine the principles and story behind the development of the named\ntuple API. Learn about unforeseen use cases and a bug that made it to\nproduction.\n\nDiscuss the decimal module's API challenge -- adhering to a published\nstandard. Talk about the Queue module's framework style and how the API\nwas refactored.\n\nDiscuss what we've learned about naming functions and methods. Look at\nthe i-naming convention in itertools, camelcase oddities, the proposed\nItalian name for enumerate, and vaguely named methods like\nassertItemsEqual.\n\nLearn about Guido's ideas on when to add flags to method signatures.\nRecap his thoughts on the problems with the percent formatting operator.\nThen hear Raymond's advice on packaging, hierarchies, and nested name\nspaces.\n\nSee how to use documentation to mitigate API problems using examples\nfrom regular expressions, decimal, tokenize, sorting.\n"}, {"title": "API Design anti-patterns", "description": "API Design Anti-Patterns\n\nPresented by Alex Martelli\n\nDesigning interfaces so that other code can interact with ours (whether\nour code is a library, framework, application, website...) is a very\ncommon and clearly crucial activity, but fraught with dangers -- stuff\nwe all keep doing wrong time after time. This talks shows some common\ncases of API design errors encountered in the wild, with tips on how to\navoid them when you design your next API.\n\nAbstract\n\nWhenever we write code we should always be thinking about how other code\n(whether our own, or other people's) will interact with ours (an \"API\",\nin common parlance). Indeed, the most common and terrible mistake in API\ndesign is... not doing any! -- i.e., not providing any designed,\narchitected way for other code to interact with ours. That's fortunately\nless common when \"our code\" is a library or framework;-), but, alas!,\nsadly widespread when \"our code\" is an application or website -- that's\nwhy questions about screen- scraping the web and simulating keystrokes\nand mouse gestures need be so tragically frequent all over the web.\n\nOnce past the obvious hurdle of not having any API at all, there's still\nplenty of ways we can go badly wrong in the process of designing one --\nand many of those ways fall into recognizable categories, i.e.,\npatterns. Specifically, since they're frequently observed categories of\ndefective design, they're anti-patterns -- and that's what this talk is\nin fact about (as the smartest among you could tell from the title...).\n\nI'm eminently qualified to present on this subject, since, in a lifetime\nspent mostly stumbling into software (after actually qualifying to\ndesign hardware in college, but only doing that for a few years), I've\nbeen responsible for more of my shares of API design fumbles (plus, of\ncourse, just like every other programmer, I've done my share of swearing\nat the design fumbles of other API designers). And, as novelist Richard\nBach reminds us, \"You teach best what you most need to learn\"!-)\n"}, {"title": "Backup Is Hard; Let's Go Shopping", "description": "Backup Is Hard; Let's Go Shopping\n\nPresented by Gary Bernhardt\n\nWe'll fly through the most clever bits of BitBacker, an online backup\napp developed as a startup for three years and eventually abandoned.\nHighlights: a hacked-up httplib/asyncore HTTP client; a real-life,\nHATEOAS-respecting RESTful API, and an encryption scheme that can\nquickly diff a file system against the server while leaking no\ninformation \u2013 not even file timestamps.\n\nAbstract\n\nThis is the story of a solution to a huge problem: fast, secure online\nbackup. A single client generates a hundred gigabytes, millions of data\nchunks, and thousands of file system snapshots. To appreciate the\nproblem's scale, consider that a Python array holding content hashes for\n1,000,000 files consumes 100 MB of memory. File hashes are only a\nportion of the required per- file metadata, and that's only one for\nsnapshot of thousands.\n\nWe'll tour the hard parts of this system with no apology for their\ndifficulty. The httplib/asyncore hybrid monster that served millions of\nparallel requests, transparently retrying on failures and timeouts, with\nonly 300 lines of python. The RESTful API \u2013 fully respecting hypertext,\nwith every request safely repeatable, even POSTs, and not a single\nhard-coded URL in the client. The encryption scheme that leaked nothing\n\u2013 not even modification times \u2013 but could quickly diff local file\nsystems against the server. And, that one time that a client\naccidentally requested a 4.76 megabyte URL in production.\n"}, {"title": "Best Practices for Impossible Deadlines", "description": "Best Practices for Impossible Deadlines\n\nPresented by Christopher Groskopf\n\nAt the Chicago Tribune we develop, test, and deploy production web\napplications on schedules that range from two hours to two months. This\ntalk will discuss the tools and techniques that allow us to make our\ndeadlines, including automated deployments, frameworks, just-in-time\ntesting, and more. Attention will be paid to\n`http://github.com/newsapps/beeswithmachineguns <htt%20p://github.com/newsapps/beeswithmachineguns>`__\nand the problems they solve.\n\nAbstract\n\nOn my first day at the Chicago Tribune I was given a CSV of data about\ndefoliant spraying in Vietnam and told to build this: Agent Orange. What\nfollowed was one of the most stressful and difficult weeks of my life,\nduring which I learned an incredible amount about web development. I had\nto stop thinking about databases and start thinking about serialized\nJSON structures stashed on S3; stop thinking about building tools and\nstart thinking about mashing up tech that was never designed to be\nmarried (in this case Simile Timeline and Google Maps); stop thinking\nabout idealistic development practices and start thinking about getting\na working product out the door. In short: I had to rewire my brain for\nnews.\n\nThis talk will go in-depth on deadline-oriented strategies that I've\nlearned in a year of building news applications. Some of these revolve\naround specific technologies, like fabric for single-keystroke\ndeployments or Varnish for caching, but most will be matters of\npractice, like what to test when you have no time for testing or how to\navoid (yes, avoid!) database migrations.\n\nThey say Django is \"the web framework for perfectionists with\ndeadlines.\" This is their Art of War.\n\nTalk outline:\n\n-  An anecdote: Agent Orange\n-  We can't have nice things (or best practices)\n-  Low-hanging fruit: staging environment, git branches, PEP8.\n-  Only build it once: Iterations, interviews and stakeholders\n-  Salvage, share and steal [code]\n-  Keeping track: Be a ticketing warrior\n-  Tools improve faster than you do: iterate your stack\n-  Single-keystroke deployment (fabric)\n-  Migrations are hard: Building read-only apps\n-  Don't serve that: Using S3 for hosting\n-  Caching > optimization (varnish)\n-  Know your load limits (beeswithmachineguns)\n-  Configuration-as-application: application frameworks (maps, tables)\n-  Pair programming > functional testing > unit testing\n-  except UseWordpress, e: print \"No, really\"\n\nSites that will be used as examples:\n\n-  Agent Orange\n-  Burr Oak Memorial\n-  Census 2010: Cook county participation rates map\n-  Area judges and supervision rates of speeders table\n-  RedEye Homicide Tracker\n-  Chicago Tribune Elections Center\n-  2010 Illinois School Report Cards\n-  TribLocal\n\n"}, {"title": "Continuous deployment", "description": "Continuous deployment\n\nPresented by Laurens Van Houtven\n\nThis talk is about continuous deployment practices and tools, lessons\nlearned from implementing it, and putting them into perspective. The\ngoal is to give other people tips and pointers for applying these ideas\nthemselves.\n\nAbstract\n\nContinuous deployment is the practice of putting the latest revision of\nsoftware into production use all the time, as opposed to working towards\nlarger releases. The important difference is iteration time: whereas\nlarge software packages produce new software in timeframes of years or\nmonths, continuous deployment teams typically put new code into\nproduction in timeframes of hours or less.\n\nThe practice is slowly attracting a small but growing group of loyal\nfollowers, just like continuous integration over the past few years and\ntest- driven development did before that. They can be explained in terms\nof being natural extensions of each other. Like TDD and CI, CD gets eyed\nsomewhat suspiciously (and rightfully so: skeptical analysis is great),\nbut the undersigned believes there's a legitimate advantage for many\napplications.\n\nMany years ago, TTD and testing tools in general were mostly ad-hockery.\nNow, with many different production-quality testing tools, this has\nbecome unthinkable. Similarly, continuous integration was something\nother people did for a long time, but now we have tools such as Buildbot\nand Hudson. Continuous deployment is still somewhat in the early stage\nin terms of ready-to-use tools, but it's likely that we'll see a similar\nevolution.\n\nHere's a rough outline of what I plan to cover:\n\n-  a short history of people developed software\n-  from the recent models to CD (sort of a working definition of CD\n   here)\n-  when is it a good idea? pros/cons\n-  requirements & battle plan for applying CD in an existing development\n   environment (and possibly code base)\n-  an overview of existing tools and how they work together\n-  caveat emptors, known pitfalls (deployment and recovery strategies go\n   here, since most implementations figure out they need them after\n   stuff blows up)\n-  questions! (hopefully lots of people who've tried or are thinking\n   about implementing something similar -- like I said, there are a lot\n   of people implementing it but not too many ideas being bounced\n   around)\n\n"}, {"title": "CouchDB and Python in practice", "description": "CouchDB and Python in practice\n\nPresented by Luke Gotszling\n\nThis talk introduces one 'NoSQL' solution, CouchDB, and how to get it to\nplay well with Python. Topics covered:\n\n-  Introduction to CouchDB\n-  A python ORM for CouchDB\n-  Parsing CouchDB documents within python\n-  Writing view functions in python\n-  Map/reduce on CouchDB from python\n-  Lessons learned from managing and distributing a live deployment at\n   scale under high load\n\nAbstract\n\nThis is a rough draft\n\nNoSQL\n\n-  CouchDB stores schema free documents\n\nWhy CouchDB?\n\n-  Complicated mapping structures handled\n-  Revision history\n-  Maps nicely to Python objects\n-  HTTP protocol\n\nPython ORM\n\n-  couchdb-python\n-  Mapping structures\n-  demo\n\nView functions\n\n-  write in Erlang, Javascript, Python?\n-  demo\n\nScaling\n\n-  Distributed map/reduce\n-  BigCouch\n-  Read/write quorum\n\n"}, {"title": "Dependency management with Puppet", "description": "Dependency management with Puppet\n\nPresented by Richard Crowley\n\nPuppet is a configuration management tool that we'll learn to use the\neasy way. We'll introduce the Puppet language and the concept of\nresources like packages, files, shell commands, and more. We'll use\nPuppet to build our dev environment and deploy it to production servers.\n\nAbstract\n\nWe've all been there: religiously following the steps in some blog post\nfor the 47th time trying to setup a shiny new server. We thought we'd\nimproved the situation when we copied our Bash history into doit.sh and\ncommitted it. Then along came Pip and requirements.txt files.\n\nThat's where most of us are today. Pip can only manage Python packages\nso much of our servers' behavior is left to Lady Luck. Puppet gives us\nthe power to efficiently and confidently specify everything our program\nneeds.\n\nWe'll start at square one and the concept of resources, the basic unit\nof configuration management. We'll learn the Puppet language's resource\nsyntax. We'll talk about obvious resource types like packages and files\nplus less obvious types like shell commands, users, groups, and daemons.\nWe'll compose resources into larger ones, declare dependencies between\nresources, and accommodate differences between OS X and Linux.\n\nThese Puppet manifests can satisfy our program's dependencies on demand,\nmaking them ideal parts of the deploy process. We'll walk through how\nPuppet is used to build production environments both through tools such\nas Fabric and Puppet's traditional client-server mode.\n\nDependency hell doesn't have to be your reality. Consistent, reliable\nenvironments can be had with Puppet.\n"}, {"title": "Deploying Applications with zc.buildout", "description": "Deploying Applications with zc.buildout\n\nPresented by JIm Fulton\n\nThis talk described using zc.buildout for application deployment to\nproduction environments. It presents building self-contained source\nreleases, and using these to create RPM distributions. It shows how to\nuse buildout to configure services, including web servers, cron jobs,\nmonitoring and so on. Finally, it presents ongoing efforts to deploy\napplications that span many machines.\n\nAbstract\n\nWe build and deploy large Python applications for our customers. These\napplications are built from many component parts including Python\npackages and non-python applications and tools. Assembling these pieces\ncan be a tedious and error-prone process. The zc.buildout (Buildout)\npackage was developed to automate this process.\n\nAs our use of buildout has matured, we've integrated it with system\npackaging tools and developed techniques for managing software\ndeployemnt and service configuration. I'll provide a detailed\ndescription of the techniques and tools used.\n\nOutline:\n\n-  Buildout\n\n   -  Motivation\n   -  History\n   -  Configuration files\n   -  Recipes\n\n-  Deployment pholisophy: keeping software and service configuration\n   separate\n-  System Packaging\n\n   -  Making self-contained source releases (tar balls)\n   -  Creating system packages from source releases with RPM\n\n-  Service configuration -- system build outs\n\n   -  Scope: Python processes, cron, log rotation, run scripts,\n      monitoring, etc.\n   -  Place files in \"standard\" locations.\n   -  Run by root\n   -  examples\n\n-  Meta recipes\n\n   -  Goal: provide only essential information.\n   -  Recipes provide basic level of abstraction.\n   -  Buildout provides basic tools to build on these abstractions, but\n      these tools only scale so far.\n   -  Buildout configuration language is *not* a programming language.\n   -  Meta-recipes provide a much more powerful way to build high-level\n      abstractions over basic recipes.\n\n-  Next step: Make me a ...\n\n   -  Model based definition of complete systems spanning multiple hosts\n      with interlocking services\n   -  Automatic management of resources\n   -  Implemented with ssh, system packaging tools (e.g. yum) and\n      buildout-based tools.\n   -  Four levels of abstraction\n   -  Current status\n\n\n"}, {"title": "Disqus: Serving 400 million people with Python", "description": "Disqus: Serving 400 million people with Python\n\nPresented by David Cramer and Jason Yan\n\nDisqus, one of the largest Python applications on the web, will explain\nhow they deal with scaling complexities in a growing startup. Founded in\n2007, Disqus maintains a small engineering team reaching over 400\nmillion users a month. Being powered by Python has allowed quick\niteration of the application, without sacrificing code quality and\nperformance. The talk will cover key parts of the architecture and\ndevelopment process at Disqus, including hardware, databases, and common\nbottlenecks.\n"}, {"title": "Distributed Tasks with Celery", "description": "Distributed Tasks with Celery\n\nPresented by Ryan Petrello\n\nCelery is an open source task queueing system based on distributed\nmessage passing, especially using the AMQP protocol. This talk will\nfocus on the need for task distribution, the tools celery provides to\nmeet those needs, and an in-depth discussion of how we've used celery at\nShootQ to improve the efficiency and reliability of our background\nprocesses.\n\nAbstract\n\nThe talk (including time for questions) will last approximately 30\nminutes and will focus on the following topics:\n\n-  The need for distributed tasks in real world systems, especially in a\n   web application environment. This portion of the talk will describe\n   examples where the traditional request-response model of the web can\n   be improved with background processing.\n-  A brief overview of traditional distributed message passing models\n   and the AMPQ protocol.\n-  An overview of Celery and the variety of tools it provides for task\n   distribution, scheduling, and execution. This portion of the talk\n   will also review production-oriented components of Celery, such as\n   monitoring, error detection/reporting, and error recovery.\n-  Real world discussion of several problems we solved at ShootQ using\n   Celery including before-and-after looks at our implementations.\n-  Common pitfalls and gotchas we encountered while working with Celery.\n\n"}, {"title": "Diversity in Tech: Improving our Toolset", "description": "Diversity in Tech: Improving our Toolset\n\nPresented by Jennifer Leech\n\nAs communities allow more diversity, they draw from a larger talent\npool, challenge each other more, and hit a higher bar in terms of\ningenuity and work-product. However questions surrounding diversity\noften seem under- examined. What are the effects of diversity in the\ncommunity, or lack thereof? I intend to approach this topic from an\naccessible and entertaining, yet analytical perspective.\n\nAbstract\n\nLast year there was a photo of Kate Moss shown during a PyCon\npresentation which raised debate as to its appropriateness. This debate\nbrought up some interesting questions - but what I found most\ninteresting was that while it elicited strong opinions, the issue seemed\nto be somewhat unexamined. This event sparked a desire for deeper\nanalysis on this topic in a more focussed setting.\n\nIn this talk, I intend to address some of the core principles underlying\nthis debate. Discussion will include the following questions: Where does\nresponsibility lie in understanding these issues? What are the effects\nof failing to do so? What are the effects of diversity in the community,\nor lack thereof? What do we lose by being more homogenous or more\ndiverse? Gain?\n\nAs communities allow more diversity, they draw from a larger talent\npool, challenge each other more, and hit a higher bar in terms of\ningenuity and work-product. However, diversity requires awareness and\ntolerance on both the part of the dominant culture and on the part of\nthe new arrivals to smooth the inevitable rough edges.\n\nI intend to approach this topic from an accessible, inclusive and\nentertaining, yet analytical perspective. The broader intent is to raise\nthe level of understanding and community discourse on this topic. It is\nodd that diversity can so dramatically affect our lives and communities\nand yet be unexamined, particularly in a community so highly intelligent\nand educated as that which populates the tech industry.\n"}, {"title": "Django: Pitfalls I Encountered and How to Avoid Them", "description": "Django: Pitfalls I Encountered and How to Avoid Them\n\nPresented by Luke Sneeringer\n\nAre you starting a moderate to large sized Django project? Do you need\nto plan ahead and build an application that will react to unanticipated\nneeds? This talk covers some techniques and pitfalls I encountered in\nwriting my first reasonably large Django site, and what I did\ndifferently the second time I started a project.\n\nAbstract\n--------\n\nWhen working on a company product, especially one where developers don't\nalways have full control over the scope and needs of the application,\nit's important to plan ahead for unanticipated needs.\n\nThis talk will cover simple tricks and methods that are a small amount\nof work up front, but can save you lots of time later.\n\nPyCon Talk Outline\n------------------\n\n#. Introduction (5m)\n\n   -  Me!\n\n#. Making Mistakes\n\n   -  It happens. \"Code quality can be measured by the number of WTFs\n      per minute in the code review.\"\n   -  When dealing with a big, expansive framework like Django,\n      sometimes you just don't know that something is there. Good docs\n      don't completely solve this...there's always going to be the thing\n      you don't find. Similarly, sometimes you don't realize how to\n      leverage something that you do know about until much later.\n\n      My regrets with my current project aren't sweeping architectural issues. I did most of the big stuff right. My regrets are mostly small things that, because it was my first big project, there was this piece or that piece that I didn't see or didn't fully appreciate, and so now I have little blocks of code that are tougher to maintain than they need to be. End of the world? No. Worth thinking through for next time? Yes.\n\n#. Some trivial things (10m)\n\n   -  Preface: Yeah, some of these are dumb.\n   -  Beginning at the beginning: Project Setup\n\n      -  I had sys.path pointing to the directory above the project root, like the tutorial does. I wish I hadn't done that.\n      -  Need to run two instances on the same box that don't share the actual codebase (e.g. a staging server)? You still can, but it's more awkward. Better to set sys.path at your project root.\n   -  Dude, where's my Media class?\n\n      -  How did I do it? First I had a magic template variable. Then I\n          copied Form.Media\n      -  Then, on a later project, I realized a block works just fine.\n   -  My boss wants \\_\\_\\_\\_ available on every page!\n   \n      -  How did I do it? I had a method we called everywhere that took\n         arbitrary keyword arguments...\n      -  Oh, there's TEMPLATE\\_CONTEXT\\_PROCESSORS...\n\n         -  ...if you manually use RequestContext every time! So, just do\n            that. Always. Even if you don't need it.\n         -  I want .select\\_related('something') every time!\n         -  ...so I typed it! A lot.\n         -  Oh, that can be done by overriding def queryset on the manager\n            class? That's easier to maintain...\n            \n            -  ...but make sure you set the flag to use it on related fields!\n   -  We need sample data for so-and-so, such-and-such...\n   \n      -  Disclaimer: This one actually isn't mine; my boss did it. But,\n         it's amusing, and worth mentioning.\n      -  We needed sample data so my boss could preview themes...so he set\n         up a second database, put in fake data, and hard-coded it in the\n         app-wide (not server-specific) settings.py.\n\n         -  Copied the entire DB structure...at the time. But it changes.\n         -  Oh, and the unit testing framework didn't appreciate it,\n            either.\n\n      -  Fixtures are the right way (and sooner or later I'll get this\n         fixed...it's still there).\n    \n         -  (space reserved for my stumbling upon something else silly, and\n            hopefully humorous, that I did wrong)\n\n   - How to avoid missing trivial things?\n    \n      -  Read the documentation. Over and over.\n      -  Become familiar with the Django code.\n    \n#. A non-trivial thing: Forms (10m)\n\n   -  Django forms can do anything...given sufficient shenanigans.\n      Always do it the Django forms way; your life will be easier.\n   -  Forms and ModelForms are static, and I needed dynamic choices on a\n      form...\n\n      -  ...so I just ditched newforms\n      -  But wait, this is Python. A trivial function that calls the\n         metaclass can solve this problem!\n    \n         -  This looks complicated, but it's not. Walk through how to do\n            it.\n         -  It's quite maintainable, and you get all the other bells and\n            whistles.\n   -\n\n#. Questions? (5m)\n\n"}, {"title": "Django Packages: A Case Study", "description": "Django Packages: A Case Study\n\nDaniel Greenfeld\n\nDjango Packages is the place to review Django apps, frameworks, and\nprojects. This talk is for everyone, including non-Django users, and\ncovers everything from architecture, API development, to interacting\nwith PyPI, Github, Bitbucket, etc. It will include tools, lessons\nlearned, and projects that fork the code to save the world and will\nfinish with an overview of the forthcoming pypackages.com.\n\nAbstract\n\nSince launch Django Packages has become the place to find and compare\napps, frameworks and projects produced by the Django Community. Through\nthe use of public APIs, Django Packages constantly fetches hard data\nfrom PyPI, Github, and Bitbucket, aproviding a powerful mash-up of\nreal-world data on the volume of usage of a particular package. At a\nglance you can see which package is the most downloaded, which is the\nmost used, and which has seen ongoing development.\n\nThe project is open sourced on Github, with all non-user data accessible\navailable via the API. Django Packages was conceived and and launched in\nthe 2010 Django Dash. Since launch it has seen features added\nincrementally and was a frequently mentioned project at the 2010\nDjangoCon and was #1 on Hacker News on Sunday, December 5, 2010. It's\npurpose is to provide a place for Django Developers to submit, research,\nand review apps, projects, and frameworks.\n\nThe talk will cover:\n\n-  Launching the project\n\n   -  The pre-Django Packages state of finding Django apps\n   -  Grids, not tags\n   -  Only hard metrics allowed, no opinions or rating systems!\n   -  Slurping content from PyPI, Github, Bitbucket, Launchpad,\n      SourceForge, and Google Project Hosting\n   -  Lessons Learned AKA The Zen of Python and PEP-8\n   -  Deployment and backups\n\n-  The Month after launch\n\n   -  New feature considerations\n   -  Handing over the keys to reduce bus factor\n   -  Excitement when seeing it being used as a reference\n\n-  DjangoCon\n\n   -  Sprint tactics for your pet project\n   -  Development of an API\n   -  Github, Google Project Hosting, and PyPI\n\n-  Going forward\n\n   -  Planned new features for Django Packages\n   -  Forking Django Packages to save the world\n   -  pypackages.com - a forthcoming place to review Python\n      applications, frameworks, and packages\n\n\n"}, {"title": "Documentation Driven Development", "description": "Documentation Driven Development\n\nPresented by Corey Oordt\n\nDevelopers usually leave documentation as a final step; one that they\nwill get to as soon as they are forced with threats of bodily harm.\nWriting the documentation before writing the code, can lead to better\ncode, better implementation and, of course, actual documentation.\n\nAbstract\n\n\"Documentation Driven Design\" was coined by our team after noticing how\ndocumenting code dramatically changed how we approached problems. By\nwriting the documentation first, you saw the problem from a different\nperspective: the end user or programmer. This talk will focus on a few\nitems:\n\nUsable, not just functional. Many times developers write code that\nsolves the problem, but is a real pain in the neck to use. Writing the\ndocumentation first demonstrates how easy or difficult it is to\nimplement the solution right away.\n\nA guide to what to write. Many developers leave documentation undone\nbecause they don't know how to approach it. Having some idea of what\nneeds writing can make the task seem less daunting.\n"}, {"title": "Everything You Wanted To Know About Pickling, But Were Afraid To Ask!", "description": "Everything You Wanted To Know About Pickling, But Were Afraid To Ask!\n\nPresented by Richard T. Saunders\n\nSerializing data structures (in Python-speak \"pickling\") to save to\ndisk/socket is an important tool for the programmer: We will discuss how\nthe pickling protocols (0,1,2, and 3) work as well as real-world issues\n(gotchas, backwards-compatibility, etc). We will concentrate on the\nbasics of this stack-based protocol: what it looks like, how to\nencode/decode, speeds of different implementations.\n\nAbstract\n\nThe Pickling Protocols are a fundamental tool for saving state.\n\nWe will discuss the differences between text serialization and Python\npickling (as well as marshalling, and simple bit-blitting).\n\nWe will spend a little time discussing history: why there is a cPickle\nand pickle module in 2.x and only pickle in 3.x., and why there are 4\ndifferent protocols: 0,1,2 and 3.\n\nWe will then dive right in and look at how the stack-based protocol\nworks. We will concentrate on the basics (the stack-based machine), as\nall the protocols adhere to this basic model, but tend to discuss the\nmore recent protocols and their differences. We will also discuss how\nthe memoization scheme works.\n\nWe will show some simple examples and then build to more complex\nexamples.\n\nWe will also discuss the relative speeds: the different protocols (text,\n0,1,2,3) and the different implementations (Python, Boost,\nPicklingTools, IronPython?, PyPy? Unladen Swallow?).\n\nWe will end with some real-world advice and some gotchas to watch out\nfor (32-bit vs. 64-bit, different versions of Python serialize\ndifferently, etc.).\n"}, {"title": "Exhibition of Atrocity", "description": "Exhibition of Atrocity\n\nPresented by Mike Pirnat\n\nBelieve it or not, but you can write pretty horrendously awful code even\nin a language as elegant as Python. Over the years, I've committed my\nshare of sins; now it's time to come clean. Step right up for a tour of\ntwisted, evil, and downright wrong code, and learn some strategies to\navoid writing criminally bad code--if you dare!\n\nAbstract\n\nWhat does it look like when good intentions go horribly wrong? This talk\nwill take a tour through pathological code from my past (as well as some\ncontributions from friends, coworkers, and the community), featuring\nsuch terrors as:\n\n-  Lies, Damn Lies, and Hungarian Notation\n-  Crimes Against PEP-8\n-  The Diaper Pattern\n-  The Beast With a Thousand Elifs\n-  The Mile-Long Club\n-  God Objects and God Methods\n-  The Malignant Menace of Mutable Keyword Arguments\n-  The Seductive Lure of Global State\n-  Slower Applications Through DTO Bondage\n-  A Twisty Maze of Single-Character Variables, All Alike\n-  Lambdas, Lambdas Everywhere\n-  The List Comprehension That Ate Cincinnati\n-  Adventures in Wheel Reinvention\n-  New and Creative Ways to Break the Build\n\n...as well as others as time permits.\n"}, {"title": "Extreme Network Programming with Python and Linux", "description": "Extreme Network Programming with Python and Linux\n\nPresented by Rob Ludwick\n\nTraditionally, C is the preferred language for low level network\nprogramming and works well for those who have the time and patience to\nwork with it. As it turns out, Python is very capable for prototyping\nlow level network code, collecting data, and testing ideas quickly\nwithout getting lost in the land of C.\n\nAbstract\n\nWhile not as robust as C, Python provides a simple and elegant solution\nfor many cases to either prove a theory or gather data before developing\na more robust solution. Obscure topics such as raw sockets, multicast,\nnetwork bridging, rolling your own vpn, and disruption tolerant\nnetworking will be covered. Use of Python can enable building a custom\nprotocols, debugging a network, fixing broken nets, custom logging and\nprocessing, and simulation of networks. The author will talk about his\nexperiences using Python on Linux for extreme network programming and\npossibilities for future efforts.\n"}, {"title": "Firefox Sync", "description": "Firefox Sync\n\nPresented by Tarek Ziad\u00e9\n\nFirefox Sync let you access your history, passwords, bookmarks and even\nopen tabs across all your devices, while remaining unreadable on the\nserver through encryption. After a brief introduction on the Sync\nprotocol, this talk will focus on the server, which is written in\nPython.\n\nAbstract\n\nThe talk will briefly explain how Syncing works then will focus on the\nServer architecture and code. You will discover through this talk how\nthe server was built and what technologies it uses.\n\n1. Firefox Sync in numbers\n2. How synchronisation happens - the big picture\n\n   1. Desktop\n   2. iPhone (Firefox Home)\n\n3. How encryption works\n4. Overview of the APIs\n\n   1. Sync 1.1\n   2. User 1.0\n\n5. Server architecture\n\n   1. User & Data storage\n   2. Web Services\n   3. Libraries used\n\n6. Scaling and benchmarking\n\n   1. Grinder\n   2. Funkload\n\n7. Run your own server !\n8. What's Next\n\n"}, {"title": "Friday Afternoon Lightning Talks", "description": "Friday afternoon lightning talks\n\n-  00:00 Paul Smith - Raising money for Japan\n-  02:24 Jeff Daily - The Global Arrays Parallel Programming Toolkit\n-  08:30 Matt Harrison - My insecurity problem\n-  13:10 Pete Fein - Hacking for Freedom\n-  18:40 Robert Brewer - logging.statistics\n-  27:30 Nathan Nichols - Lessons Learned Writing DSLs for Automated\n   Content Generation\n-  33:15 Giles Thomas - Why Resolver switched from IronPython to CPython\n   japan, qtile, pyparsing, logging.statistics, resolver, cpython,\n   ironpython\n\n"}, {"title": "Fun with Python's Newer Tools", "description": "Look at how a Counter is implemented. See a simple word count example.\nUse a counter for unittests. Implement a sparse matrix.\n\nShow how named tuples are created, combined, subclassed, and extended.\nSee how to implement an Enum class and how to create default values.\n\nLearn the basics of the new string formatting syntax. See how to use it\nfor templating.\n\nShow everyday uses for an LRU cache, look at the underlying\nimplementation, and see how to use it to trivially solve a dynamic\nprogramming problem.\n"}, {"title": "Genetic Programming in Python", "description": "Genetic Programming in Python\n\nPresented by Eric Floehr\n\nDid you know you can create and evolve programs that find solutions to\nproblems? This talk walks through how to use Genetic Algorithms and\nGenetic Programming as tools to discover solutions to hard problems,\nwhen to use GA/GP, setting up the GA/GP environment, and interpreting\nthe results. Using `pyevolve <http://pyevolve.sourceforge.net/>`__,\nwe'll walk through a real-world implementation creating a GP that\npredicts the weather.\n\nAbstract\n\nGenetic Algorithms (GA) and Genetic Programming (GP) are methods used to\nsearch for and optimize solutions in large solution spaces. GA/GP use\nconcepts borrowed from natural evolution, such as mutation, cross-over,\nselection, population, and fitness to generate solutions to problems. If\ndone well, these solutions will become better as the GA/GP runs.\n\nGA/GP has been used in problem domains as diverse as scheduling,\ndatabase index optimization, circuit board layout, mirror and lens\ndesign, game strategies, and robotic walking and swimming. They can also\nbe a lot of fun, and have been used to evolve aesthetically pleasing\nartwork, melodies, and approximating pictures or paintings using\npolygons.\n\nGA/GP is fun to play with because often-times an unexpected solution\nwill be created that will give new insight or knowledge. It might also\npresent a novel solution to a problem, one that a human may never\ngenerate. Solutions may also be inscrutable, and determining why a\nsolution works is interesting in itself.\n"}, {"title": "Get new contributors (and diversity) through outreach", "description": "Get new contributors (and diversity) through outreach\n\nPresented by Asheesh Laroia\n\nGroups like the Fedora Design Team, Dreamwidth, SF Ruby, and OpenHatch\nhave discovered the power of outreach to bring in new contributors. In\nthe past year, SF Ruby grew in numbers as well as in diversity, moving\nfrom 3% women to 18% women. Because most projects need ongoing help,\nthis talk discusses effective strategies for bringing in contributors\nwho stick around for the long haul.\n\nAbstract\n\nThis talk is targeted at anyone involved in an open source project who\nwants to find more contributors.\n\nPrograms like Google Summer of Code often provide excited students who\ndisappear after a summer's work. Meanwhile, request for help emails on\ndevelopment lists are typically met with silence. Hackathons create a\nflurry of commits, but then we never hear from the participants again.\nExpanding your team is possible, and it requires care in terms of\noutreach, expectation management, and mentorship.\n\nWe will discuss three major forms of outreach:\n\n-  One-on-one check-ins with participants,\n-  Periodic drives to bring in new contributors, and\n-  In-person teaching events. Each one has \"do\"s and \"don't\"s associated\n   with it. This talk digests the experience of effective outreach into\n   practical strategies that you can re-use within your project.\n\n"}, {"title": "Getting the job: the do's and don'ts of landing a Python job", "description": "Getting the job: the do's and don'ts of landing a Python job\n\nPresented by Brian Moloney\n\nEvery Python programmer is brilliant in his or her own way. That\nbrilliance shines in code and peer-to-peer conversation. But how do you\ndisplay your skills to a non-programmer? How do you impress management\nand human resources? What do you need to do (and not do) to successfully\nnavigate the hiring process and land the job?\n\nAbstract\n\nImaginary Landscape has been interviewing, hiring and not hiring Python\ntalent since 1999. Throughout these many years, there have been good\ncandidates, bad candidates and downright ugly candidates. This talk will\nuse actual correspondence and examples to demonstrate what can separate\nyou from the crowd and what can separate you from consideration.\nImaginary Landscape non- technical Managing Partner Brian Moloney will\nlead the session by describing how he evaluates potential hires and what\ngoes through his mind while speaking with potential Python candidates.\nAttendees will take away a specific set of guidelines for mastering the\nnon-technical aspects of the recruiting process.\n\n[VIDEO HAS ISSUES: There are problems with the audio for the first 5\nminutes.]\n"}, {"title": "Going Full Python - Threadless", "description": "Going Full Python -- Threadless\n\nPresented by Chris McAvoy\n\nThreadless is a 10 year old community based design company with an\noverpowering love of witty t-shirts and a mission to 'inspire\nawesomeness.' After 10 years of working primarily with PHP, Threadless\nhas decided to use Python as our base development language. The decision\nwas 10% technical and 90% touchy feely. We know what a powerful\ncommunity can do to a product, and see the same sort of drive and\npassion in the Python community that we see in our own design community.\nPython is the peanut butter to our jelly. We're excited to share our\njelly with you. Chris McAvoy, VP of Technology at Threadless (and the\nfounder of the Chicago Python Users Group), will share a bit about the\ncompanies history, the role of technology in supporting the community at\nthe core of the business, and why Python and Threadless are going to be\ntotally BFF's.\n"}, {"title": "Greasing the Wheels of Exploration with Python", "description": "The Mars Exploration Rovers (MER), Spirit and Opportunity, have been\nroaming the surface of Mars since January of 2004 leading to many\ndiscoveries about the nature and history of our sister planet. Each\nactivity requires a complex set of coordinated activites by a team.\nEarly in the MER mission the author automated much of the task of one of\nthe positions, the Payload Uplink Lead, for 7 of the 9 cameras on each\nrover. The system, called AutoPUL, is written in Python and that has\nproven to be the excellent choice for the development and maintenance.\nIn the talk I'll describe the Mars Rover mission and the operational\nactivities and how AutoPUL and Python fullfilled those needs.\n"}, {"title": "Handling ridiculous amounts of data with probabilistic data structures", "description": "Handling ridiculous amounts of data with probabilistic data structures\n\nPresented by C. Titus Brown\n\nPart of my job as a scientist involves playing with rather large amounts\nof data (200 gb+). In doing so we stumbled across some neat CS\ntechniques that scale well, and are easy to understand and trivial to\nimplement. These techniques allow us to make some or many types of data\nanalysis map-reducable. I'll talk about interesting implementation\ndetails, fun science, and neat computer science.\n\nAbstract\n\nIf an extreme talk, I will talk about interesting details/issues in:\n\n1. Python as the backbone for a non-SciPy scientific software package:\n   using Python as a frontend to C++ code, esp for parallelization and\n   testing purposes.\n2. Implementing probabilistic data structures with one-sided error as\n   pre-filters for data retrieval and analysis, in ways that are\n   generally useful.\n3. Efficiently breaking down certain types of sparse graph problems\n   using these probabilistic data structures, so that large graphs can\n   be analyzed straightforwardly. This will be applied to plagiarism\n   detection and/or duplicate code detection.\n\n"}, {"title": "Hidden Treasures in the Standard Library", "description": "Hidden Treasures in the Standard Library\n\nPresented by Doug Hellmann\n\nThis presentation covers features of the standard library not widely\nknown or used. Each feature is presented with a short demonstration\nprogram and explanation.\n\nAbstract\n\nThe standard library contains many hidden gems that are not widely used,\neither because they are not publicized enough or because they are deep\nin a module that programmers haven't had cause to study or use. This\npresentation covers 8-10 selected topics of this nature in about 25\nminutes (leaving time for a couple of questions). Demonstration code is\nincluded for every item.\n\nPossible tips include, in no particular order:\n\n-  Using hmac to verify pickled data before unpacking it.\n-  Using uuid4 to generate session tokens.\n-  Regular expression look-ahead/behind matches.\n-  pdb startup files\n-  Reading files with mmap\n-  Using csv dialects\n-  The robotparser module\n-  The rlcompleter module\n-  Using locale to format numbers and currency\n-  The cgitb module\n-  pkgutil.getdata\n-  contextlib.contextmanager\n-  The cmd module\n-  The fileinput module\n\n"}, {"title": "Hookbox: All Python web-frameworks, now real-time. Batteries Included.", "description": "Hookbox: All Python web-frameworks, now real-time. Batteries Included.\n\nPresented by Michael Carter\n\nLearn how to supercharge your python web applications (Django, Pylons,\nTG, GAE, Werkzeug, WSGI, etc) with real-time features! Presenceful and\nmoderated chat? About 10 minutes, seriously. A real-time graph to\nmonitor the CPU? Less than five. If you pay attention for at least half\nof this talk, you'll leave confident and ready to take advantage of\nWebSocket, Comet, and the world, thanks to Hookbox.\n\nAbstract\n\nHookbox (`http://hookbox.org <http://hookbox.org/>`__) is a Python and\nEventlet- based Comet-server/message-queue which tightly integrates with\nexisting web application infrastructure via web hooks and a REST\ninterface; Hookbox\u2019s purpose is to ease the development of real-time web\napplications, with an emphasis on tight integration with existing web\ntechnology. Put simply, Hookbox is a web-enabled message queue.\n\nBrowers may directly connect to Hookbox, subscribe to named channels,\nand publish and receive messages on those channels in real-time. An\nexternal application (typically the web application itself) may also\npublish messages to channels by means of the Hookbox REST interface. All\nauthentication and authorization is performed by an external web\napplication via designated \u201cwebhook\u201d callbacks.\n\nIn this talk we cover the broad principles of Hookbox, then examine a\nfew short examples in depth, including presenceful and moderated chat,\nreal-time graphing, and, of course, a game. The code examples are very\npurposefully brief; the important parts of the talk deal with the\ninteraction model between browser, web framework, and Hookbox --\neverything else follows naturally and easily into place.\n\nThe audience need not be familiar with a particular web framework over\nanother, but they must be proficient with at least one.\n\nThough this talk is aimed at a novice level, we'll also spend some time\ntalking about the more advanced features that Hookbox provides.\n"}, {"title": "How to kill a patent with Python", "description": "How to kill a patent with Python\n\nPresented by Van Lindberg\n\nFinding the right piece of \"prior art\" - technical documentation that\ndescribed a patented piece of technology before the patent was filed -\nis like finding a needle in a very big haystack. This session will talk\nabout how I am making that process faster and more accurate through the\nuse of natural language processing, graph theory, machine learning, and\nlots of Python.\n\nAbstract\n\nFrom my work consulting on a number of patent cases, I am frequently\nasked to find \"prior art\" - patents and publications that describe a\ntechnology before a certain date. The problem is that the indexing\nmechanisms for patents and publications are not as good as they could\nbe, making good prior art searching more of an art than a science. When\nI decided to do better, I reached for Python.\n\n-  Part I (5 mins): The USPTO as a data source.\\* The full-text of each\n   patent is available from the USPTO (and now from Google.) What does\n   this data look like? How can it be harvested and normalized to create\n   data structures that we can work with?\n-  Part II (15 mins, in two parts):\\* Once the patents have been cleaned\n   and normalized, they can be turned into data structures that we can\n   use to evaluate their relationship to other documents. This is done\n   in two ways - by modeling each patent as a document vector and a\n   graph node.\n-  Part IIA (7 mins): Patents as document vectors.\\* Once we have a\n   patent as a data structure, we can treat the patent as a vector in an\n   n-dimensional space. In moving from a document into a vector space,\n   we will touch on normalization, stemming, TF/IDF, Latent Semantic\n   Indexing (LSI) and Latent Dirichlet Allocation (LDA).\n-  Part IIB (7 mins): Patents as technology graphs.\\* This will show\n   building graph structures using the connections between patents -\n   both the built-in connections in the patents themselves as well as\n   the connections discovered while working with the patents as vectors.\n   We apply some social network analysis to partition the patent graph\n   and find other documents in the same technology space.\n-  Part III (5 mins): What have we built?\\* Now that we have done all\n   this analysis, we can see some interesting things about the patent\n   database as a whole. How does the patent database act as a map to the\n   world of technology? And how has this helped with the original\n   problem - finding better prior art?\n\n"}, {"title": "How to sell Python", "description": "How to sell Python\n\nPresented by Daniel Greenfeld , C. Titus Brown , Dan Mesh , Chris\nShenton , Rich Leland , Frank Wiles\n\nA lot of people want to use Python, but their customer, management,\nschool, government, or organization won't let them. Python is a great\ntool, but it can be challenging to get in the door. This panel will\nexplore how companies and individuals have successfully introduced\nPython, what tools are available to sell Python, and what pitfalls there\nare to avoid.\n\nAbstract\n\nA lot of people want to use Python, but their customer, management,\nschool, government, or organization won't let them. Python is a great\ntool, but it can be challenging to get in the door. This panel will\nexplore how companies and individuals have successfully introduced\nPython, what tools are available to sell Python, and what pitfalls there\nare to avoid.\n\nPossible questions will include:\n\n-  What is a good example success story you can share?\n-  What pitfalls should you avoid?\n-  How do you deal with organizations that have already spent\n   bucketloads of money on a piss-poor technology stack, are hurting for\n   it, but can't seem to let go?\n-  How do you fight Fear-Uncertainty-Doubt (FUD) spread by people who\n   stand to lose from introducing Python?\n-  What tools are available to help sell Python?\n\nFive panelists will be chosen from a broad spectrum of individuals\nincluding academic, government, for-profit organizations, and non-profit\norganizations.\n\nSpeakers:\n\n-  Academia: C. Titus Brown\n-  Goverment: Chris Shenton of Koansys/NASA\n-  Large Commercial Organization: Dan Mesh of Evite\n-  Small Commercial Organization: Frank Wiles of RevSys\n-  Non-Profit Organization: Rich Leland of National Geographic\n\n"}, {"title": "How to write obfuscated python", "description": "How to write obfuscated python\n\nPresented by Rev. Johnny Healey\n\nWith its clean, highly readable syntax, Python would seem to be quite a\nchallenge for a programmer attempting to write obfuscated code.\nFortunately, it provides a wide variety of high-level abstractions that\ncan be misused in exciting ways. This survey of obfuscation strategies\nwill include topics such as decorator abuse, lambda calculus, and\nbytecode manipulation.\n\nAbstract\n\nPython's clean syntax can make traditional approaches to writing\nobfuscated code much more challenging. Fortunately, Python provides many\nuseful abstractions that can be misused to write code that is unreadable\nor even deliberately misleading. This talk will provide a survey of\nsilly python tricks that explore the boundaries of the language.\n\nTopics\n\n-  Redefining builtins\n-  Rarely used syntax\n-  Comparison edge cases\n-  Things you probably shouldn't do with decorators\n-  Fun with lambdas\n-  Bytecode manipulation\n\n"}, {"title": "HTSQL - an insanely good WSGI / REST interface to your favorite database", "description": "The HTSQL processor is a high-level URI-based query language for\nrelational databases such as SQLite, PostgreSQL or MySQL. Since it's\nwritten in Python, it is easy to integrate and generates immediate value\nas the core of your application's custom reporting engine. HTSQL is like\nthe Django or SQLAlchemy ORMs in that it generates SQL, but unlike an\nORM in that its design center is completely different -- it was created\nfor hard core reporting and not object to relational mapping. Hence, it\nis a wonderful complement to existing WSGI- based applications to easily\ncreate dashboards, complex reports. We use HTSQL as a REST reporting\ninterface for data integration and ad-hoc queries.\n\nThis talk will have two parts. In the first part we'll give a brief\noverview of the rationale and design of the query language. In the\nsecond part, we'll show how to hook the HTSQL processor into your WSGI\napplication and how to make custom commands, such as a simple calendar\noutput from a table containing a date column.\n\nThe talk will be presented by Clark Evans, HTSQL was developed by Kyrylo\nSimonov. The main HTSQL site is http://htsql.org and the code is at\n`http://bitbucket.org/prometheus/htsql <http://bitbucket.org/promet%20heus/htsql>`__.\nIt'll be similar to previous talks, such as\nhttp://htsql.org/talks/20101103.html.\n"}, {"title": "HTTP in Python: which library for what task?", "description": "HTTP in Python: which library for what task?\n\nPresented by Augie Fackler\n\nHTTP is the lingua franca of the web, and many things done in Python\ndepend on it, yet HTTP in Python isn't always as good as one would\nexpect. It's well worth knowing the options and tradeoffs available.\n\nAbstract\n\nHTTP in Python is very much a mixed bag of available technology. What's\nimplemented mostly works well, but there are some frustrating gaps in\ndifferent libraries that are poorly documented. I've gone wading through\nevery HTTP library I can find for Python while trying to fix an obscure\nbug in Mercurial and decided to write my own. I'll cover what's\navailable today and why I'm starting from scratch with a completely new\nimplementation.\n"}, {"title": "Introduction to Parallel Computing on an NVIDIA GPU using PyCUDA", "description": "Introduction to Parallel Computing on an NVIDIA GPU using PyCUDA\n\nPresented by Roy Hyunjin Han\n\nWith Andreas Kl\u00f6ckner's PyCUDA, you can harness the massively parallel\nsupercomputing power of your NVIDIA graphics card to crunch numerically\nintensive scientific computing applications in a fraction of the runtime\nit would take on a CPU and at a fraction of the development cost of C++.\nWe'll cover hardware architecture, API fundamentals and several examples\nto get you started.\n\nAbstract\n\nThere are two approaches to parallelizing a computationally heavy\nprocedure: use a messaging queue such as AMQP to distribute tasks among\na networked cluster or increase the number of processors in a single\nmachine. This talk focuses on techniques for adapting mathematical code\nto run on specialized multi-core graphic processors.\n\nModern graphic processors have hard-coded transistors for common vector\nand matrix operations, making them ideal for general scientific\ncomputing. However, the NVIDIA CUDA's unique design requires knowledge\nof its hardware to adapt algorithms effectively. This talk covers basic\nCUDA architecture, API functions and several examples to illustrate the\ndifferent kinds of problems that will benefit from parallelization.\n"}, {"title": "Javascript for people who know Python", "description": "Javascript for people who know Python\n\nPresented by Ian Bicking\n\nJavascript as a diff on Python.\n\nAbstract\n\nYou know Python. You should know Javascript. The two aren't so\ndifferent, but this talk will explain exactly how they are different --\nlists, dicts, objects, functions, loops and all the other details of\nJavascript described in terms of Python.\n"}, {"title": "Jython Concurrency", "description": "Jython Concurrency\n\nPresented by Jim Baker\n\nJython is arguably the best Python implementation to target concurrent\ncode. Jython has no GIL, it leverages the Java platform to provide\nrobust support for concurrency in its runtime, and it enables access to\na set of high-level abstractions from Java. This talk will walk through\nat the extreme level pertinent Jython implementation details and a\nseries of examples, including Java integration.\n\nAbstract\n\nJython implements the Python language, but we leverage the underlying\nJava platform to provide an opionated alternative to CPython in our\nsupport of concurrency.\n\nBecause of the GIL and related infrastructure, CPython cannot use a\nmodel in which threads perform concurrent computation defined in Python\non shared objects in the same process. (Of course, there are\nworkarounds, such as multiprocessing or using C extensions.)\n\nIn contrast, there's no GIL in Jython. Jython instead embraces threads,\nprovides extensive support for managing their execution and coordination\nthrough standard Java platform functionality (java.util.concurrent), and\nthreaded code works well with Jython's implementation of standard\nmutable collection types. Lastly, the underlying JVM provides extensive\ninstrumentation as well as the ability to set a variety of parameters,\nincluding choice of GC. There are also the inevitable pitfalls that\nmight be seen in complex architectures, such as around the use of\nClassLoaders.\n\nThis talk will go into a detailed discussion of some of the interesting\nramifications of these design points and how they can be effectively\napplied to write concurrent code, as illustrated through a variety of\nshort examples.\n"}, {"title": "Large Scale Data Conditioning &amp; Processing with Stackless Python and Pypes", "description": "Large Scale Data Conditioning & Processing with Stackless Python and\nPypes\n\nPresented by Eric Gaumer\n\nPypes is a component oriented framework for designing dataflow\napplications. It uses Stackless Python to model components as\ncomputational entities that operate by sending and receiving messages.\nComponents are designed to process streams of data modeled as a series\nof messages which are exchanged asynchronously. Data streams are\ninitiated over an asynchronous REST interface.\n\nAbstract\n\nThere's been some recent momentum around data flow programming with a\nnumber of new frameworks having been released. This new found interest\nis due largely in part to the increasing amount of data being produced\nand consumed by applications. MapReduce has become a general topic of\ndiscussion for analytics over large data sets but it's increasingly\nevident that it's not a panacea.\n\nSimple batch processing tools like MapReduce and Hadoop are just not\npowerful enough in any one of the dimensions of the big data space that\nreally matters. One particular area where MapReduce falls short is in\nnear real-time search. It used to be common to run batch processing jobs\non a nightly basis which would index the days events, making them\nsearchable.\n\nGiven today's social dynamics, people have come to expect instant access\nto data as opposed to a daily digest. Batch oriented semantics are being\nsuperseded by event driven architectures that act on live, real-time\nstreams of data. This shift in paradigm has sparked new interest in\ndataflow concepts.\n\nDataflow frameworks promote the data to become the main concept behind\nany program. It becomes a matter of \"data-flow\" over \"control-flow\"\nwhere processes are just the way data is created, manipulated and\ndestroyed. This concept is well represented in the Unix operating system\nwhich pipes data between small single-purpose tools to produce more\nsophisticated applications.\n\nPypes is a dataflow framework that leverages Stackless Python to model\nprocesses as black box operations that communicate by sending and\nreceiving messages. These processes are naturally component oriented\nallowing them to be connected in different ways to form new\napplications. Components are inherently stateless making parallel\nprocessing relatively simple. Because a component is an abstraction of a\nStackless tasklet (true coroutines), expensive setups such as loading\nmachine learning models are done once during initialization and can then\nbe used throughout the life of the component. This is in contrast to\nMapReduce frameworks that typically incur this overhead each time the\nmap function is called or try to manage some sort of global state.\n\nOne aspect that differentiates Pypes from other dataflow frameworks is\nits \"push\" model. Unlike generator based solutions which pull data\nthrough the system, Pypes provides a RESTful interface that allows data\nto be pushed in. This allows Pypes to sit more natural as an event\ndriven middleware component in the context of a larger architecture. A\ndata push model also simplifies scalability since an entire cluster of\nnodes can be setup behind a load balancer which will then automatically\npartition the incoming data stream. Generator based \"pull models\" cannot\neasily partition data without somehow coordinating access to the data\nwhich involves global state.\n\nPypes was designed to be a highly scalable, event driven, dataflow\nscheduling and execution environment. Writing your own components is\nsimple and Pypes provides Paste templates for creating new projects.\nComponents are packaged as Python eggs and discovered automatically.\nThey can be wired together using a visual editor that runs in any HTML5\ncompliant browser. Pypes supports Directed Acyclic Graphs and data\nstreams are modeled as a series of JSON (dict) packets which support\nmeta-data at both the packet level and the field level.\n\nPypes also leverages the Python multiprocessing module to scale up. Data\narriving through the REST interface on any given node will be\ndistributed across parallel instances of the graph running on different\ncores/CPUs. Data submission is completely asynchronous.\n\nThis talk will provide a gentle introduction to the Pypes architecture\nand design.\n\nOutline:\n\n-  Brief intro to Stackless Python (benefits it provides)\n-  Control-Flow vs Data-Flow\n-  Preemptive vs Cooperative Scheduling\n-  The Topological Scheduler\n-  The REST API (Submitting Data - Asynchronous Web Service)\n-  Packet API: A unified data model with meta-data support\n-  Writing Custom Components - Paste templates and pluggable eggs\n-  Scale up - multiprocessing support\n-  Scale out - cloud friendly\n-  Questions\n\n"}, {"title": "Linguistics of Twitter", "description": "Contrary to expectations, the prevalence of television did not cause\nevery American to speak in a common standard dialect. Rather, smaller\nsub-regional dialects are merging into stronger regional dialects with\nthe largest change in spoken English since the 1750's taking place in\nthe Northern Cities Vowel Shift.\n\nSocial Media is widely considered a conversational media, users often\nleaning on their dialect which to express themselves.\n\nTaking a recent tweet for example:\n\n::\n\n    '_andBeautyKills: \u2013 after tonight, don\u2019t leave your boy roun\u2019 me, umma #true playa fareal.'\n\nThis tweet presents a problem for traditional natural language\nprocessing paradigm:\n\n-  Do they build out an extensive reg ex to solve this?\n-  Even Worse, do they reject it because of non-Standard English?\n-  How do they respond such that communication is effective?\n\nCurrently under development with Python using the Natural Language\nToolkit are the tools and methodologies to process, understand and\nrespond to communication that falls outside Standard American English.\nThis talk will focus on the status of existing tools, where development\nstands, challenges for traditional tools and potential opportunities for\nexploration.\n\nWhile limited to American English, any participant who is studying\nnatural language processing of any language is welcome and sure to\nlearn. The techniques could be applied to languages around the world for\nwhich the motivated programmer is knowledgeable about.\n"}, {"title": "MongoDB + Pylons at Catch.com: Scalable Web Apps with Python and NoSQL", "description": "MongoDB + Pylons at Catch.com: Scalable Web Apps with Python and NoSQL\n\nPresented by Niall O'Higgins\n\nThe Catch.com backend provides an API for publishing and querying your\npersonal data - used by many hugely popular Android, iOS and Web\nclients. We ported this system to Python and MongoDB, using the Pylons\nWeb framework. This talk details our reasoning for choosing - and\nexperiences with - these cutting-edge Web and NoSQL database\ntechnologies in a high-traffic, real-world production system.\n\nAbstract\n\nFaced with the limits of our initial Catch.com Java/BDB backend\nimplemention, we evaluated various alternative technologies including\nAmazon SimpleDB, MySQL, Cassandra and MongoDB. Eventually we settled on\nPython, Pylons and MongoDB.\n\nWe found Python and MongoDB gave us unique flexibility with our data\nmodel, allowed us to scale for increased reliability and performance and\ndecreased feature development time - and in this talk we'll describe\nexactly how.\n\nWhile there are many advantages, Python/Pylons and MongoDB (as a\nrelative newcomer on the database scene) certainly have issues and\nlimitations which must be taken into careful consideration for any\nreal-world production deployment.\n\nWe compare MongoDB with other database technologies such as more\ntraditional RDBMS like MySQL and competing NoSQL options such as\nCassandra, CouchDB and BDB.\n\nWe give a detailed introducton to data modeling in MongoDB - with\nspecial attention paid to how this differs from a traditional relational\nsystem - the operators provided by its rich query language and utilizing\nadvanced features such as GeoSpatial indexing, Replica Sets, Sharding -\nand how to deal with some of the more publicized limitations of the\nsystem (such as single-server durability).\n\nWhile much of this talk will be about using MongoDB with Python, we will\nalso touch on issues surrounding production deployment of the Pylons Web\nframework, including how we work around the GIL to take advantage of\nmulti-core machines.\n"}, {"title": "Montreal-Python -- Lessons Learned from Bootstraping a Python Community", "description": "The talk will first walk the audience through the factors inherent to\nMontr\u00e9al itself and how it affected other user groups before\nMontr\u00e9al-Python. These groups inspired us to get a group of Python\nhackers started the presentation will show how we were able to leverage\non the success of other user groups to bring our young community\nforward.\n\nThe various stages of our growth will be presented along with insights\non how we managed to find speakers and venues at each point. The\npresentation will then go through an overview of our current activities,\nsharing in the process how effective they are in engaging the community.\nOur plans for the next few years will be presented then a summary will\nprovide advice to anyone who would like to get started organizing a\nlocal Python user group.\n"}, {"title": "mrjob: Distributed Computing for Everyone", "description": "mrjob: Distributed Computing for Everyone\n\nPresented by Jimmy Retzlaff\n\nHave tons of data that needs analysis? Now it's as easy as 1-2-3! 1)\nSign up for an Amazon Web Services account. 2) Install Yelp's mrjob. 3)\nWrite as few as a dozen lines of Python code. This talk will show you\nhow to use mrjob and Amazon's Elastic MapReduce to easily process lots\nof data in parallel on a potentially large cluster of computers that you\ncan rent for a dime per computer per hour.\n\nAbstract\n\nIn their 2004 paper, Google outlined MapReduce - one of the programming\nmodels they use to process large data sets. MapReduce is a relatively\nsimple model to develop for that allows the underlying framework to\nautomatically parallelize the job, add fault tolerance, and scale the\njob to many commodity computers.\n\nIn 2009, Amazon Web Services introduced their Elastic MapReduce (EMR)\nproduct. It layers the Hadoop open source package on top of their\nElastic Compute Cloud (EC2) to allow anyone to rent a cluster of\ncomputers by the hour, starting at about a dime per computer per hour,\nin order to run MapReduce jobs.\n\nSome of the significant issues with Amazon's solution involve starting\nup machine instances, replicating your code and its dependancies to EMR,\nrunning and monitoring the job, and gathering the results.\n\nSo Yelp developed mrjob, which takes care of these details and lets the\ndeveloper focus on working with their data. Yelp uses mrjob to power\nmany internal jobs that work with its very large log files, for example:\n\n-  People Who Viewed This Also Viewed...\n-  A user clicked an ad over and over, but we only want to charge the\n   advertiser once\n-  We're thinking of a change, but want to simulate how that will affect\n   ad revenue\n\nNow you can use that same power with just a few lines of Python.\n\nUseful links:\n\n-  Install mrjob: sudo easy\\_install mrjob\n-  Documentation: http://packages.python.org/mrjob/\n-  PyPI: http://pypi.python.org/pypi/mrjob\n-  Development is hosted at github: http://github.com/Yelp/mrjob\n\n"}, {"title": "Opening the Flask", "description": "Opening the Flask\n\nPresented by Armin Ronacher\n\nAfter a year of the Flask microframework it's time to draw some\nconclusions, see things that went right and things that should be\nimproved. The talk gives both an introduction into Flask itself as well\nas well as the ecosystem that evolved around it.\n\nAbstract\n\nFlask is a microframework that was born out of an April's fool joke that\nquickly became more than that. Based on the powerful foundation of\nWerkzeug and Jinja2 it's one of the most popular frameworks for Python\nnow.\n\nThe talk starts with a very quick introduction into Flask, where it all\nstarted and why I think people like it. We will look into the design of\nFlask and why it works the way it works.\n\nFurthermore we will look into the Flask ecosystem and how extensions\nwork and have a brief look in what is planned for the future, especially\nregarding Python 3.\n\nThe talk assumes basic knowledge of web applications.\n"}, {"title": "Optimal Aircraft Engine Tuner Selection in Python", "description": "Optimal Aircraft Engine Tuner Selection in Python\n\nPresented by Jeffrey Armstrong\n\nA numerical algorithm for designing on-board aircraft engine diagnostics\nhas been implemented in Python. Employing the optimization techniques\nwithin SciPy, the code performs a search for an optimal vector of\nparameters for estimating engine variables, including exhaust\ntemperatures and thrust. The algorithm exploits the numerical strengths\nof Python and SciPy for speed and interoperability.\n\nAbstract\n\nAn emerging field of aircraft engine diagnostics is the inclusion of\non-board engine performance tracking algorithms. These algorithms\nutilize data provided by a limited number of engine sensors to determine\nthe current engine performance, which tends to degrade over time.\nHowever, estimating engine performance instantaneously is problematic\ndue to the limited number of sensors normally available on a commercial\naircraft engine.\n\nOne common practice is to estimate and track engine performance in\nsoftware using a Kalman filter, a mathematical construct for tuning a\nnumerical model to better track actual measurements (1). A new technique\nhas been devised to optimize the design of this filter in aircraft\nengine applications (2). An optimization procedure to aid in the design\nof the filter has been implemented in Python and exercised against the\nsignificant number of minimization and optimization strategies available\nin SciPy. The talk focuses on the design of this optimization procedure\nin Python. The object-oriented nature of Python offers benefits over\nalternative numerical languages; speed, availability, and\nmaintainability played central roles in the selection of Python as the\nimplementation language. The availability of the multiprocessing module\nallowed for full utilization of modern multi-core CPUs, in contrast with\noften limited commercial numerical computing packages, further improving\ncomputational speed.\n\nSome difficulties were encountered during this design exercise.\nDiscussion of these obstacles and their eventual solution is presented.\nSpecifically, iterative solvers for the discrete algebraic Riccati\nequation and the discrete Lyapunov equation had to be authored in Python\n(3,4). Additional framework for working with discrete state-space\ncontrol systems was created, exploiting the object-oriented features of\nthe language (5).\n\nThe Python implementation was able to verify the solution of the\noptimization problem. Comparison with an alternative, reference MATLAB\nimplementation will be presented briefly. The results of this research\nis planned to be presented at the American Society for Mechanical\nEngineers Turbo Expo 2011 Conference in June, 2011 (6). The algorithm\ndesign in Python is meant to showcase the ability to perform controls\nengineering tasks in the Python language efficiently.\n\n1. \u201cKalman Filter,\u201d Wikipedia:\n   `http://en.wikipedia.org/wiki/Kalman\\_filter <ht%20tp://en.wikipedia.org/wiki/Kalman_filter>`__\n\n2. Simon, D. L. and Garg, S., \u201cOptimal Tuner Selection for Kalman\n   Filter-Based Aircraft Engine Performance Estimation\u201d. Journal of\n   Engineering for Gas Turbines and Power. March 2010, Vol. 132.\n\n3. \u201cAlgebraic Riccati Equation,\u201d Wikipedia:\n   `http://en.wikipedia.org/wiki/Alge\n   braic\\_Riccati\\_equation <http://en.wikipedia.org/wiki/Algebraic_Riccati_equatio%20n>`__\n\n4. \u201cLyapunov Equation,\u201d Wikipedia:\n   `http://en.wikipedia.org/wiki/Lyapunov\\_equa\n   tion <http://en.wikipedia.org/wiki/Lyapunov_equation>`__\n\n5. \u201cState Space,\u201d Wikipedia: `http://en.wikipedia.org/wiki/State-\n   space <http://en.wikipedia.org/wiki/State-space>`__\n\n6. Simon, D. L., Armstrong, J. B., \"Application of an Optimal Tuner\n   Selection Approach for On-Board Self-Tuning Engine Models,\"\n   Proceedings of the ASME Turbo Expo 2011, GT2011-46408, 2011 (To Be\n   Published).\n\n\n"}, {"title": "Packaging, from Distutils to Distutils2", "description": "Packaging, from Distutils to Distutils2\n\nTarek Ziad\u00e9\n\nPackaging or installing a Python application can be extremely painful.\nThis talk will deep-dive into the new Distutils2 features and explain\nhow you can use them in your project *today* to make life easier for\neveryone (users, OS package managers, developers, etc.).\n\nAbstract\n\n1. Distutils2 presentation and goals\n\n   1.  Framework\n   2.  Command-driven packaging system\n   3.  Changes from Distutils1\n   4.  R.I.P. setup.py\n   5.  The new metadata fields (PEP 345)\n   6.  versions for your project (PEP 386)\n   7.  PyPI goodies\n\n       1. browsing\n       2. uploading docs\n\n   8.  What's installed ? what to install ? (PEP 376)\n\n       1. The Dependency graph tool\n\n   9.  Extensibility !\n\n       1. commands\n       2. compilers\n\n   10. Pysetup, one command to rule them all\n   11. install !\n   12. remove\n   13. do other things\n   14. Examples\n   15. Example 1: A simple Distutils2 project\n   16. Example 2: Porting your project to Distutils2, and keep it\n       working in Distutils/Setuptools/zc.buildout environments.\n   17. Example 3: Creating and releasing your own commands and compilers\n   18. Example 4: Developement process made simple with Distutils2\n   19. Conclusion\n   20. Roadmap\n\n\n"}, {"title": "Panel: Python in Schools: Teaching It and Teaching With It.", "description": "Panel: Python in Schools: Teaching It and Teaching With It.\n\nPanel with Joel Zachary Miller, Jeffrey Elkner, Vern Ceder, Brian C.\nBrumley, Maria Litvin\n\nEducators discuss Python as both a subject and a tool in primary and\nsecondary (K12) education. Topics addressed include the distinction\nbetween teaching Python and teaching with Python, the benefits of Python\nin K12 and ways to demonstrate the value of Python to administrators.\nPanel includes private and public K12 educators and university faculty\ninvolved in instruction in the K12 setting.\n\nAbstract\n\nZac Miller will act as panel moderator.\n\nPanel will open with a brief introduction of the origins of the panel\nand self introductions of panel members before addressing the following\ntopics:\n\n-  The distinction between teaching Python and teaching with Python.\n\n   -  Teaching Python\n   -  Teaching Math with Python\n\n-  How does Teaching with Python complement Teaching Python?\n\n   -  Do tensions between the two exist?\n\n-  What keeps Python out of schools? What can be done to encourage more\n   schools to teach tools like Python?\n-  What is the biggest benefit teaching Python brings to your school and\n   students? What is the biggest benefit in general, beyond your school?\n-  Can teaching Python help spark creativity in those students who have\n   trouble exercising it?\n\n   -  When teaching Python a creativity divide becomes readily apparent\n      among students. Students with a high level of curiosity and\n      creativity constantly try new things on their own, while other\n      students are focused solely on completing the assignments for\n      grades. How can an instructor handle this?\n   -  What tangible steps can an instructor take to encourage\n      creativity?\n\n-  What does the future look like for Python in K12 education, both at\n   our own schools and in general?\n-  Audience Questions\n\nPanel Biographies:\n\nVern Ceder, Director of Technology, Canterbury School, Ft Wayne,\nIndiana. The Canterbury School has been teaching at least a little\nPython to every single 8th and 9th grader in the school since 2001, as\nwell as offering electives in Python, Java, C, etc. Vern also teaches\nPython through Northwestern's Gifted Learning Links program\n(http://www.ctd.northwestern.edu/gll/) and is the author of The Quick\nPython Book, 2nd ed (http://www.manning.com/ceder)\n\nMaria Litvin. Maria teaches Math and Computer Science at Phillips\nAcademy in Andover, MA, including \"Introduction to Discrete Mathematics\nand Programming in Python.\" She also taught Python to Boston-area high\nschool teachers and to middle schoolers in Google's CAPE program. She's\nco-author of several Computer Science textbooks, most recently\nMathematics for the Digital Age and Programming in Python\n(`www.skylit.com/mathandpython.html <http://www.skylit.c%20om/mathandpython.html>`__).\n\nJeffrey Elkner, teaches computer programming and information technology\nat the Governor's Career and Technical Academy in Arlington, Virginia.\nHe has been teaching with Python since 1999, and is co-author of a free\non-line textbook: How to Think Like a Computer Scientist: Learning with\nPython. He also maintains the Open Book Project\n(`http://openbookproject.net <http://openbookproject.net/>`__), which\ncontains several Python resources. Jeff has attended each PyCon held\nthus far, often bringing students along with him.\n\nBrian Brumley teaches Python (and lots of other stuff) to grades 6-8 at\nPorter-Gaud school in Charleston, SC. Brian is a regular presenter at\nstate and regional conferences on technology and programming in schools.\n\nZac Miller is adjunct instructor in the STEM school at Gainesville State\nCollege and a faculty member at the Da Vinci Academy at South Hall\nMiddle School in Gainesville, Georgia. Zac is currently teaching Python\nprogramming and Python programming for Geographic Information Systems to\nK12 and college- level students.\n"}, {"title": "Pluggable Django Patterns", "description": "Pluggable Django Patterns\n\nPresented by Corey Oordt\n\nPluggable or reusable applications are a key feature of Django, but\nthere is little guidance on writing them well. We'll dig into the\ndifferent types of Django applications and coding patterns that make\nwriting a reusable application easier. The talk also covers ways to\navoid common implementation gotchas.\n\nAbstract\n\nReusable, or pluggable, applications are a powerful feature of Django.\nYour code can do more if written with a few ideas and techniques in\nmind. We'll cover:\n\n-  The four qualities of a pluggable application\n-  The three types of Django applications\n-  Ten common situations in implementing reusable code and coding\n   patterns to handle them\n\n"}, {"title": "Prototyping Go's Select with stackless.py for Stackless Python", "description": "Prototyping Go's Select with stackless.py for Stackless Python\n\nPresented by Andrew Francis\n\nShowing how to use Python to prototype powerful concurrency features for\nStackless Python. We do want you to try this at home.\n\nAbstract\n\nGoogle\u2019s introduction of the Go language raised eyebrows in the\nStackless Python community. Although very different languages, Go and\nStackless Python\u2019s concurrency model share a common ancestor: the Bell\nLabs family of languages (i.e., Newsqueak, Limbo). The common feature\nare channels: a synchronous message passing mechanism based on Tony\nHoare\u2019s Communicating Sequential Processes (CSP).\n\nBoth Go and Python have channels. However with the select language\nstatement, Go has the ability to wait on multiple channels\nsimultaneously. Select greatly simplifies many concurrent programming\nproblems. Stackless Python does not have this feature. Other channel\nbased languages also feature powerful concurrency constructs. How hard\nwould these constructs be to implement for Stackless Python?\n\nThis talk explores the prototyping potential of stackless.py, the PyPy's\nframework's implementation of Stackless Python. The beauty of\nstackless.py is that it is written in Python and implements much of\nStackless Python's API! The \"case study\" involves prototyping Go's\nselect in stackless.py before reimplementing select in C based Stackless\nPython.\n\nDuring this talk, it will be shown how stackless.py can be used with\nCPython and the greenlet package (no need to install another Python).\nThe audience will also get an in depth look at how channels are\nimplemented. Channels are at the heart of Stackless Python's message\nbased concurrency model. Finally the audience will gain insights into\nfuture directions of Stackless Python.\n"}, {"title": "PSF funds PyPy", "description": "Maciej Fija?kowski, Armin Rigo, Alex Gaynor, Laura Creighton and Jacob\nHall\n"}, {"title": "Python - The Secret Sauce in the Open Cloud", "description": "Python - The Secret Sauce in the Open Cloud\n\nPresented by Jason Huggins\n\nThis talk will go into detail on current cloud computing technology,\nspecifically OpenStack and libvirt and how Python is the \"secret sauce\"\nthat powers the open cloud. We'll show how to bring up your own cloud\n\"from scratch\", and explain why you would do such a thing.\n\nAbstract\n\nCovered topics:\n\n-  How to use VirtualBox\n-  How to use kvm\n-  How to use libvirt with Python\n-  How to check out, build, and deploy OpenStack\n-  How to setup and maintain your own cloud\n-  Real world examples\n\n"}, {"title": "Python and Robots: Teaching Programming in High School", "description": "Python and Robots: Teaching Programming in High School\n\nPresented by Vern Ceder\n\nCombining Python with inexpensive robots is a very effective way of\nteaching programming at the middle and high school levels. Since Python\nis easy to understand a constructivist approach is possible - students\nlearn by creating and running simple programs, observing the results,\nand then modifying their code to fix bugs and add functionality.\n\nAbstract\n\nThe approach suggested in this talk is partly based upon that developed\nat the Institute for Personal Robots in Education\n(`http://wiki.roboteducation.org <http://wiki.roboteducation.org/>`__)\nby staff from Georgia Tech and Bryn Mawr, combined with my own\nexperiences teaching programming with Python as described in my talk\n\"Goodbye, Hello World: Rethinking Teaching with Python\", PyCon 2007, and\nmy subsequent talks at NECC.\n\nBecause students are able to see what their code is doing and because\nPython is easy to understand, students can explore simple programming\nconcepts, learning features as they need them. This approach increases\nboth student engagement and retention. It also seems that this approach\nis more appealing to girls than a more traditional programming class.\n\nI'll illustrate my talk with samples of code created by students and\nvideo of the students/robots in action.\n\nOutline\n\nIntroduction - school background, course structure, origin of approach\n\nHardware and computer setup used\n\nInitial exercises and first projects\n\n-  Control of robot\n-  Program as sequence of commands\n-  Basic programming concepts - looping, branching, functions\n\nAdvanced projects\n\n::\n\n    * obstacle detection \n    * image processing \n    * simple AI approaches \n\nPitfalls and strategies for using robots\n\nQuestions and Suggestions\n"}, {"title": "Python-Aware Python", "description": "Python-Aware Python\n\nPresented by Ned Batchelder\n\nPython provides many features for introspecting, analyzing, parsing,\ncompiling, and otherwise grokking Python code. This talk will cover a\nnumber of the techniques for writing Python-Aware Python, and will\nhopefully inspire you to build the next great Python tool.\n\nAbstract\n\nPython provides many features for introspecting, analyzing, parsing,\ncompiling, and otherwise grokking Python code. These modules and\ntechniques provide the foundation for developer's tools such as\nautocompletion IDE's, code analysis tools, test runners, profilers, and\nso on.\n\nI'll delve into a number of the common techniques used to write\nPython-Aware Python. Each has its area of applicability and its\nstrengths and weaknesses. I'll demonstrate small samples that show how\nthose techniques underlie the tools we all know and love.\n\nThe world of Python tools is ready for new exploration. This talk will\ngive you the foundation you need to write the next great Python-aware\napplication.\n"}, {"title": "Python for High Performance Computing", "description": "Python for High Performance Computing\n\nPresented by William Scullin\n\nPython is becoming increasingly popular within the high performance\ncomputing community. While it initially gained traction as a scripting\nlanguage, Python's role has continued to expand with Python applications\nfor science scaling to hundreds of thousands of cores and bindings to\nhigh performance libraries becoming commonplace. This talk is meant as\nan overview of Python's role in the HPC space.\n\nAbstract\n\nThis talk is focused on raising awareness of Python in the high\nperformance computing space. Specific topics include:\n\n-  building the Python interpreter for speed\n-  an overview of bindings to numerical libraries\n-  using GPUs and accelerators with Python\n-  scaling codes with MPI\n-  issues when scaling on very large systems\n-  an overview of successful science codes\n-  a live demonstration of Python running on 163,840 cores\n\n"}, {"title": "Python IDEs Panel", "description": "Python IDEs Panel\n\nModerated by Michael Foord\n\n-  Dino Viehland - Python Tools for Visual Studio\n-  Dmitry Jemerov - PyCharm\n-  Todd Whiteman - ActiveState Komodo IDE\n-  Stephan Deibel - WingWare IDE\n-  Barry Warsaw - Emacs\n\nAs Python becomes more popular, more users are wanting IDEs that provide\ncode completion, integrated source code control, project management, and\nother developer tools. This panel includes representatives from a number\nof Python- specific or Python-supporting IDE vendors, showing the ways\nthat IDEs can speed up development on any platform.\n\nAbstract\n\nFor many developers, IDEs are an essential tool-just as essential as\nsource code control. The growth of Python in recent years has led to a\nnumber of projects and vendors developing Python-specific or\nPython-supporting IDEs. This panel will allow attendees to compare and\ncontrast the different IDEs available.\n"}, {"title": "Python.MiroCommunity.org + UniversalSubtitles.org", "description": "Will and Carl talk about Python Miro Community, where it's at now, the\nPSF grant, and what they're planning for it in the future.\n"}, {"title": "Python Software Foundation Chairman Address", "description": "Python Software Foundation Chairman Address\n\nPresented by Steve Holden\n\nSteven Holden summarizes the last year for the Python Software\nFoundation and talks about future directions.\n"}, {"title": "Rapid Python used on Big Data to Discover Human Genetic Variation", "description": "Rapid Python used on Big Data to Discover Human Genetic Variation\n\nPresented by Deniz Kural\n\nAdvances in genome sequencing has enabled large-scale projects such as\nthe 1000 Genomes Project to sequence genomes across diverse populations\naround the world, resulting in very large data sets. I use Python for\nrapid development of algorithms for processing & analyzing genomes and\ndiscovering thousands of new variants, including \"Mobile Elements\" that\ncopy&paste; themselves across the genome.\n\nAbstract\n\nRecent advances in high-throughput sequencing now enables accurate\nsequencing human genomes at a low cost & high speed. This technology is\nnow used to initiate projects involving large-scale sequencing of many\ngenomes. The 1000 Genomes project aims to sequence 2500 genomes across\n27 world populations, and has initially completed its Pilot phase. The\naim of the project is to discover & characterize novel variants. These\nvariants enable association studies that investigate the link between\ngenomic variation & phenotypes, including disease.\n\nA class of variants, known as \"Structural Variants\" represent a\nheterogenous class of larger variants, such as inversions, duplications,\ndeletions, and various kinds of insertions.\n\nI use Python to for rapid development of algorithms to process, analyze,\nand annotate very large data sets. In particular, I focus on Mobile\nElements, pieces of DNA that copy&paste; across the genome. These\nelements constitute roughly half of the genome, whereas protein-coding\ngenes account for roughly 1.5 % of the genome.\n\nI will discuss distributed computing, genomics, and big data within the\ncontext of Python.\n"}, {"title": "Reverse-engineering Ian Bicking's brain: inside pip and virtualenv", "description": "Reverse-engineering Ian Bicking's brain: inside pip and virtualenv\n\nPresented by Carl Meyer\n\nPip and virtualenv: many use them; not so many understand just how they\nwork their magic. If you're a pip/virtualenv user but haven't yet dared\ncrack the lid (or you have, and found it a bit difficult to follow),\ncome along for a fast-paced guided tour. Knowing these tools will help\nyou make more effective use of them, and might also turn you into a\ncontributor.\n\nAbstract\n\nPip and virtualenv are widely used in the Python world, but for the size\nof their user base don't receive many code contributions, and many users\nhave misconceptions about how they actually work.\n\nThis talk will cover a bit of advanced use of pip and virtualenv, but\nmostly we'll dive into the source code, mapping it out with a high-level\nview and diving into the guts of particularly interesting bits. By the\nend of the talk, you'll have a good idea exactly how pip and virtualenv\ndo their magic, and where to go looking in the source for particular\nbehaviors or bug fixes. We'll walk through the creation of a virtualenv\nstep-by-step, and trace a typical \"pip install -r requirements.txt\" and\n\"pip uninstall\" through the code paths they follow.\n\nI'll know the talk was a success when I see the pull requests!\n"}, {"title": "Saturday Afternoon Lightning Talks", "description": "Saturday Afternoon Lightning Talks\n\n-  00:00 Eric Holscher - Read the Docs\n   (`readthedocs.org <http://readthedocs.org/>`__)\n-  05:25 Nate Aune - DjangoZoom\n   (`DjangoZoom <http://djangozoom.com/>`__)\n-  09:40 Paul Smith - Update on Japan\n-  12:40 Phillip von Weitershausen - The English of Programming\n   Languages (JavaScript)\n-  18:15 Henrique Bastos - Community Bootstrap\n-  24:00 Barry Warsaw - flufl.i18n library\n   (https://launchpad.net/flufl.i18n)\n-  31:20 Aron Griffis - Window Manglement with PyWO\n   (http://code.google.com/p/pywo/)\n-  35:00 Josiah Carlson - Over-Engineering for Dummies\n-  40:35 Grace Law - Get the job you want\n\n"}, {"title": "Saturday Morning Lightning Talks", "description": "Saturday Morning Lightning Talks\n\n-  00:00 Alfredo Deza - Faster VIM Python Editing\n   (`github.com/alfredodeza/chapa.vim <https://github.com/alfredodeza/chapa.vim>`__)\n-  03:40 Dean Hall - Python-on-a-chip\n   (`pythononachip.org <http://pythononachip.org/>`__)\n-  07:55 Ned Batchelder - Cog will make you happy\n   (`nedbatchelder.com/code/cog <http://nedbatchelder.com/code/cog>`__)\n-  13:55 Brett Cannon - (Some of) your PSF money at work\n-  21:10 Baiju Muthukaden - GetPython3.net\n   (`getpython3.net <http://getpython3.net/>`__)\n-  25:20 Shai Ben-yehuda - Light-weight UI\n\n[VIDEO HAS ISSUES: slides for Alfredo's and Ned's talks are impossible\nto read.]\n"}, {"title": "Scaling Python past 100", "description": "Scaling Python past 100\n\nPresented by Mark Ramm\n\nSourceforge.net has been in the top 100 sites on the internet, and we\ndiscovered that python was easily able to scale up to handle that\ntraffic. In fact Python is now the core language for all new features,\nand is taking over all of sourceforge.net.\n\nAbstract\n\nThe path from legacy PHP to modern python tools has been long an bumpy,\nand this is the story of how we took Python from a single prototype\nsite, to the core technology driving SourceForge.net. I will discuss the\nmistakes we made along the way, the benefits that sold python, and the\nreal secret behind our python transformation.\n\nA few highlights include:\n\n-  How we abused libraries for fun and profit\n-  How a major mistake made us look good\n-  How the python community worked for us\n-  How we couldn't have done it without Django AND TurboGears\n\n"}, {"title": "Serious Business: Python is not just for Engineering", "description": "Serious Business: Python is not just for Engineering\n\nPresented by Zach Steindler\n\nBuilding a great business is quite different from building a great\nproduct, but by measuring Key Performance Indicators (things like cash\nflow, if users keep coming back, etc.) you can make sure your business\nis on the right track. In this talk I'll cover common KPI in the tech\nbusiness and show you how we automate collecting and presenting KPI at\nOlark.\n\nAbstract\n\nAs a hacker-turned-founder, you quickly realize there's more to building\na great business than just building a great product. The easiest way to\nknow your business is on the right track is to measure Key Performance\nIndicators (KPIs): things like cash flow, what parts of the product is\nused the most, if your users keep coming back, if users are experiencing\nproblems... and many, many others. How are you supposed to keep track of\nit all without getting lost in a sea of noise?\n\nWith Python, of course! In this talk I'll cover the most common KPIs\ntechnology businesses track and show you how we used Python at Olark to\nautomatically collect and present KPIs to the team. This has made it\nmuch easier to quickly answer business questions and help us know we're\non the right track.\n\nSo if you're a Python hacker who would like to learn more about how to\nengineer a business, or if you're a business person who's just starting\nto learn Python, come learn how Python isn't just for engineering.\n"}, {"title": "SOLVCON: A New Python-Based Software Framework for Massively Parallelized Numerical Simulations", "description": "SOLVCON: A New Python-Based Software Framework for Massively\nParallelized Numerical Simulations\n\nPresented by Yung-Yu Chen\n\nSOLVCON is the first Python-based software framework for high-resolution\nsimulations of multi-physics conservation laws. More than ninety\npercents of the codes are done in Python. Performance hot-spots are\noptimized by C and glued by ctypes library. SOLVCON is high-performance\nin nature and has been able to utilize 512 4-core nodes at Ohio\nSupercomputer Center.\n\nAbstract\n\nIn this decade, performance improvements of scientific computing will\nmainly come from major changes in the computing hardware. A\nwell-organized software structure is imperative to accommodate such\nchanges. Based on Python, SOLVCON (http://solvcon.net/) is designed as a\nsoftware framework to develop conservation-law solvers by segregating\nsolving kernels from various supportive functionalities. Being the\ngoverning equations for the physical world, conservation laws are\napplied everywhere in science and engineering. Although it is well known\nthat the numerical algorithms and physical models form the kernel of any\nconservation-law solver, few if not none code can cleanly separate those\ncore components from supportive functionalities. The lack of\norganization has hindered the development of legacy codes. To address\nthe issues, the supportive functionalities are internalized in the\nframework of SOLVCON. Aided by the framework, both multi- physics and\nhybrid parallelism can be implemented in an organized way. To date,\nSOLVCON has utilized up to 512 4-core nodes at Ohio Supercomputer Center\nfor high-resolution simulations of computational fluid dynamics (CFD).\nSOLVCON targets to concurrently utilize thousands of computer nodes for\nhigh- resolution simulations using over one billion mesh points.\n\nOne of the major purposes of SOLVCON is to resolve the complicated\nprogramming efforts for GPU clusters. Supercomputing is undergoing the\nthird revolution by the emerging GPU computing. To date, the fastest\nsupercomputer in the Top 500 list, Tianhe-1A, is a GPU cluster. GPU\ncomputing promises numerical analysts to reduce the time for the\nhigh-resolution simulations from months to days. In order to use GPU\ncomputing to accelerate such large-scale problems, GPU nodes must be\nnetworked together to form a GPU cluster. As such, shared-memory and\ndistributed-memory parallelization must be simultaneously utilized to\nachieve the so-called hybrid parallelism. Parallel computing is\ndifficult, and hybrid parallel computing is more difficult. By using\nPython to develop the fundamental software structure, GPU or\nmulti-threaded programming for shared- memory parallelization are locked\nin solving kernels. Complex message-passing is implemented in SOLVCON\nand isolated from solving-kernel developers. Highly optimized C and GPU\ncodes are glued into SOLVCON without loss of performance by using the\nctypes package. Othere important features of SOLVCON include:\n\n-  Pluggable multi-physics.\n-  Built-in `CESE <http://www.grc.nasa.gov/WWW/microbus/>`__ solvers.\n-  Unstructured mesh consisting of mixed elements.\n-  Interface to Message-Passing Interface (MPI) libraries.\n-  Socket communication layer: working without MPI installed.\n-  Automatic distributed-memory parallelization by domain decomposition.\n-  Parallel I/O.\n-  In situ visualization by `VTK <http://vtk.org>`__ library.\n-  Standalone writers to VTK legacy and XML file formats.\n-  Integration to supercomputer (cluster) batch systems.\n\nSOLVCON has been applied to computation fluid dynamics and computational\nmechanics. More physical solvers are being developed for various\npropagating wave problems, e.g., electromagnetic waves. By using Python\nas the foundation in SOLVCON, performance and extensibility are well\nbalanced, and computational research is being done in the most\nproductive way. In this talk, the author of SOLVCON will make an\nintroduction to the software framework by including the following\ntopics:\n\n1. Simulations of conservation laws and hybrid parallelism for\n   supercomputing.\n2. Issues in legacy codes and challenges to code for emerging\n   supercomputer hardware.\n3. Using SOLVCON in the simple way by pre-defined modules.\n4. Fixed parts in SOLVCON.\n\n   1. Distributed computing.\n   2. Multi-thread utilities.\n\n5. Customizable parts in SOLVCON.\n\n   1. Pluggable multi-physics and GPGPU computing.\n   2. Supercomputer batch system and bootstrapping.\n   3. In situ visualization.\n\n6. Conclusion.\n\nThe talk will take 30 minutes.\n"}, {"title": "State of Pylons/TurboGears 2/repoze.bfg", "description": "State of Pylons/TurboGears 2/repoze.bfg\n\nPresented by Chris McDonough, Ben Bangert, and Mark Ramm\n\nA three-for-one talk by the main developers of three popular Python web\nframeworks! We'll (very) briefly cover the state of each of our\nindividual frameworks and communities, and then we'll describe the\nresults of our efforts to work together and share code.\n\nAbstract\n\nPylons is a popular, lightweight Python web framework.\n\nTurboGears 2 is a full-stack framework built atop Pylons.\n\nrepoze.bfg is a moderately popular, lightweight Python web framework.\n\nThe main developers and community leaders of these frameworks have been\nworking together and sharing as much as possible over the course of\nroughly the last year. We'll very briefly describe to the audience the\nstates of our individual efforts, then we'll discuss how we intend to\nmove forward and share more code and effort in the year to come. The\ntalk will be more socially- oriented than technical.\n\nIt's unusual for open source code and communities to bridge minor\nperceived differences in scope and style and to start sharing code and\nideas openly. If you're a user of any of these frameworks, you'll want\nto be present for this talk.\n"}, {"title": "Statistical machine learning for text classification with scikit-learn", "description": "Statistical machine learning for text classification with scikit-learn\n\nPresented by Olivier Grisel\n\nThe goal of this talk is to give a state-of-the-art overview of machine\nlearning algorithms applied to text classification tasks ranging from\nlanguage and topic detection in tweets and web pages to sentiment\nanalysis in consumer products reviews.\n\nAbstract\n\nUnstructured or semi-structured text data is ubiquitous thanks to the\nread- write nature of the web. However human authors are often lazy and\ndon't fill- in structured metadata forms in web applications. It is\nhowever possible to automate some structured knowledge extraction with\nsimple and scalable statistical learning tools implemented in python.\nFor instance:\n\n-  guessing the language and topic of tweets and web pages\n-  analyze the sentiment (positive or negative) in consumer products\n   reviews in blogs or customer emails\n\nThis talk will introduce the main operational steps of supervised\nlearning:\n\n-  extracting the relevant features from text documents\n-  selecting the right machine learning algorithm to train a model for\n   the task at hand\n-  using the trained model on previously unseen documents\n-  evaluating the predictive accuracy of the trained model\n\nWe will also demonstrate the results obtained for above tasks using the\n`scikit-learn <http://scikit-learn.sourceforge.net/>`__ package and\ncompare it to other implementations such as `nltk <http://nltk.org/>`__\nand the `Google Prediction\nAPI <http://code.google.com/apis/predict/>`__.\n"}, {"title": "Status of Unicode in Python 3", "description": "The talk will focus on the recent issues fixed in Python 3.1 and 3.2:\n\n-  Use the PEP 383 (error handler to store undecodable bytes) everywhere\n-  Encoding of the command line arguments: utf-8 on Mac OS X, locale\n   encoding on UNIX/BSD, unicode on Windows\n-  Environment variables: creation of os.environb\n-  Filenames: huge work to support the PEP 383 everywhere, creation of\n   os.fsencode() and os.fsdecode()\n-  Python source code encoding: use tokenize.detect\\_encoding() instead\n   of the locale encoding\n-  some library examples: email, ftp, ...\n-  etc.\n\nThe talk will present not only the changes in Python, but also in the C\nAPI.\n"}, {"title": "Sunday Afternoon Lightning Talks", "description": "Sunday Afternoon Lightning Talks\n\n-  00:40 Paul Smith - Japan\n-  03:10 Zed Shaw - Being Passionate\n-  05:40 Pete Fein - Twiggy: A Pythonic Logger\n-  11:15 Remy DeCausemaker - FOSS@RIT:\n-  16:15 Evgeny Fadeev - Askbot (`askbot.org <http://askbot.org/>`__)\n-  21:05 Carl Karsen - Video subtitles\n   (`universalsubtitles.org <http://universalsubtitles.org/>`__,\n   `python.mirocommunity.org <http://python.mirocommunity.org/>`__)\n-  25:45 Larry Hastings - Minuteman\n   (`www.larryhastings.com/minuteman <http://www.larryhastings.com/minuteman/>`__)\n-  31:50 Mike Pirnat - Win at parenting with Python\n   (`howoldismykid.com <http://howoldismykid.com/>`__)\n-  36:15 Barry Warsaw - flufl.enum\n   (`launchpad.net/flufl.enum <https://launchpad.net/flufl.enum>`__)\n-  40:45 Jonathan Hartley - Make a game for PyWeek\n   (`www.pyweek.org <http://www.pyweek.org/>`__)\n-  45:30 Gregory P. Smith - Protobufs for data storage and transport\n   (`code.google.com/p/protobuf <http://code.google.com/p/protobuf/>`__)\n-  50:45 Dan Bentley - 2to3 + MOE\n-  56:15 Dino Viehland - Python tools for Visual Studio\n-  1:01:00 Moshe Zadka - Bayes' Theorem for Programmers\n-  1:04:50 Brandon Rhodes - Adventure in Python\n-  1:10:20 Whit Morriss - Sharing is caring, FOSS and Python at\n   SurveyMonkey\n-  1:15:25 Kumar McMillan - Fudging it with Mock Objects\n   (`farmdev.com/projects/fudge/ <http://farmdev.com/projects/fudge/>`__)\n\n"}, {"title": "Supercomputer and Cluster Application Performance Analysis using Python", "description": "PyCon 2011: Supercomputer and Cluster Application Performance Analysis\nusing Python\n\nPresented by Daniel W. Barnette, PhD\n\nSandia National Labs analyzes high-performance computing environments to\noptimize application performance, analyze system architectures, and\nprovide design guidance for future systems. We discuss 1) generating\nperformance data across multiple systems using mini-applications, and 2)\nusing our open source Python tools Pylot/Co-Pylot to store and analyze\ndata using a MySQL database server.\n\nAbstract\n\nSandia National Laboratories analyzes large-scale, state-of-the-art high\nperformance computing environments for the Department of Energy (DOE),\nDepartment of Defense (DoD), and other government agencies. Execution\nefficiency is vital when dealing with datasets that require billions of\nelements or when running simulations that take millions of core-hours to\ncomplete.\n\nOne approach to investigating execution efficiency is to instrument our\nlarge- scale applications and platforms to generate timings and other\nperformance data. Although effective in mature computing environments,\nworking directly with large-scale applications is cumbersome, time\nconsuming, and even impossible in the early stages of computer system\nanalysis and design. Furthermore, the software and data sets of these\napplications may be restricted, limiting our abilities to collaborate.\n\nIn order to enhance our analysis capabilities far upstream from when\nlarge- scale applications can be used and when working with external\ncollaborators, we have developed a collection of mini-applications that\ncapture the essence of our much larger scientific codes, are readily\napplicable to both large and small systems, and whose run-time\ninformation can accurately reveal problems associated with execution\nefficiency.\n\nGenerating the data is only half the problem, though. We need the\nability to capture platform-relevant mini-app performance data at the\nconvenience of the testers when and where they generate the data. We\nalso need the ability to search through, filter, and visualize the\nresulting performance measurement datasets in detail to identify and\nunderstand trends and patterns.\n\nSandia National Laboratories has developed a performance analysis suite\nprimarily consisting of two tools written in Python, Pylot and Co-Pylot.\nCo- Pylot is a relatively simple interface that enables easy batch\ntransfer of performance data to a remote MySQL database server for\npersistent storage.\n\nOnce stored, the performance data is extracted, organized, filtered, and\nanalyzed using Pylot, a more functionally complex interface. Pylot is\nused to present user-selected MySQL database fields in a variety of\nviews including statistical data, bar and pie charts, Cartesian or\nlog-log or semi-log plots, reference curves for comparisons, and Kiviat\ndiagrams (also called radar charts) for multivariate datasets.\n\nA built-in storage buffer provides the ability to store, compare, and\nanalyze data from multiple databases. This capability is critical for\nstudying performance variations of a code running on a particular\narchitecture, comparing application performance across architectures, or\ncomparing multiple applications on one or more architectures. Values in\nup to four database fields at a time can be mathematically combined to\ngenerate a new temporary field to provide complete generality while\naccessing a database. Further, Pylot provides the ability to easily move\nMySQL databases and tables between computers, including the analyst\u2019s\nlaptop. This coherency of databases across multiple analysis platforms\ncan be used, for example, to avoid network latency issues associated\nwith accessing remote servers. It also serves as a distributed backup\nsystem.\n\nAn outline of this presentation follows:\n\n1. Applications at Sandia National Laboratories (6 mins)\n\n   -  Simulation size and runtime of typical large Sandia applications\n   -  Difficulties of using large-scale applications in early computer\n      system design and analysis\n   -  Mantevo mini-apps \u2013 small, self-contained programs that embody\n      essential performance characteristics of key applications.\n\n2. Gathering data (4 mins)\n\n   -  What information Mantevo mini-apps provide\n   -  Co-Pylot \u2013 getting your data into a remote database\n\n3. Supercomputer and Cluster application analysis (10 mins)\n\n   -  Pylot \u2013 demo of accessing and graphing MySQL data as a method for\n      analyzing performance\n   -  Diagnosing performance issues\n   -  Comparing different systems and different runs\n\n4. Future Extensions of Pylot (5 mins)\n\n   -  Capturing compile-time and execution info\n   -  Efforts to move parts of Pylot to the web\n\n\n"}, {"title": "Supporting All Versions of Python All The Time With Tox", "description": "Supporting All Versions of Python All The Time With Tox\n\nPresented by Kumar McMillan\n\nThis talk explains the modern techniques that every module maintainer\nneeds to know in order to support all major versions of Python. You\nprobably already have a massive test suite using a tool like nosetests,\npy.test, unittest, or a custom runner. Using the tox command line tool,\nyou'll see how to run your tests in Python 2.x, 3.x, Jython, and\nwhatever else in parallel.\n\nAbstract\n\ntox is a new tool that lets you set up isolated virtual environments to\ntest your module's deployment and compatibility with all major versions\nof Python. It's easy to install and is flexible enough that it probably\nalready supports your existing test suite. With one simple command you\ncan execute your test suite in each version of Python, you can build its\ndocumentation with Sphinx, and get a nice printout of the results. It\nhas also been designed from the ground up to integrate into continuous\nintegration (CI) tools like Hudson.\n\nUsing practical examples, this talk will show you how to toxify your\nexisting test suite and trick it out with the tox.ini config file.\nYou'll also see how to leverage Hudson's matrix build so that each code\ncheckin will run tests in all versions of Python and report detailed\nfailures.\n\nYour app supports Python 3, right? No? Tox is the best way to develop in\nparallel with 2.x and 3.x. We'll go over how to set up tox for that.\n"}, {"title": "Swarming the Web: Evolving the Perfect Config File", "description": "Swarming the Web: Evolving the Perfect Config File\n\nPresented by Kurt Grandis\n\nDeployed web applications are typically run on top of stacks of highly\nconfigurable middleware. The number of tunable parameters and their\nimpact are rarely fully explored. Using SciPy and a set of common\nPython-based web tools this session will present a new method of\nautomatically tuning a typical LAMP stack for optimal performance.\n\nAbstract\n\nDeployed web applications typically run on top of stacks of configurable\ntechnology (e.g. web servers, interface modules, software load\nbalancers, databases). Each of these components often has dozens of\ntuneable parameters. How many times are those values typically tweaked\nbefore a final set of tuned parameters are settled on? What criteria are\ntypically used to determine the optimal set?\n\nThis session presents a new method of automatically tuning a common LAMP\nstack for optimal performance. We explore a solution using some common\nPython-based automated deployment and load testing tools and dive into\nscientific computing with SciPy.\n"}, {"title": "Ten Years of Twisted", "description": "Ten Years of Twisted\n\nGlyph Lefkowitz\n\nThe Twisted event-driven networking engine is well-known in the Python\ncommunity. However, only a few of its features are widely understood.\nThis talk will be a brief conceptual introduction to Twisted, followed\nby a survey of its features, their status, and how development has been\nproceeding over the years, with a special focus on the last two years of\nsponsored development.\n\nAbstract\n\nThis talk will begin with a brief introduction to Twisted architectural\nconcepts; a description of the event loop, connections, and timers. It\nwill then segue into the many different features that Twisted offers,\nincluding command-line tools for running an out-of-the-box\nzero-configuration HTTP server, DNS server, IRC server, and SMTP server.\nThis will also present the relative maturity and stability of each of\nthese areas of the code, with a special emphasis on what level of\nexpertise a developer should have before attempting to use them.\nFinally, I will describe some of the features that have been added to\nTwisted along the way, including some new and exciting developments that\nhave been happening recently.\n"}, {"title": "Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster, and more Pythonicly", "description": "Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster,\nand more Pythonicly\n\nPresented by Jason Huggins\n\nSelenium is a popular web application testing tool for acceptance\ntesting dynamic web applications. Selenium 2.0 has a different\narchitecture that makes it leaner, meaner, and more pythonic -- for\ntesting desktop *and* mobile web (iPhone/Android) apps. This talk will\ngo into detail on how Selenium 2 works. If you like testing and Python,\nyou'll enjoy what's cooking in Selenium 2.\n\nAbstract\n\nSelenium was originally created by Jason Huggins and his team at\nThoughtWorks in 2004 as a tool for cross-browser acceptance testing of\ndynamic web apps -- apps that use JavaScript heavily on the client. Over\nthe years, the Selenium tool family has expanded to include a Firefox\nrecord and playback tool (Selenium IDE), a Remote Control server that\nallows API access from any major programming language, and a Grid server\nthat allows tests to run in parallel across many machines.\n\nDespite it's widespread industry adoption, the Selenium project is far\nfrom done. Selenium's goal is to drive any browser the same way an end\nuser would (e.g. opening pages, clicking buttons, entering text, etc.)\nwith any programming language on any OS platform. It's an ambitious\ngoal, and with a steady stream of new browsers (Chrome), new platforms\n(Android, iPhone), and new HTML5 technologies (video, canvas, offline\nstorage) to support, just keeping up is an arduous task.\n\nAstute observers will note, though, the bulk of Selenium's automation\nengine is implemented in JavaScript, which is confined by the browser's\nsecurity sandbox in which it executes JavaScript code. That security\nsandbox ultimately is at odds with Selenium's goal to drive the browser\njust as a user would. A user has no problem interacting with security\nalerts for untrusted certificates, or file upload dialog boxes, but\nSelenium can't deal with these kinds of things easily without extra\neffort.\n\nEnter WebDriver. There's a lot in common between the Selenium and\nWebDriver projects. They're both tools for automated testing of web\napplications, and both aspire to offer browser test automation from any\nlanguage on any platform. However, they do their thing in radically\ndifferent ways. Selenium uses the strategy that JavaScript is the one\ncommon tool available for automating all browsers, even though its\ncapabilities can be highly constrained. Meanwhile, WebDriver leverages\nthe strategy that acknowledges different automation strategies work best\nfor different browsers. COM works best for IE on Windows, Apple Events\nfor Safari on OS X. And Firefox, well, the best way to natively automate\nFirefox is to turn it into a telnet server. (But that's a whole other\nPyCon talk entirely!) WebDriver aims to natively drive each browser the\nbest way possible for maximum capability, then hiding those differences\nbetween lower level C and C++ APIs, and finally exposing the\nfunctionality through the appropriate C/C++ mechanism for each target\nlanguage, such as using ctypes for Python. With WebDriver's technical\napproach, anything a user can do is now possible in test automation\ncode.\n\nThis talk will go into detail explaining how Selenium and WebDriver (aka\nSelenium 2) work, comparing the strengths and weaknesses of each tool's\napproach to browser automation. The talk will then explain what Selenium\n2.0 looks like and how to use it.\n\nTalk outline:\n\n-  Description of problem space\n\n   -  More browsers\n   -  More frequent browser releases\n   -  HTML 5 - video, canvas, offline storage\n   -  The web in more places - Mobile, Chrome OS\n\n-  Description of Selenium\n-  Strengths of Selenium\n-  Description of challenges for Selenium 1\n\n   -  Javascript security sandbox\n   -  Same origin policy / cross-site scripting\n   -  OS-level popups\n   -  Speed / stability\n   -  Java as the cross-language integration point (aka Not Very\n      Pythonic, eh?)\n\n-  Description of Selenium 2 (aka WebDriver)\n-  Strengths of Selenium 2\n-  How Selenium 2 is more pythonic\n\n   -  (Lots and lots of example code goes here.)\n   -  Spoiler Alert: No Java server required!\n\n-  How to test Android apps\n-  How to test iPhone apps\n-  Selenium development roadmap\n\n"}, {"title": "Testing with mock", "description": "Testing with mock\n\nPresented by Michael Foord\n\nmock is a Python testing library. It has the goal of making mocking in\ntests brain dead simple! mock provides the Mock class and the patch\ndecorator for safely patching out the objects you are mocking in your\ntests. This talk will cover standard mocking patterns. We'll also look\nat some of the newer features in the latest release, including support\nfor mocking magic methods.\n\nAbstract\n\nmock provides a core Mock class that removes the need to create a host\nof trivial stubs throughout your test suite. After performing an action,\nyou can make assertions about which methods / attributes were used and\narguments they were called with. You can also specify return values and\nset specific attributes in the normal way.\n\n-  http://www.voidspace.org.uk/python/mock/\n-  http://pypi.python.org/pypi/mock/\n\nThe mock module also provides a patch() decorator that handles safely\npatching out the things you are mocking during your test.\n\nWe'll cover standard mocking patterns, and how mock makes them easy.\nWe'll also be looking at some of the newer features in the latest\nrelease, including the magic method support that can be used (for\nexample) for mocking out objects used as context managers.\n\nmock is designed for \"unit test style\" testing, but is used with Python\ntesting libraries like nose and py.test.\n\nThere will be some emphasis on how *not* to use mocking in testing, and\nwhy 'over mocking' is bad (and makes for brittle tests).\n"}, {"title": "The Data Structures of Python", "description": "The Data Structures of Python\n\nPresented by Alex Gaynor\n\nAny Python programmer knows about the major builtin data strcutres,\nlists, dicts, tuples, but do you always remember when you're supposed to\nuse them? Do you know about all the cool data structures hidden in the\nstandard library? This talk will be a review of the characteristics of\nthe different data structures, and a tour of idiomatic ways to use some\nof the structures in the standard library.\n\nAbstract\n\nFirst, as a note this talk borders between survey and discuss in depth.\nFor each data structure I want to cover their implementation,\nperformance characteristics, and idiomatic usage (e.g. tuples vs.\nlists), a lot of them have similar implementations so idiomatic usage\nwill dominate for some of them.\n\n-  The builtins (10 minutes)\n\n   -  lists\n   -  Ordered collections of any type of objects\n   -  Mutable\n   -  Implemented as an array of pointers\n   -  tuples\n   -  Ordered collections of any type of objects\n   -  Immutable\\*\n   -  Implemented as a fixed-length array of pointers\n   -  dicts\n   -  Unordered mapping of hashable objects to any objects\n   -  Mutable\n\n      -  Why no immutable variant\n\n   -  Implemented as an open-addressed hash table.\n   -  sets\n   -  Unordered collection of hashable objects\n   -  Mutable\n\n      -  frozenset\n\n   -  Implemented as an open-addressed hash table.\n\n-  The Standard Library (10 minutes)\n\n   -  OrderedDict\n   -  Ordered mapping of hashable objects to any objects\n   -  Mutable\n   -  Implemented as a dict with a doubly-linked list running through\n      it.\n   -  deque\n   -  Ordered collection of any type of objects\n   -  Mutable\n   -  Implemented as an unrolled, doubly-linked list\n   -  namedtuple\n   -  Ordered collection of any type of objects, *also* addressable by\n      name.\n   -  Immutable\n   -  Implemented as a tuple with extra properties\n   -  array\n   -  Like a list... but limited to \"primitve\" types.\n\n-  Performance characteristics.\n-  Writing your own (5 minutes)\n\n   -  Abstract Base Classes\n   -  Duck typing\n\n      -  Why would you want to use them!\n\n   -  What's available.\n   -  OrderedSet\n   -  An ordered collection of hashable objects\n   -  Mutable\n   -  Implemented as a set with a doubly-linked list running through it.\n\n-  Questions (5 minutes)\n\n"}, {"title": "The Development of Python and You", "description": "The Development of Python and You\n\nPresented by Brian Curtin\n\nHave an inside look at what it takes to work on CPython, from getting\nsetup with the source and navigating the bug tracker, to the best\npractices for having your work accepted. We'll find, categorize, and fix\nan issue in Python to get you started. This talk is ideal for those who\nare new to open source projects or are interested in the Python\ndevelopment process.\n\nAbstract\n\nPeople from all backgrounds, users of all platforms, and developers of\nall levels are necessary in the development of Python. From writing code\nto documentation, it takes all kinds of people to make an impact. If\nyou've used Python, we need you, and what better place to get involved\nthan at PyCon?\n\n2010 saw a rise in the number of contributors to CPython, and the PSF\nstepped in to support the efforts of those wanting to get involved. Are\nyou up for the challenge? This talk dives right into what it takes to\nget involved, covering the who, what, where, when, and why of Python\ndevelopment, going through the whole process live.\n\nAfter the conference is over, stick around with the CPython crew and\nhack away!\n"}, {"title": "The Pyramid FAQ", "description": "The Pyramid FAQ\n\nPresented by Carlos de la Guardia\n\nThe #pylons IRC channel is the most common way of giving support to\nusers of the Pyramid framework. In this talk we take away some of the\nmost often discussed topics in the channel and give detailed answers to\nthem.\n\nAbstract\n\nEvery development project has a few questions and doubts that seem to\ncome up on its support channels every now and then. The Pyramid\nframework is no exception.\n\nIn this talk, we introduce Pyramid related FAQs using the chat logs and\nproceed to discuss them in detail. Showing the logs allows us to give\nthe talk a lighter side and makes for an introduction to each topic\nbased on real user questions.\n\nTopics covered here include:\n\n-  Configuration objects.\n-  Object traversal versus URL dispatch.\n-  Context and views.\n-  Authentication and authorization.\n-  How much 'Zope stuff' is there in Pyramid and can we take it away?\n-  Examples of how Pyramid enables the Pylons philosophy of integrating\n   best of breed or preferred components.\n-  The future of Pyramid and Pylons.\n\n"}, {"title": "The Python That Wasn't", "description": "The Python That Wasn't\n\nPresented by Larry Hastings\n\nOne reason for Python's success is its restraint in adding new language\nfeatures. Only the most essential changes make it--and for every change\nthat gets accepted, many more are rejected. Come learn about proposed\nchanges to the Python language that failed--what, how, and why.\n\nAbstract\n\n-  Quick overview of the process\n\n   -  First ten years: send GvR a patch\n   -  The modern approach: python-ideas, write a PEP, produce a\n      reference implementation\n\n-  Discuss the \"prickly\" Python community\n\n   -  This is a good thing! Only the best ideas survive the python-dev\n      gauntlet!\n   -  They do this not because they're mean, but because they care so\n      much.\n   -  We must have eternal vigilance to prevent unnecessary changes!\n\n-  A survey of some changes that didn't make it\n\n   -  The switch/case statement (PEP 3103)\n   -  The \"freeze protocol\" (PEP 351)\n   -  The \"dynamic attribute access\" proposal from python-dev, 2007/02\n   -  Many more possibilities await in the rejected PEPs!\n\n-  My message to the audience\n\n   -  Start with a post to python-ideas, please!\n   -  Don't be surprised if you get a negative reaction\n   -  Don't let your fear of a negative reaction stop you from trying,\n      necessarily\n   -  Do your homework, and be your own worst critic\n\n\n"}, {"title": "Through the Side Channel: Timing and Implementation Attacks in Python", "description": "Through the Side Channel: Timing and Implementation Attacks in Python\n\nPresented by Geremy Condra\n\nPython's dynamic nature, large standard library, and concern for beauty\nover performance make it an elegant and uniquely easy to use language,\nbut they also cause some unique problems. In this talk we'll explore how\nfeatures ranging from dictionaries to duck typing can become security\nrisks, demonstrate those attacks on real Python projects, and examine\nhow you can protect yourself and your code.\n\nAbstract\n\nOver the last decade, an increasing body of evidence has accumulated\nindicating that even when a system is hardened enough to provide strong\nguarantees about its high-level behavior, implementation details and\nespecially performance properties can still provide attackers with an\neasy way in. For Python, this is especially problematic: its generally\nhigh-level view and the emphasis placed on flexibility often mean that\nit can be difficult to stop attackers from gaining a foothold, while its\ncomparatively low execution speed increases the efficacy of wide variety\nof implementation and timing attacks.\n\nTo help Pythonistas understand and cope with these problems, we've\ndivided this talk into two parts: in the first, we demonstrate the\nattacks against a series of widely-deployed Python projects with the\ngoal of both improving awareness about the issue and demonstrating\ncommon weaknesses to be avoided. The second demonstrates effective\ncountermeasures and alternative constructions with the goal of improving\ndefenders' odds of spotting and correcting these flaws in their own\ncode.\n"}, {"title": "TUF: Secure Software Updates in Python", "description": "TUF: Secure Software Updates in Python\n\nPresented by Geremy Condra\n\nFrom an attacker's point of view there are few entry points with as much\nto offer as a vulnerable software updater, yet history tells us that\nsuch vulnerabilities are common. In this talk we'll demonstrate a number\nof attacks, explain how common approaches fail to defend against them,\nand demonstrate a pure Python library (TUF) that provides both robust\nprotection and extreme ease of use.\n\nAbstract\n\nVulnerabilities in software update systems expose users to huge range of\npotential security risks, including:\n\n-  Freeze attacks,\n-  Mix-and-match attacks,\n-  Rollback attacks, and\n-  Endless data attacks\n\nIn the first part of this talk, we'll demonstrate each of these against\nreal- world software updaters and explain how commonly used\ncountermeasures fail in application. We'll then move on to the second\npart of the talk, demonstrating TUF, its internals, and the mechanisms\nit uses to additionally defend against key compromise. Finally, we'll\ndemonstrate how easy it is to integrate TUF into your application and\nits lifecycle.\n"}, {"title": "Units Need Testing Too", "description": "Units Need Testing Too\n\nPresented by Gary Bernhardt\n\nPython's long history of testing has focused primarily on integration-\nand system-level tests: slow-running tests executing lots of code. These\nare a great start, but many of them can be transformed into unit-level\ntests. True unit tests are orders of magnitude faster (about 1ms each),\nproviding quicker feedback and better failure localization. We'll look\nat why and how to write them.\n\nAbstract\n\nPython has a wonderful legacy in testing: PyUnit has been in the\nstandard library since March, 2001, and it was already a year old by\nthen. We adopted browser driving quickly, and we do it at huge scale\nwith great test parallelization infrastructure.\n\nBig tests aren't everything, though. In the Python world, true unit\ntests are somewhat rare, and even most tests written with the unittest\nlibrary are integration tests. These tests are slow to execute and don't\nlocalize failure as well as smaller, focused tests. They leave us with\ntwo options: either run them rarely, sacrificing feedback, or run them\noften, sacrificing speed.\n\nWriting true unit tests removes that particular trade-off. When your\ntests execute in a millisecond each, you can afford to run a thousand of\nthem every time you save a source file. This talk will discuss what unit\ntests really are, why they matter, and how to write them in Python.\n"}, {"title": "Useful Namespaces: Context Managers and Decorators", "description": "Useful Namespaces: Context Managers and Decorators\n\nPresented by Jack Diederich\n\nPython has two useful conventions for \"I mean it, but only here\" and you\ncan say it with Context Managers and Decorators. Both give you the power\nto define a push/pop of a resource for a set period inside a namespace,\nbe it a function or a level of indentation. This talk is a list of\npatterns that are implemented by one or the other (including some clever\nfunctions that are both).\n\nAbstract\n\n-  Decorators, formal definition.\n-  Context Managers, formal definition.\n-  Informal definition: both have the opportunity to do and then undo. -\n   very similar to C++ RIIA \"Resource Acquisition Is Initialization.\" -\n   Context Managers were designed to do that but decorators are\n   frequently just as good.\n-  Which one to use use when is all about namespaces. - Context Managers\n   manipulate at the block level. - Function Decorators manipulate the\n   function level. - Class Decorators manipulate at the class level.\n-  Recipes on writing decorators and context managers - Familiar\n   examples from Django and Mock.\n\n"}, {"title": "Using Blender's new BPY Python API", "description": "Since 2.5, the API has become more pythonic and self-descriptive.\nBlender's UI can show you the Python equivalent for nearly every user\naction and includes a full datablock exploration tool. Users will be\ntaught how to use so they can quickly adapt to their appropriate needs\nwith a little Blender experience and no previous BPY experience.\n\nThere will be a brief Blender overview, an introduction to the API and\nhow to use it, as well as / along with an overview of some of the\npresenter's own tools / use cases. Some other popular 3rd party Python\ntools will also be shown as an example.\n\nIf there is time, a brief demo of the Blender Game Engine will also be\ngiven, though that is a separate API.\n"}, {"title": "Using Coroutines to Create Efficient, High-Concurrency Web Applications", "description": "Using Coroutines to Create Efficient, High-Concurrency Web Applications\n\nPresented by Matt Spitz\n\nCreating high-concurrency python web applications is inherently\ndifficult for a variety of reasons. In this talk, I'll discuss the\nvarious iterations of application server paradigms we've used at meebo,\nthe advantages/disadvantages of each approach, and why we've settled on\na coroutine-based WSGI setup to handle our high-concurrency web\napplications going forward.\n\nAbstract\n\nThere are a number of ways in which to create a web application in\npython. Some examples include a straight-up CGI scripts that run anew\nwith each request, preforked Apache workers that each handle multiple\nrequests, and using an asynchronous web framework like Twisted.\n\nAt meebo, we've settled on using gunicorn, a lightweight WSGI server,\nwhich supports gevent, a coroutine-based network library for python.\nGevent monkeypatches python's system modules to make network requests\nasynchronous using an event loop based on libevent. This trick allows\nthe developer to use a simple blocking CGI as a non-blocking web\napplication that can handle many concurrent requests.\n\nI'll discuss our iteration process through these approaches to building\nweb applications, why we ended up choosing gunicorn+gevent, the\nchallenges this new framework presents, and how we've dealt with them.\n"}, {"title": "Using Python 3 to Build a Cloud Computing Service for my Superboard II", "description": "Using Python 3 to Build a Cloud Computing Service for my Superboard II\n\nPresented by David Beazley\n\nThe OSI Superboard II was the computer on which I first learned to\nprogram back in 1979. Python is why programming remains fun today. In\nthis tale of old meets new, I describe how I have used Python 3 to\ncreate a cloud computing service for my still-working Superboard--a\nproblem complicated by it only having 8Kb of RAM and 300-baud cassette\ntape audio ports for I/O.\n\nAbstract\n\nPython 3, what good is it? Cloud computing? Bah! In this talk, I\ndescribe how I have used Python 3 to build a distributed cloud-computing\nservice for my Superboard II system. Originally built in 1978, the\nSuperboard is an obvious candidate for cloud computing due to its\nextremely constrained memory (8Kb), slow processor (a 1Mhz 6502),\ncrippled I/O (300 baud over audio), and retro programming environment\n(Microsoft Basic 1.0). The only question is how to do it?\n\nTo answer that question, this talk consist of two main parts. In the\nfirst part, I discuss the problem of building a communications stack\nbetween the Superboard and a Mac using nothing but audio\nline-in/line-out ports--a problem involving a tricky I/O handling,\nreal-time audio signal processing, and the creation of a data-link layer\ncommunication protocol. In the second part, I discuss the creation of a\ndistributed cloud-computing service and related topics including\nmessaging systems, key-value stores, map-reduce, etc.\n\nThe primary implementation language for all of this work is Python 3.\nThroughout the talk, I will mention interesting Python 3 programming\nidioms along with pros and cons. I'll conclude by summarizing my\nexperience trying to build a significant project entirely in Python 3.\n"}, {"title": "web2py secrets tutorial (1/2)", "description": "web2py secrets\n\nPresented by Massimo Di Pierro\n\nWe will provide an introduction to web2py with particular focus on its\ndesign objectives, its differences when compared to other web\nframeworks, and some of the most recently added features (components,\nplugins, openid/oauth integration).\n\nAbstract\n\nWeb2py is a framework for rapid web application development of secure\ndatabase-driven web applications. In this tutorial we will provide a\nbrief introduction to web2py, the web based IDE, its internal design,\nand its internal file organization. We will explain the motivations\nbehind some of its most controversial design goals. We will also discuss\nin some detail its Ajax capabilities by using web2py components and\nplugins for modular design of rich web interfaces.\n\nThis will be a very concentrated version (10%) of a course (CSC438) on\nweb frameworks the author teaches at DePaul University. The course has\nbeen taught 3 times and the last time counted more than 30 students.\n"}, {"title": "What would you do with an ast?", "description": "What would you do with an ast?\n\nPresented by Matthew J Desmarais\n\nThe ast module in the Python (>= 2.6) standard library provides a\nrepresentation of python code in a python data structure. We'll begin\nwith a discussion about what an abstract syntax tree is and why it's\nuseful. We can then talk about what's available in the ast module, how\nit works, and how you can use it. This will be a practical session built\naround examples examining and modifying live ASTs.\n\nAbstract\n\nI would prefer to make this a 45 minute talk with examination of code\nsamples.\n\nPython 2.6 introduced a new module in the standard library, ast. The\nfirst line of the ast documentation is, \"The ast module helps Python\napplications to process trees of the Python abstract syntax grammar.\"\nWhat this means is not obvious and many, if not most, python programmers\nwon't know what this means. I will begin by talking about the idea of\nsyntax tree and how it fits into the python execution lifecycle. I will\nalso talk about the contents of the ast module. I will cover the\navailable ast.Node subclasses and the provided helper functions,\nincluding the NodeVisitor and NodeTransformer. I will finish by talking\nabout how the ast module can be used to analyze Python code and how it\ncan be used to generate new code.\n\nI expect the time to break down roughly like this:\n\nIntroduction ( 5m )\n\n-  Capacitor joke\n-  What is an abstract syntax tree?\n-  How they are used by the Python interpreter\n\nThe contents of the ast module (20 m)\n\n-  The node subclasses and the ast ( 10m )\n\n   -  How you get an ast.\n   -  code examples\n   -  ast.stmt vs. ast.expr\n   -  peculiarities\n   -  code examples\n\n      -  elif as syntactic sugar for \"if: else: if:\"\n      -  comparison operators\n\n   -  Why this is useful.\n   -  the ast is the \"truth\" of the program\n\n      -  code examples\n      -  tricky code\n\n-  The ast module helpers ( 10m )\n\n   -  visitor pattern\n   -  NodeVisitor\n   -  NodeTransformer\n   -  code examples\n\nWhat you do with an ast ( 15m )\n\n-  Walking an ast\n\n   -  code examples\n   -  a simple visitor to gather variables by scope\n\n-  Creating/Modifying an ast\n\n   -  code examples\n   -  rearrange imports transformer\n   -  naive \"rename all instances\" transformer\n   -  naive macro expansion transformer\n\nConclusion ( 5m )\n\n-  Practical Applications\n\n   -  existing projects\n   -  visitors\n\n      -  checkers (pylint, pyflakes)\n\n   -  transformers\n\n      -  refactoring tools (rope)\n\n-  When is it a good idea to use ast?\n\n"}, {"title": "Why is Python slow and how PyPy can help?", "description": "Why is Python slow and how PyPy can help?\n\nPresented by Maciej Fijalkowski and Alex Gaynor\n\nPyPy is a virtual machine for Python, featuring an advanced just in time\ncompiler, which can deliver exceptional performance. This talk is going\nto be a deep dive into what exactly makes Python such a hard language to\noptimize, how PyPy is organized, and what optimizations our JIT can do\n(and what it can't do) for your code.\n\nAbstract\n\nThe talk will detail how a python interpreter works internally and why\nsome operations are costly. We'll go through several python features,\nhow they work, why they're slow in CPython and how we're fixing it.\n\nThe list of mentioned features is not exhaustive, however we will try to\nfocus at least on the following:\n\n-  Dynamic language - In Python code we have no known types, like a\n   statically typed language. Even operations like \"a + b\" can do\n   anything, unless we know more about the code, and the types it is\n   operating on.\n\n-  Frame introspection - Frame objects need to be allocated for every\n   function call, and all local variables are stored on the frame, and\n   must be accessible from further down the call stack.\n\nPyPy uses a novel approach called \"virtualizables\" which makes it\npossible to avoid frame allocation in most common cases.\n\n-  Object model - All user defined Python objects have a dictionary\n   which stores their attributes, as does every type. When Python does\n   an attribute lookup this requires at least two dictionary lookups.\n\nIn PyPy we use an approach similar to the one used by V8 with hidden\nclasses (except more PyPy specific) called map dictionaries and other\noptimizations.\n\n-  FFI calls - Calling C from Python is costly and hard to optimize. In\n   PyPy we expose C APIs to Python code via ctypes. This part explains\n   how we can optimize ctypes calls.\n\n-  array module - Users of CPython's array module probably know it can\n   save them quite a bit of memory, however it's also slower than using\n   a list, due to the overhead of boxing and unboxing on every\n   operations. Here we will tie everything together and describe how the\n   array module is much faster with PyPy's JIT, combining our\n   optimizations to: unbox values, remove the dynamicism within traces,\n   and deliver great performance.\n\n\n"}, {"title": "Writing Command-Line Tools using IronPython and Visual Studios", "description": "Learn how cool it is to write command-line tools using IronPython and\nVisual Studios. In this talk we cover why command-lines tools are\nimportant for .NET shops, how to write one, and finally, how to\ndistribute it as a standalone .exe.\n"}, {"title": "Writing great documentation", "description": "Writing great documentation\n\nPresented by Jacob Kaplan-Moss\n\nDjango\u2019s among the best documented open source projects; I'm intensely\nproud of that accomplishment. If any part of Django endures, I hope\nit\u2019ll be a \u201cdocumentation culture\u201d \u2014 an ethos that values great,\nwell-written documentation. To that end, this talk looks at the tools,\ntips, and techniques I\u2019ve learned over the years. I hope it helps you\nwrite great documentation, too.\n\nAbstract\n\nThis talk looks at tips, tools, and techniques you can use to produce\ngreat technical documentation.\n\nIt's split roughly into two parts:\n\n-  Part 1: technique. We'll look at the structural elements that make\n   documentation useful: tutorials, high-level overviews, topical\n   guides, reference material, FAQs, and more. We'll cover some tips on\n   how to get documentation done, and community processes for handling\n   documentation in teams (open or not). We'll also talk about what I'm\n   calling \"Documentation Driven Development\" - a technique riffing off\n   Test Driven Development that calls for writing documentation before\n   code.\n-  Part 2: tools. Over the last couple of years a few fantastic tools\n   have sprung up that ease the technical aspects of writing\n   documentation. We'll talk about which tools are suitable for which\n   uses, and look at a handful of cool tools including\n   `Sphinx <http://sphinx.pocoo.org/>`__,\n   `Epydoc <http://epydoc.sourceforge.net/>`__, and\n   http://fitzgen.github.com/pycco/.\n\nThis talk is mostly targeted towards those documenting libraries or\nframeworks intended for use by other developers, but much of it probably\napplies to any sort of technical documentation.\n"}, {"title": "ZODB: A Python Persistence System", "description": "ZODB: A Python Persistence System\n\nPresented by Chris McDonough\n\n`ZODB <http://zodb.org/>`__ is a transactional persistence system\nwritten entirely in Python. This talk will serve as an introduction to\nusing the ZODB in a Python application.\n\nAbstract\n\nThis talk will provide a high-level overview of ZODB useful to a novice\nor intermediate Python programmer. The talk will cover the following\ntopics:\n\n-  What Is ZODB?\n-  Brief history\n-  ZODB vs. relational databases\n-  ZODB vs. NoSQL databases\n-  ZODB vs. pickle\n-  Using ZODB\n-  Creating a Persistent Object\n-  Storing a Persistent Object\n-  Retrieving a Persistent Object\n-  Modifying a Persistent Object\n-  Saving Changes\n-  Folders\n-  Aspects\n-  Pluggable storages\n-  Scaling across multiple clients\n-  Caching\n-  Indexing and Searching\n-  repoze.catalog\n\nAt the end of the talk, an attendee should have a basic understanding of\nhow to create an application which depends on ZODB persistence.\n"}, {"title": "Python 3: the next generation is here already", "description": "Python 3: the next generation is here already\n\nPresented by wesley chun\n\nThis talk is about the evolution of Python. We will discuss Python 2 and\nPython 3: what the compatibility issues are, what the main differences\nare, and also talk about migration, Python 2.6/2.7, and other transition\ntools.\n\nAbstract\n\nPython is currently at a crossroads: Python 2 has taken it from a quiet\nword- of-mouth language to primetime, with many companies around the\nworld using it and an ever-increasing global marketshare of the\nprogramming world. But now comes Python 3, the first version of the\nlanguage that is not backwards compatible with previous releases.\n\nWhat does this mean? Are all my Python programs going to break? Will I\nhave to rewrite everything? How much time do I have? When is Python 2\ngoing to be EOL'd? Is the language undergoing a complete rewrite and\nwill I even recognize it? What are the changes between Python 2 and 3\nanyway? Also, the next generation is already here, as Python 3 is over\ntwo years old now. What has been ported so far, and what is its current\nstatus? Are migration plans or transition tools available? If I want to\nstart learning Python, should I do Python 2 or Python 3? Are all Python\n2 books obsolete?\n\nWe will attempt to answer all of these questions and more. Join us!\n\nOUTLINE/TOPICS\n\n-  Python 2 vs. Python 3\n-  Introduction to Python 3\n-  Backwards Compatibility\n-  Generational Changes\n-  Key Differences\n-  Role of Remaining Python 2.x releases\n-  Transition & Migration Plans & Tools\n-  Futures\n\n"}, {"title": "Running Django Apps on Google App Engine", "description": "Running Django Apps on Google App Engine\n\nPresented by wesley chun\n\nIn the past, Django users couldn't run apps unmodified on Google App\nEngine. Some tools helped with integration but required you to change\nyour data models. Django-nonrel removes this requirement letting you run\nnative Django apps on App Engine with only config changes if you bear in\nmind its restrictions like no JOINs. In this talk, we'll discuss\nDjango-nonrel & porting App Engine apps to Django.\n\nAbstract\n\nPreviously, Django users could not get their apps to run unmodified on\nGoogle App Engine, the cloud application-hosting platform. Older tools\nlike \"the Helper\" and \"the Patch\" required a change to the data models\nas well as perhaps integrating additional tools into the application\nsource tree. The creators of the Patch realized how cumbersome this is\nand created a replacement for all of these older tools.\n\nDjango-nonrel allows users to run pure Django apps on App Engine with\nonly minor configuration changes. It basically enables Django's ORM to\noperate on top of non-relational databases (in addition to preserving\nits ability to support standard relational DBs), one of which is Google\nApp Engine's Datastore. (MongoDB is another.)\n\nWhat this means that current Django users can now use their existing\nknowledge to write apps for App Engine as long as they keep App Engine\nrestrictions in mind, e.g., no JOINs. Projects written in this manner\nwill work without any modifications other than changing the\nconfiguration settings. On the other side, App Engine developers now\nhave an alternative to the '\"webapp\" framework that comes with its SDK.\nYou can now leverage the power of a full web framework like Django and\nstill enjoy the flexibility and scalability of App Engine. In this talk,\nwe'll discuss Django-nonrel, and how to port App Engine apps from webapp\nto pure Django to run on App Engine using Django-nonrel.\n"}, {"title": "1. PSF Sprints - Supporting the community one sprint at at time", "description": "The PSF Sprint committee offers up to $300 USD to groups that organize\nsprint efforts on open source projects in the Python world. From working\non Python itself, to the vast array of projects in the community, we\ntake great interest in keeping you interested. We're also interested in\nbuying you dinner, providing a place to work at, and buying t-shirts or\nother goodies for sprint attendees.\n\n-  Committee Goals\n\n   -  Fund existing sprint groups\n   -  Get new groups interested in sprinting\n   -  Generate interest in contribution to Python projects\n   -  Advertise sprint events, including those at conferences\n   -  Have fun, learn, and contribute with other community members\n\n-  How We Operate\n\n   -  Receive applications, vote, advertise, reimburse after event\n\n-  Past Sponsorships\n\n   -  packaging, Genshi, matplotlib\n\n-  Upcoming Sponsorships\n\n   -  PyCon (will update closer to conference)\n\n-  How To Receive Funding\n\n   -  How to apply, how to be reimbursed\n\n\n"}, {"title": "10. FOSS@RIT: Python-Powered Student Engagement", "description": ""}, {"title": "11. A Startup Junkie's Journey to Python via Java, C#, Ruby and Scala", "description": ""}, {"title": "12. Accessibility and You", "description": ""}, {"title": "14. preshrunk-cotton: Windows Help Files for Lazy People", "description": ""}, {"title": "18. Bump Pumps Up with Diesel", "description": ""}, {"title": "19. Millions of Genes with Python and Jython", "description": ""}, {"title": "2. Twisted Matrix High Scores", "description": ""}, {"title": "22. Quantitative Finance Research with Python: Statistical arbitrage.", "description": ""}, {"title": "23. Round the world with a million objects", "description": ""}, {"title": "24. Indico - A Scientific Collaboration Platform", "description": "Indico is an open source content management system developed at the\nEuropean Organization for Nuclear Research (CERN) and currently used in\nmore than 90 scientific institutions world-wide. Indico provides a\nmultitude of features to conference/meeting organizers, merging the\ncapabilities of a powerful CMS with a calendaring layer, thus allowing\nusers to keep track of past and future meetings, and to quickly access\nall the resources concerning a particular event. Other very useful\nfeatures include:\n\n-  Conference registration & e-payment integration;\n-  Paper/abstract reviewing;\n-  Integration with chat (XMPP) systems;\n-  Integration with videoconferencing/webcasting applications;\n-  Room booking module;\n-  Drag&drop; timetable editing;\n-  Event reminders & alarms (scheduler);\n-  Extensible via plugin subsystem;\n\nAt CERN alone, Indico serves a community of around 10.000 users, with\n~15.000 different visitors per day (~1 M hits). It hosts more than\n150.000 events, made of around 700.000 individual contributions/talks\nand ~900.000 files. It has become part of \"CERN speech\" - \"look it up on\nIndico\" is almost as obvious as \"Google it\" around here.\n\nBut Indico is as well an indispensable tool in the realm of High Energy\nPhysics, going far beyond the borders of this organization. Institutions\nsuch as Fermilab, MIT and IHEP (China) are using it for their own\nmeetings/conferences.\n\nThe system is fully written in Python and JavaScript, using ZODB as its\ndatabase back-end. It is a perfect example of how Python-related\ntechnologies can be used to build powerful web applications that empower\nscientific research and collaboration.\n"}, {"title": "25. An Overview of the Python African Computational Science and Engineering Tour Project ", "description": ""}, {"title": "26. Data analysis and visualization in atmospheric sciences", "description": ""}, {"title": "27. Reading and writing spatial data for the non-spatial programmer", "description": ""}, {"title": "29. Keeping the Chandra satellite cool with Python and Xija", "description": ""}, {"title": "3. Hacking for Humanity with Python: The CuiBono political app", "description": ""}, {"title": "31. ProofCheck: Checking Mathematical Proofs written in TeX ", "description": ""}, {"title": "32. Python in Computer-Aided Drug Discovery ", "description": ""}, {"title": "34. CrossCompute is a web platform where users can run algorithms", "description": "CrossCompute is a site where you can run mathematical models and\nalgorithms submitted by researchers. If you are a researcher and you\nsubmit your algorithm, you'll get paid each time it runs. We'll send you\na URL where users can run your model on their data as many times as they\nwant. More users mean more feedback that you can use to improve your\nmodel.\n\nHere is an example: Suppose a mathematician in the US develops an\noperations research model for placing schools in a community given the\nlocations of existing schools and households, and decides to charge ten\ncents each time it runs. Then a business owner in Ghana runs the model\nover the internet to place stores in his district, and saves money\nbecause he didn't have to hire a consulting firm or buy a software\npackage. Meanwhile, the mathematician in the US uses the algorithm\nrevenue to fund research to improve the model.\n\nNow is an exciting time to get involved in data analytics for your city\nor local government. Governments need to prioritize limited resources\nlike emergency response firefighters, police officers and city\ninspectors. I urge you to contact your local Mayor's office to learn\nabout the challenges they are facing. Then, create a tool to make their\nlife easier. You can send the tool to support@crosscompute.com where it\nwill join a growing collection of analytics for the public good. You\nwill get the credit for the algorithm, the revenue and users from around\nthe world.\n"}, {"title": "35. PyMC: Markov chain Monte Carlo in Python", "description": ""}, {"title": "36. Using Python for robotics with Aldebaran's humanoid robot NAO.", "description": ""}, {"title": "37. Building a Robot that Can Play Angry Birds on a Smartphone (or Robots are the Future of Testing)", "description": ""}, {"title": "38. ABC: the mother of Python", "description": ""}, {"title": "39. Python under PyCScope", "description": ""}, {"title": "4. How the Tor Project uses Python", "description": ""}, {"title": "40. MediaGoblin: The Road to Federation", "description": "From just a gleam in founder Chris Webber's eye to a full tilt media\nhosting project supporting photos, HTML5 video, and more, the road to\nfederation has been a wild ride so far. We owe a lot to the huge\ncommunity of fellow federators whose work on the ostaus library enabled\nus to start in the middle with our own not-quite-finished spin, Kuneco.\nKudos to the GNU project for getting excited about the web with us.\nWe're also thankful for the massive outpouring of project love that\nchanneled itself through transifex and has made Media Goblin\nglobal-ready even though it isn't finished. Ever thought about switching\ndatabases midstream? Come talk to us, Mongo to SQL wasn't as bad as we'd\nbeen expecting. We'll also tell you all about our minimalist wsgi\nun-framework design and how we think it's working compared to Django or\neven Pylons/Pyramid.\n\nWhat's still left do? Smoother interoperations with allied projects like\nStatusNet and Diaspora. Support for more media types like 3D modelling\nand presentations. World domination... in a friendly way! Swing by if\nyou're looking for a new project to get involved with or just want\ndetails to take back to your own.\n"}, {"title": "41. Git 'er Done Fast! Developing Apps for the Cloud with Django and PyMongo in 30 Minutes or Less", "description": ""}, {"title": "42. The Future of Python Packaging", "description": ""}, {"title": "43. What is IPv6 and why does my website I need it", "description": "**Background**\n\nOn February 3rd, 2011 the world ran out of the IPv4 addresses that we\nknow and love. The Internet continues to work thanks to technologies\nlike NAT that enable private IP addresses like 192.168.1.1 and 10.0.0.1\nto be reused across organizations. However, even these large blocks of\nprivate IP addresses are not large enough for large ISPs like Comcast in\nthe United States that give several IP addresses to each customer (ex.\ncable set top box, voip, cable modem).\n\nTo continue adding new customers large ISPs have begun deploying two\ntechnologies: IPv6 and large scale NAT.\n\nLarge scale NAT is a way for large ISPs to put several of their\ncustomers behind a single public IP address. This means that the one\npublic IPv4 address you used to have to yourself is now shared by you\nand several of your neighbors. It means that as a website owner it is\nnow more difficult to discern anything useful from the IP addresses\nvisiting your website.\n\nIPv6 solves the address exhaustion problem by moving from approximately\n4 billion IP addresses to 3.4\u00d710^38 IP addresses; more than the number\nof atoms on Earth. With plenty of IP addresses ISPs can now return to\ngiving out unique, public IP addresses to each customer.\n\nMany mobile operators are already beginning to deploy IPv6. In 2009\nVerizon issued a mandate that any LTE devices on its network support\nIPv6 with IPv4 support being listed as optional [1]. An IPv6-only device\nwill still need access to the IPv4 Internet, however, IPv6 and IPv4 are\nnot compatible. Providers like Verizon are putting in place protocol\ntranslation devices that inspect Internet traffic going through them and\nproxy IPv4-only websites to their IPv6 customers. While this may sound\nwonderful it means that mobile providers are inspecting and rewriting\nyour packets. Making things more interesting is that this won't work\nsecurely over SSL. The solution is to enable IPv6 on your website so\nthat IPv6-only hosts can directly access your content.\n\n**Joining the IPv6 bandwagon**\n\nAmazon's Elastic Load Balancer supports IPv6 and is already enabled in\nall east coast availability zones [2]. If you're already using ELB\nenabling IPv6 on your website is as easy as making a single DNS change.\nOr so we'd hope, there are still some impediments to a world where your\nsite runs seamlessly on IPv6.\n\n**The user with broken IPv6**\n\nThere are people in the world with broken or inferior IPv6 connectivity\nand a web browser or operating system that attempt to use IPv6 anyway.\nWhat this means is that if you turn on IPv6 on your website you have the\npotential to cut off those users from your site. In this talk I'll\ndiscuss methods for measuring and analyzing this loss before your\nbroadly enable IPv6 so that you can make an informed decision about when\nand how to flip the switch.\n\n**Geo IP**\n\nGeo IP libraries today are still coming to terms with IPv6. One vendor\nin particular is working on IPv6 but only provides limited support in\ntheir free libraries and not yet in their python driver. In their\ncommercial library, the one generally considered better, they do not\nsupport IPv6 yet due to lack of data [3].\n\n**IPv6 without Amazon**\n\nAt Eventbrite we do development inside of Virtual Box virtual machines.\nIn this talk I'll discuss how we configure IPv6 on both the host and\nguest operating systems so that we can test IPv6 before we push to\nAmazon.\n\n**IP Address Validation**\n\nIf you accept IP addresses from end users check your IP address\nvalidation routines (Django has support, see GenericIPAddressField).\n\n**References**\n\n-  [1]\n   [http://www.circleid.com/posts/20090609\\_verizon\\_mandates\\_ipv6\\_support\\_for\\_next\\_gen\\_cell\\_phones/](http://www.circleid.com/posts/20090609\\_verizon\\_mandates\\_ipv6\\_support\\_for\\_next\\_gen\\_cell\\_phones/)\n-  [2]\n   [http://www.allthingsdistributed.com/2011/05/aws\\_ipv6.html](http://www.allthingsdistributed.com/2011/05/aws\\_ipv6.html)\n-  [3]\n   [http://www.maxmind.com/app/ipv6](http://www.maxmind.com/app/ipv6)\n\n"}, {"title": "46. HTSQL : a navigational query language for relational databases", "description": ""}, {"title": "48. Advanced Parallel Primitives in SPM.Python for Data and Graph Analytics", "description": ""}, {"title": "7. The Artemis Project: Promoting Computer Science to High School Girls", "description": ""}, {"title": "8. BoolPy: Using Python for Symbolic Boolean Algebra Simplification", "description": ""}, {"title": "9. Developing Humanitarian Packages with Sugar and Python", "description": ""}, {"title": "A Gentle Introduction to GIS", "description": ""}, {"title": "A Noob Speaks to Noobs: Your First Site in the Cloud", "description": ""}, {"title": "A resume-based WSGI Load Balancer", "description": ""}, {"title": "Advanced Celery", "description": ""}, {"title": "Advanced Security Topics", "description": ""}, {"title": "Apache Cassandra and Python", "description": ""}, {"title": "Bayesian statistics made (as) simple (as possible)", "description": ""}, {"title": "Build reliable, traceable, distributed systems with ZeroMQ", "description": ""}, {"title": "Building a Kinect game with Python", "description": ""}, {"title": "Building A Python-Based Search Engine", "description": ""}, {"title": "Building a Robot that Can Play Angry Birds on a Smartphone, (or Robots are the Future of Testing)", "description": ""}, {"title": "Cache Rules Everything Around Me", "description": ""}, {"title": "Certainty in an Uncertain World: Gaining Confidence through Security Testing", "description": ""}, {"title": "Code Generation in Python: Dismantling Jinja", "description": ""}, {"title": "Coroutines, event loops, and the history of Python generators", "description": ""}, {"title": "Cross-Compiling Python & C Extensions for Embedded Systems", "description": ""}, {"title": "Data analysis in Python with pandas ", "description": ""}, {"title": "Data, Design, Meaning", "description": ""}, {"title": "Decorators and Context Managers", "description": ""}, {"title": "Deep Freeze: building better stand-alone apps with Python", "description": ""}, {"title": "Designing Embedded Systems with Linux and Python", "description": ""}, {"title": "DevOps for Python: Doing More With Less", "description": ""}, {"title": "Diversity in practice: How the Boston Python User Group grew to 1700 people and over 15% women", "description": ""}, {"title": "Django Form Processing Deep Dive ", "description": ""}, {"title": "Django in Depth", "description": ""}, {"title": "Django Templating: More Than Just Blocks", "description": ""}, {"title": "Documenting Your Project With Sphinx", "description": ""}, {"title": "Extracting musical information from sound", "description": ""}, {"title": "Fake It Til You Make It: Unit Testing Patterns With Mocks and Fakes", "description": ""}, {"title": "Fast Test, Slow Test", "description": ""}, {"title": "Faster Python Programs through Optimization", "description": ""}, {"title": "Flexing SQLAlchemy's Relational Power", "description": ""}, {"title": "Getting the Most Out of Python Imports", "description": ""}, {"title": "Graph Processing in Python", "description": ""}, {"title": "Hand Coded Applications with SQLAlchemy", "description": ""}, {"title": "High Performance Python I", "description": ""}, {"title": "High Performance Python II", "description": ""}, {"title": "How CherryPy supports Python 2 and 3", "description": ""}, {"title": "How the PyPy JIT works", "description": ""}, {"title": "How to get the most out of your PyPy", "description": ""}, {"title": "How to make your websites more accessible", "description": ""}, {"title": "Improving Documentation with \"Beginner's Mind\" (or: Fixing the Django Tutorial)", "description": ""}, {"title": "Interfaces and Python", "description": ""}, {"title": "Introduction and Welcome", "description": ""}, {"title": "Introduction to Django", "description": ""}, {"title": "Introduction to Game Development", "description": ""}, {"title": "Introduction to Interactive Predictive Analytics in Python with scikit-learn", "description": ""}, {"title": "Introduction to Metaclasses", "description": ""}, {"title": "Introduction to PDB", "description": ""}, {"title": "Introspecting Running Python Processes", "description": ""}, {"title": "IPython in-depth: high-productivity interactive and parallel python", "description": ""}, {"title": "IPython: Python at your fingertips", "description": ""}, {"title": "David Beazley Keynote: Tinkering with PyPy", "description": ""}, {"title": "Keynote: Guido Van Rossum", "description": ""}, {"title": "Keynote: Paul Graham, YCombinator", "description": ""}, {"title": "Keynote: Stormy Peters, Mozilla Corporation", "description": ""}, {"title": "Mailman 3", "description": ""}, {"title": "Make Sure Your Programs Crash", "description": ""}, {"title": "Making interactive maps for the web", "description": ""}, {"title": "Making Jython Faster and Better", "description": ""}, {"title": "Making maps with Python", "description": ""}, {"title": "Militarizing Your Backyard with Python: Computer Vision and the Squirrel Hordes", "description": ""}, {"title": "MongoDB and Python", "description": ""}, {"title": "More than just a pretty web framework, the Tornado IOLoop", "description": ""}, {"title": "Non-Profit Centers of FLOSS Development", "description": ""}, {"title": "Optimize Performance and Scalability with Parallelism and Concurrency", "description": ""}, {"title": "pandas: Powerful data analysis tools for Python", "description": ""}, {"title": "Parsing Horrible Things with Python", "description": ""}, {"title": "Parsing sentences with the OTHER natural language tool: LinkGrammar", "description": ""}, {"title": "Patterns for building large Pyramid applications", "description": ""}, {"title": "PBS KIDS: Building a login system for kids and teens in Python", "description": ""}, {"title": "Permission or Forgiveness?", "description": ""}, {"title": "Plotting with matplotlib", "description": ""}, {"title": "Polyglot Programming with Python: Python/Scala Interop", "description": ""}, {"title": "Practical Machine Learning in Python", "description": ""}, {"title": "Practicing Continuous Deployment", "description": ""}, {"title": "Pragmatic Unicode, or, How do I stop the pain?", "description": ""}, {"title": "Project Gado: Building an Open Archival Scanning Robot Using Python and Arduino", "description": ""}, {"title": "Putting Python in PostgreSQL", "description": ""}, {"title": "pytest - rapid and simple testing with Python", "description": ""}, {"title": "Python and HDF5 - Fast Storage for Large Data", "description": ""}, {"title": "Python Epiphanies", "description": ""}, {"title": "Python for data lovers: explore it, analyze it, map it", "description": ""}, {"title": "Python for makers", "description": ""}, {"title": "Python, Linkers, and Virtual Memory", "description": ""}, {"title": "Python Meets the Arduino", "description": ""}, {"title": "Python Metaprogramming for Mad Scientists and Evil Geniuses", "description": ""}, {"title": "Python Software Foundation Chairman's Address", "description": ""}, {"title": "RESTful APIs With Tastypie", "description": ""}, {"title": "Robot NAO", "description": ""}, {"title": "Sage: Open Source Math in Python", "description": ""}, {"title": "Saturday Evening Lightning talks (60 minutes)", "description": ""}, {"title": "Saturday Morning Lightning talks", "description": ""}, {"title": "Scalability at YouTube", "description": ""}, {"title": "Sharing is Caring: Posting to the Python Package Index", "description": ""}, {"title": "Sketching a Better Product", "description": ""}, {"title": "Social Network Analysis with Python", "description": ""}, {"title": "Spatial data and web mapping with Python", "description": ""}, {"title": "Speedily Practical Large-Scale Tests", "description": ""}, {"title": "SQL for Python Developers", "description": ""}, {"title": "Static analysis of Python extension modules using GCC", "description": ""}, {"title": "Stepping Through CPython", "description": ""}, {"title": "Stop Mocking, Start Testing", "description": ""}, {"title": "Stop Writing Classes", "description": ""}, {"title": "Storing, manipulating and visualizing timeseries using open source packages in Python", "description": ""}, {"title": "Storm: the Hadoop of Realtime Stream Processing", "description": ""}, {"title": "Sunday Afternoon Lightning talks (90 minutes)", "description": ""}, {"title": "Sunday Morning Lightning talks", "description": ""}, {"title": "Testing and Django", "description": ""}, {"title": "The Art of Subclassing", "description": ""}, {"title": "The Email Package: Past, Present, and Future", "description": ""}, {"title": "The Journey to Give Every Scientist a Supercomputer", "description": ""}, {"title": "The Pyed Piper: A Modern Python Alternative to awk, sed and Other Unix Text Manipulation Utilities ", "description": ""}, {"title": "Through The Ether And Back Again: What Happens To A Packet When You Send It", "description": ""}, {"title": "Throwing Together Distributed Services With Gevent", "description": ""}, {"title": "Transifex: Beautiful Python app localization", "description": ""}, {"title": "Using fabric to standardize the development process", "description": ""}, {"title": "Web scraping: Reliably and efficiently pull data from pages that don't expect it", "description": ""}, {"title": "Web Server Bottlenecks And Performance Tuning", "description": ""}, {"title": "web2py: ideas we stole and ideas we had", "description": ""}, {"title": "What Python can learn from Java", "description": ""}, {"title": "What you need to know about datetimes", "description": ""}, {"title": "What's new and interesting in standard library", "description": ""}, {"title": "What's New in Python on Windows", "description": ""}, {"title": "Why PyPy by example", "description": ""}, {"title": "Writing a Pyramid application", "description": ""}, {"title": "Writing GIMP Plug-ins in Python", "description": ""}, {"title": "5 powerful pyramid features", "description": ""}, {"title": "A beginner's introduction to Pydata: how to build a minimal recommendation engine.", "description": ""}, {"title": "[Poster] A Fast and Efficient Python Development Process for Small Teams", "description": ""}, {"title": "A Gentle Introduction to Computer Vision", "description": ""}, {"title": "A hands-on introduction to Python for beginning programmers", "description": ""}, {"title": "Advanced Machine Learning with scikit-learn", "description": ""}, {"title": "All-Singing All-Dancing Python Bytecode", "description": ""}, {"title": "An Introduction to scikit-learn: Machine Learning in Python", "description": ""}, {"title": "Analyzing Social Networks with Python", "description": ""}, {"title": "API Design for Library Authors", "description": ""}, {"title": "ApplePy: An Apple ][ emulator in Python", "description": ""}, {"title": "Applied Parallel Computing with Python", "description": ""}, {"title": "Asset Management in Python", "description": ""}, {"title": "[Poster] Atabox", "description": ""}, {"title": "Awesome Big Data Algorithms", "description": ""}, {"title": "Bayesian statistics made simple", "description": ""}, {"title": "Become a logging expert in 30 minutes", "description": ""}, {"title": "Beginners Welcome: From Zero to GUIs in Four Months, via Writing a Tutorial", "description": ""}, {"title": "Better Documentation Through Automation: Creating Sphinx Extensions", "description": ""}, {"title": "Beyond Passwords: Secure Authentication with Mozilla Persona", "description": ""}, {"title": "Biological Data Integration and Application for Personalized Cancer Treatment", "description": ""}, {"title": "Biomedical Ontologies with Python", "description": ""}, {"title": "Blame it on Caesar: What you need to know about dates, times and time zones", "description": ""}, {"title": "Boundaries", "description": ""}, {"title": "Building an image processing pipeline with Python", "description": ""}, {"title": "Building full-stack scientific applications in Python", "description": ""}, {"title": "Chef: Automating web application infrastructure", "description": ""}, {"title": "Closing Address", "description": ""}, {"title": "Code to Cloud in under 45 minutes", "description": ""}, {"title": "Collecting & Analyzing Financial Data", "description": ""}, {"title": "Community Event Planning", "description": ""}, {"title": "Composability Through Multiple Inheritance", "description": ""}, {"title": "Contribute with me! Getting started with open source development ", "description": ""}, {"title": "Copyright and You", "description": ""}, {"title": "Crypto 101", "description": ""}, {"title": "Customizing the Django Admin: The How and the Why", "description": ""}, {"title": "Cython vs SWIG, Fight!", "description": ""}, {"title": "DaNKInDaB - A New Approach to Servers", "description": ""}, {"title": "[Poster] Darkserver: Help to Debug Userspace", "description": ""}, {"title": "Data Classification Using Python, Django and R", "description": ""}, {"title": "[Poster] David vs Goliath: Fighting Big Budgets with Python", "description": ""}, {"title": "Death by a thousand leaks: what statically-analysing 370 Python extensions looks like", "description": ""}, {"title": "Deploy your Python app in 5 min with a PaaS", "description": ""}, {"title": "Designers + Developers: Collaborating on your Python project", "description": ""}, {"title": "[Poster] Developing an Early College IT/CS/Math Program Using Python", "description": ""}, {"title": "Digital signal processing through speech, hearing, and Python", "description": ""}, {"title": "Dispatch Magic", "description": ""}, {"title": "Distributed Coordination with Python", "description": ""}, {"title": "[Poster] Django Appointment Slots", "description": ""}, {"title": "Documenting Your Project in Sphinx", "description": ""}, {"title": "Dynamic Code Patterns: Extending Your Applications with Plugins", "description": ""}, {"title": "EduPsych Theory for Python Hackers: A Whirlwind Overview", "description": ""}, {"title": "Effective Django", "description": ""}, {"title": "Elasticsearch (Part 1): Indexing and Querying", "description": ""}, {"title": "[Poster] Enabling High Throughput Immunobiology by Integrating Django, numpy, matplotlib, and SQLAlchemy", "description": ""}, {"title": "Encapsulation with descriptors", "description": ""}, {"title": "Faster Python Programs through Optimization", "description": ""}, {"title": "Fighting Cancer with Python", "description": ""}, {"title": "Lightning Talks - Friday evening", "description": "-  `00:00 <https://www.youtube.com/watch?v=1vui-LupKJI#t=0m>`__ - Intro to Lightning Talks - MC Larry Hasting\n-  `01:56 <https://www.youtube.com/watch?v=1vui-LupKJI#t=1m56s>`__ - Instrumental - Matthew J Desmarais\n-  `07:14 <https://www.youtube.com/watch?v=1vui-LupKJI#t=7m14s>`__ - Statvent - Christian Wyglendowski\n-  `12:04 <https://www.youtube.com/watch?v=1vui-LupKJI#t=12m4s>`__ - Switchboard - Kyle Adams\n-  `16:14 <https://www.youtube.com/watch?v=1vui-LupKJI#t=16m14s>`__ - hy: a lisp variant - Paul Tag\n-  `20:40 <https://www.youtube.com/watch?v=1vui-LupKJI#t=20m40s>`__ - 5 packages you need to know - \u0141ukasz Langa\n-  `26:24 <https://www.youtube.com/watch?v=1vui-LupKJI#t=26m24s>`__ - The future of Linux containers - Solomon\n   Hykes\n-  `32:08 <https://www.youtube.com/watch?v=1vui-LupKJI#t=32m8s>`__ - SciPy 2013 - Andy Terrel, Anthony Scopatz\n-  `35:39 <https://www.youtube.com/watch?v=1vui-LupKJI#t=35m39s>`__ - BirdFish - Preston Holmes\n-  `41:20 <https://www.youtube.com/watch?v=1vui-LupKJI#t=41m20s>`__ - Julython - Robert Myers\n-  `44:20 <https://www.youtube.com/watch?v=1vui-LupKJI#t=44m20s>`__ - CLDR: Common locale data repository - Martin\n   von L\u00f6wis\n-  `48:49 <https://www.youtube.com/watch?v=1vui-LupKJI#t=48m49s>`__ - Spine demo and Python port of runtime - Terry\n   Simons\n\n"}, {"title": "Fully Test-Driven Web Development with Django and Selenium", "description": ""}, {"title": "Functional Programming with Python", "description": ""}, {"title": "Funding and Coordinating Python Projects via Non-Profits", "description": ""}, {"title": "Fusing Online and Face-to-Face Social Networks with Python and RFIDs", "description": ""}, {"title": "Getting started with automated testing", "description": ""}, {"title": "Gittip: Inspiring Generosity", "description": ""}, {"title": "Going from web pages to web apps with Python", "description": ""}, {"title": "\"Good enough\" is good enough!", "description": ""}, {"title": "GR - A Universal Framework for Visualization Applications", "description": ""}, {"title": "How Import Works", "description": ""}, {"title": "How (Not) To Build An OSS Community", "description": ""}, {"title": "How the Internet works", "description": ""}, {"title": "How to Except When You're Excepting", "description": ""}, {"title": "If You Code, You Should Write", "description": ""}, {"title": "Integrating Jython with Java", "description": ""}, {"title": "Intermediate Twisted: Test-Driven Networking Software", "description": ""}, {"title": "Internationalization and Localization Done Right", "description": ""}, {"title": "Introduction to PyGame", "description": ""}, {"title": "Introduction to SQLAlchemy", "description": ""}, {"title": "IPython in-depth: high-productivity interactive and parallel python", "description": ""}, {"title": "Is Python Beginner Friendly?", "description": ""}, {"title": "Iteration & Generators: the Python Way", "description": ""}, {"title": "Keynote", "description": ""}, {"title": "Keynote", "description": ""}, {"title": "Keynote - Eben Upton", "description": ""}, {"title": "Keynote - What Makes Python Awesome", "description": "Raymond Hettinger, a Python core developer for over decade, offers his\nperspective on what differentiates Python from other scripting\nlanguages.\n\nTen years ago, Python was equal to other scripting languages in terms of\nits expressiveness. Since then, it has pulled very far ahead using a\nnumber of advanced technologies: list comprehensions, iterators,\ngenerators, generator expressions, decorators, context managers,\nmetaclasses, and abstract base classes.\n\nEach of these capabilities were added in a way that respected the\nlanguage's reputation for readable, beautiful code. Together, the\ntoolset offers unique capabilities for rapid application development and\nmaintainable code.\n"}, {"title": "Kivy: Building GUI and Mobile apps with Python", "description": ""}, {"title": "Learn Python Through Public Data Hacking", "description": ""}, {"title": "Lessons Learned in Teaching Python", "description": ""}, {"title": "Let Them Configure!", "description": ""}, {"title": "Location, Location, Location", "description": ""}, {"title": "Logical Failures", "description": ""}, {"title": "Loop like a native: while, for, iterators, generators", "description": ""}, {"title": "Make More Responsive Web Applications with SocketIO and gevent", "description": ""}, {"title": "Making Apache suck less for hosting Python web applications.", "description": ""}, {"title": "Making DISQUS Realtime.", "description": ""}, {"title": "Measuring and modeling the complexity of children's books", "description": ""}, {"title": "Messaging at Scale at Instagram", "description": ""}, {"title": "Mobile Application Testing with Python and Selenium", "description": ""}, {"title": "MTO On Blast: Using Python's Natural Language Toolkit to Model Gossip Blogs", "description": ""}, {"title": "Music Theory and Performance Analysis with Sebastian and Czerny", "description": ""}, {"title": "Namespaces in Python", "description": ""}, {"title": "[Poster] Next-Generation Immunobiology Data Integration, Analysis and Visualization", "description": ""}, {"title": "Numba: A Dynamic Python compiler for Science", "description": ""}, {"title": "Opening Statements", "description": ""}, {"title": "Panel: Directions for Packaging", "description": ""}, {"title": "Planning and Tending the Garden: The Future of Early Childhood Python Education", "description": ""}, {"title": "Plover: Thought to Text at 240 WPM", "description": ""}, {"title": "Pony Object-Relational Mapper", "description": ""}, {"title": "Porting Django apps to Python 3", "description": ""}, {"title": "Purely Python Imaging with Pymaging", "description": ""}, {"title": "PyNES: Python programming for Nintendo 8 bits.", "description": ""}, {"title": "PyPy without the GIL", "description": ""}, {"title": "Pyramid Auth Is Hard, Let's Ride Bikes", "description": ""}, {"title": "Pyramid for Humans", "description": ""}, {"title": "Python 3 Metaprogramming", "description": ""}, {"title": "Python 3.3: Trust Me, It's Better than 2.7", "description": ""}, {"title": "Python: A \"Toy\" Language", "description": ""}, {"title": "Python at Netflix", "description": ""}, {"title": "Python beyond the CPU", "description": ""}, {"title": "Python Epiphanies", "description": ""}, {"title": "Python for Data Analysis", "description": ""}, {"title": "Python for Humans", "description": ""}, {"title": "Python for Programmers: A Project-Based Tutorial", "description": ""}, {"title": "Python for Robotics and Hardware Control", "description": ""}, {"title": "Python Profiling", "description": ""}, {"title": "Python XMPP", "description": ""}, {"title": "Python's Class Development Toolkit", "description": ""}, {"title": "Python's  Law", "description": ""}, {"title": "Rapid Web Prototyping with Lightweight Tools", "description": ""}, {"title": "[Poster] Read the Docs", "description": ""}, {"title": "Realtime Tracking and Mapping of Geographic Objects using Python", "description": ""}, {"title": "Rethinking Errors: Learning from Scala and Go", "description": ""}, {"title": "[Poster] Retrieving Meaning from Words", "description": ""}, {"title": "Reverse Engineering the Internet of Things", "description": ""}, {"title": "Rhys interviews CYAN", "description": ""}, {"title": "rpy2: Use R from the Comfort of Python", "description": ""}, {"title": "Lightning Talks - Saturday evening", "description": "-  `00:00 <https://www.youtube.com/watch?v=Ft6-r_vksDI#t=0m>`__ - Young Coders at PyCon 2013 - Katie Cunningham and\n   Barbara Shaurette\n-  `05:53 <https://www.youtube.com/watch?v=Ft6-r_vksDI#t=5m53s>`__ - Raspberry Pi connected to sensors - Jack\n   Minardi\n-  `08:23 <https://www.youtube.com/watch?v=Ft6-r_vksDI#t=8m23s>`__ - Python & ArcGIS for Transit Data Analysers -\n   Amy Smith\n-  `13:58 <https://www.youtube.com/watch?v=Ft6-r_vksDI#t=13m58s>`__ - Software Version Management - Quinn Weaver\n-  `19:48 <https://www.youtube.com/watch?v=Ft6-r_vksDI#t=19m48s>`__ - Parts and Scons - Jason Kenny\n-  `25:13 <https://www.youtube.com/watch?v=Ft6-r_vksDI#t=25m13s>`__ - Debugging Python on Linux with Visual Studio\n   - Steve Dower\n-  `37:35 <https://www.youtube.com/watch?v=Ft6-r_vksDI#t=37m35s>`__ - Titan Files for App Engine - Mike Fotinakis\n-  `43:40 <https://www.youtube.com/watch?v=Ft6-r_vksDI#t=43m40s>`__ - Using git as a mercurial client - Dusty\n   Phillips\n\n"}, {"title": "Lightning Talks - Saturday morning", "description": "-  `00:00 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=0s>`__ - ToRo (Tornado Coroutines) - Jesse Jiryu Davis\n-  `04:45 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=4m45s>`__ - Retask: Queue for Humans - Kushal Das\n-  `09:15 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=9m15s>`__ - Pythonic Andragogy: Python for Adults - Kirby\n   Urner\n-  `16:00 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=16m>`__ - How and why a Java expert switched to Python -\n   Ron Cox\n-  `22:10 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=22m10s>`__ - Coding across America - Andrew\n-  `25:05 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=25m9s>`__ - gitstreams.com - Justin Abrahms\n-  `26:58 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=26m58s>`__ - Jesse Noller interlude\n-  `30:30 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=30m30s>`__ - PyCharm - Dmitry Jemerov\n-  `36:10 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=36m10s>`__ - NASperry Pi - Mark Ransom\n-  `41:30 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=41m30s>`__ - NES, JavaScript and a Browser - Guto Maia\n-  `46:05 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=46m5s>`__ - EuroSciPy 2013: Come to our conference! - Mike\n   M\u00fcller\n-  `48:07 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=48m7s>`__ - PyWeek: Join our week and write a game! -\n   Richard Jones\n-  `51:13 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=51m13s>`__ - Don't make people watch what you type -\n   Stuart Williams\n-  `54:00 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=54m>`__ - Job Security (in Python) - Christopher\n   Neugebauer\n-  `59:09 <https://www.youtube.com/watch?v=pYZNLOKEE5I#t=59m9s>`__ - Using Python to make universal education truly\n   universal: KA Lite - Jamie Alexandre\n\n"}, {"title": "Scaling community diversity outreach", "description": ""}, {"title": "Scrapy: it GETs the web", "description": ""}, {"title": "Serpint - Controlling Raspberry Pi GPIO with a Serial Port/Socket", "description": ""}, {"title": "Server Log Analysis with Pandas", "description": ""}, {"title": "Shiny, Let's Be Bad Guys: Exploiting and Mitigating the Top 10 Web App Vulnerabilities", "description": ""}, {"title": "SimpleCV - Computer Vision using Python", "description": ""}, {"title": "Sink or swim: 5 life jackets to throw to New Coders", "description": ""}, {"title": "So Easy You Can Even Do It in JavaScript: Event-Driven Architecture for Regular Programmers", "description": ""}, {"title": "So you want to write an interpreter?", "description": ""}, {"title": "Solid Python Application Deployments For Everybody", "description": ""}, {"title": "[Poster] Spatial Clustering in Python", "description": ""}, {"title": "Lightning Talks - Sunday evening", "description": "-  `00:00 <https://www.youtube.com/watch?v=OL3De8BAhME#t=0m>`__ - Python 3 on your Atari Desktop - Jeffrey\n   Armstrong\n-  `04:58 <https://www.youtube.com/watch?v=OL3De8BAhME#t=4m58s>`__ - Armstrong, Open Source News Platform - Joshua\n   Bonnett\n-  `09:34 <https://www.youtube.com/watch?v=OL3De8BAhME#t=9m34s>`__ - Metrics should be basic: xUnit for metrics -\n   Jeremy Dunck\n-  `15:14 <https://www.youtube.com/watch?v=OL3De8BAhME#t=15m14s>`__ - The Answers - Luke Gotszling\n-  `20:20 <https://www.youtube.com/watch?v=OL3De8BAhME#t=20m20s>`__ - Core Python: the next generation - Wesley\n   Chun\n-  `25:15 <https://www.youtube.com/watch?v=OL3De8BAhME#t=25m15s>`__ - q.q - Ka-Ping Yee\n-  `31:10 <https://www.youtube.com/watch?v=OL3De8BAhME#t=31m13s>`__ - Neckbeard: Because cloud deployment sucks -\n   Wes Winham\n-  `36:54 <https://www.youtube.com/watch?v=OL3De8BAhME#t=36m54s>`__ - Abolishing the Traditional 9th to 12th Grade\n   Structure of High Schools - Eric Matthes\n-  `41:43 <https://www.youtube.com/watch?v=OL3De8BAhME#t=41m43s>`__ - Python Anywhere - Henry Percival\n-  `46:35 <https://www.youtube.com/watch?v=OL3De8BAhME#t=46m35s>`__ - RapydScript: Translating Python to JavaScript\n   - Charles Law\n-  `52:47 <https://www.youtube.com/watch?v=OL3De8BAhME#t=52m47s>`__ - PyCon Australia 2013 - Christopher Neugebauer\n-  `53:44 <https://www.youtube.com/watch?v=OL3De8BAhME#t=53m44s>`__ - (py) Fore! - Christopher Neugebauer\n\n"}, {"title": "Lightning Talks - Sunday morning", "description": "-  `00:00 <https://www.youtube.com/watch?v=6wcP1aMl7wQ#t=0m>`__ - Your brain on Python - John Montgomery\n-  `04:45 <https://www.youtube.com/watch?v=6wcP1aMl7wQ#t=4m45s>`__ - PyWorks: Making the dot asynchronous - Rene\n   Nejsum\n-  `10:48 <https://www.youtube.com/watch?v=6wcP1aMl7wQ#t=10m48s>`__ - TUF: The update framework - Mohamed Othman\n-  `15:42 <https://www.youtube.com/watch?v=6wcP1aMl7wQ#t=15m42s>`__ - PyCon PL - Filip K\u0142\u0119bczyk\n-  `19:27 <https://www.youtube.com/watch?v=6wcP1aMl7wQ#t=19m27s>`__ - gpodder.net - Filip K\u0142\u0119bczyk\n-  `22:02 <https://www.youtube.com/watch?v=6wcP1aMl7wQ#t=22m2s>`__ - A Python-Powered Hack Day - Mike Pirnat\n\n"}, {"title": "sys._current_frames(): Take real-time x-rays of your software for fun and performance", "description": ""}, {"title": "Teaching with the IPython Notebook", "description": ""}, {"title": "The End Of Object Inheritance & The Beginning Of A New Modularity", "description": ""}, {"title": "Lightning Talk - The future of Linux Containers", "description": ""}, {"title": "The Guts of Unicode in Python", "description": ""}, {"title": "The Magic of Metaprogramming", "description": ""}, {"title": "The Naming of Ducks: Where Dynamic Types Meet Smart Conventions", "description": ""}, {"title": "The SQLAlchemy Session - In Depth", "description": ""}, {"title": "[Poster] The State of PyCscope", "description": ""}, {"title": "Things to make writing tests easier", "description": ""}, {"title": "This Old Video Site: How PBS streams video - and you can too!", "description": ""}, {"title": "Transforming Code into Beautiful, Idiomatic Python", "description": ""}, {"title": "Twisted Logic: Endpoints and Why You Shouldn't Be Scared of Twisted", "description": ""}, {"title": "Use curses, don't swear", "description": ""}, {"title": "Using futures for async GUI programming in Python 3.3", "description": ""}, {"title": "Using Python to Code by Voice", "description": "Two years ago I developed a case of Emacs Pinkie (RSI) so severe my\nhands went numb and I could no longer type or work. Desperate, I tried\nvoice recognition. At first programming with it was painfully slow but,\nas I couldn\u2019t type, I persevered. After several months of vocab tweaking\nand duct-tape coding in Python and Emacs Lisp, I had a system that\nenabled me to code faster and more efficiently by voice than I ever had\nby hand.\n\nIn a fast-paced live demo, I will create a small system using Python,\nplus a few other languages for good measure, and deploy it without\ntouching the keyboard. The demo gods will make a scheduled appearance. I\nhope to convince you that voice recognition is no longer a crutch for\nthe disabled or limited to plain prose. It\u2019s now a highly effective tool\nthat could benefit all programmers.\n"}, {"title": "Visualizing Github, Part I: Data to Information", "description": ""}, {"title": "Visualizing Github, Part II: Information to Meaning", "description": ""}, {"title": "We Have, We Need - Disaster Relief in the Modern World", "description": ""}, {"title": "What is the Python Software Foundation?", "description": ""}, {"title": "What teachers really need from us", "description": ""}, {"title": "Who are we? A sociological analysis of the indigenous Python tribe", "description": ""}, {"title": "Whoosh, the open-source Python search library", "description": ""}, {"title": "Who\u2019s there?  - Home Automation with Arduino/RaspberryPi", "description": ""}, {"title": "Why Pyramid is awesome: the example of Facebook applications", "description": ""}, {"title": "Why you should use Python 3 for text processing", "description": ""}, {"title": "Worry-Free Parsers with Parsley", "description": ""}, {"title": "Write the Docs", "description": ""}, {"title": "XBlock: Courseware Components from edX", "description": ""}, {"title": "You can be a speaker at PyCon!", "description": ""}, {"title": "0 to 00111100 with web2py", "description": ""}, {"title": "2D/3D graphics with Python on mobile platforms", "description": ""}, {"title": "A Scenic Drive through the Django Request-Response Cycle", "description": ""}, {"title": "Advanced methods for creating decorators", "description": ""}, {"title": "Advanced techniques for Web functional testing", "description": ""}, {"title": "All Your Ducks In A Row: Data Structures in the Standard Library and Beyond", "description": ""}, {"title": "An Introduction to Twisted", "description": ""}, {"title": "Analyzing Rap Lyrics with Python", "description": ""}, {"title": "Ansible - Python-Powered Radically Simple IT Automation", "description": ""}, {"title": "Application Deployment State of the Onion", "description": ""}, {"title": "Bayesian statistics made simple", "description": ""}, {"title": "Beyond Defaults: Creating Polished Visualizations Using Matplotlib", "description": ""}, {"title": "Blending art, technology, and light, Python for interactive and real time", "description": ""}, {"title": "Build your own PiDoorbell! - Learn Home Automation with Python", "description": ""}, {"title": "Building and breaking a Python sandbox", "description": ""}, {"title": "Building the App", "description": ""}, {"title": "By Your Bootstraps: Porting Your Application to Python3", "description": ""}, {"title": "Cache me if you can: memcached, caching patterns and best practices", "description": ""}, {"title": "Castle Anthrax: Dungeon Generation Techniques", "description": ""}, {"title": "Character encoding and Unicode in Python", "description": ""}, {"title": "Cheap Helicopters In My Living Room", "description": ""}, {"title": "Closing address - PyCon 2014 (2014/04/13)", "description": ""}, {"title": "Computer science fundamentals for self-taught programmers", "description": ""}, {"title": "Contribute with me! Getting started with open source development", "description": ""}, {"title": "Data intensive biology in the cloud: instrumenting ALL the things", "description": ""}, {"title": "Data Wrangling for Kaggle Data Science Competitions -- An etude", "description": ""}, {"title": "Decorators: A Powerful Weapon in your Python Arsenal", "description": ""}, {"title": "Deliver Your Software In An Envelope", "description": ""}, {"title": "Descriptors and Metaclasses - Understanding and Using Python's More Advanced Features", "description": ""}, {"title": "Designing Django's Migrations", "description": ""}, {"title": "Designing Poetic APIs", "description": ""}, {"title": "Developing Flask Extensions", "description": ""}, {"title": "Discovering Python", "description": ""}, {"title": "Distributed Computing Is Hard, Lets Go Shopping", "description": ""}, {"title": "Distributed task processing using Celery", "description": ""}, {"title": "Diving deeper into Machine Learning with Scikit-learn", "description": ""}, {"title": "Diving into Open Data with IPython Notebook & Pandas", "description": ""}, {"title": "Django for Web Designers and Front End Developers", "description": ""}, {"title": "Django: The good parts", "description": ""}, {"title": "Dynamics and Control with Python", "description": ""}, {"title": "Enough Machine Learning to Make Hacker News Readable Again", "description": ""}, {"title": "Exploring Machine Learning with Scikit-learn", "description": ""}, {"title": "Fan-in and Fan-out: The crucial components of concurrency", "description": ""}, {"title": "Farewell and Welcome Home: Python in Two Genders", "description": ""}, {"title": "Fast Python, Slow Python", "description": ""}, {"title": "Faster Python Programs through Optimization", "description": ""}, {"title": "Flask by Example", "description": ""}, {"title": "For Lack of a Better Name(server): DNS Explained.", "description": ""}, {"title": "Games for Science: Creating interactive psychology experiments", "description": ""}, {"title": "Garbage Collection in Python", "description": ""}, {"title": "Generators: The Final Frontier", "description": ""}, {"title": "Getting Hy on Python: How to implement a Lisp front-end to Python", "description": ""}, {"title": "Getting Started Testing", "description": ""}, {"title": "Getting Started with Django, a crash course", "description": ""}, {"title": "Getting Started with SaltStack", "description": ""}, {"title": "Hands-on intro to Python for beginning programmers", "description": ""}, {"title": "Hands-on with Pydata: how to build a minimal", "description": ""}, {"title": "Hello Physical World: A Crash Course on the Internet of Things", "description": ""}, {"title": "Hitchhikers Guide to Participating in Open Source", "description": ""}, {"title": "How to formulate a (science) problem and analyze it using Python code", "description": ""}, {"title": "How to Get Started with Machine Learning", "description": ""}, {"title": "Import-ant Decisions", "description": ""}, {"title": "Improving automated testing with py.test", "description": ""}, {"title": "In Depth PDB", "description": ""}, {"title": "Introduction to Docker", "description": ""}, {"title": "Introduction to game programming", "description": ""}, {"title": "Introduction to Regular Expressions", "description": ""}, {"title": "Introduction to SQLAlchemy", "description": ""}, {"title": "Introduction to SQLAlchemy Core", "description": ""}, {"title": "Introduction to Web (and data!) Scraping with Python", "description": ""}, {"title": "IPython in depth: high productivity interactive and parallel python", "description": ""}, {"title": "It's Dangerous to Go Alone: Battling the Invisible Monsters in Tech", "description": ""}, {"title": "Keynote - Fernando P\u00e9rez", "description": ""}, {"title": "Keynote - Guido Van Rossum", "description": ""}, {"title": "Keynote: Python, the next generation - Jessica McKellar", "description": ""}, {"title": "Keynote - John Perry Barlow", "description": ""}, {"title": "Keynote - Van Lindberg", "description": ""}, {"title": "Kneel And Disconnect: Getting The Fastest Connection Out Of A Hostname", "description": ""}, {"title": "Know Thy Neighbor: Scikit and the K-Nearest Neighbor Algorithm", "description": ""}, {"title": "Let's Learn Twisted Python", "description": ""}, {"title": "Lightning talks - Friday afternoon", "description": ""}, {"title": "Lightning talks - Saturday Evening", "description": ""}, {"title": "Lightning talks - Saturday morning", "description": ""}, {"title": "Lightning talks - Sunday afternoon", "description": ""}, {"title": "Lightning talks - Sunday morning", "description": ""}, {"title": "Localization Revisited", "description": ""}, {"title": "Mining Social Web APIs with IPython Notebook", "description": ""}, {"title": "mrjob: Snakes on a Hadoop", "description": ""}, {"title": "Multi-factor Authentication - Possession Factors", "description": ""}, {"title": "My big gay adventure. Making, releasing and selling an indie game made in python.", "description": ""}, {"title": "Opening Statements - PyCon 2014 (2014/04/11)", "description": ""}, {"title": "Outreach Program for Women: Lessons in Collaboration", "description": ""}, {"title": "Performance Testing and Profiling: A Virtuous Cycle", "description": ""}, {"title": "Pickles are for Delis, not Software", "description": ""}, {"title": "Postgres Performance for Humans", "description": ""}, {"title": "PostgreSQL is Web Scale (Really :) )", "description": ""}, {"title": "PostgreSQL Proficiency for Python People", "description": ""}, {"title": "Programming an Autonomous 20 Foot Blimp with Python", "description": ""}, {"title": "Puppet Modules: Apps for Ops", "description": ""}, {"title": "Pushing Python: Building a High Throughput, Low Latency System", "description": ""}, {"title": "PyCon 2014 Awards", "description": ""}, {"title": "Python 3/2 Web Development with Pyramid", "description": ""}, {"title": "Python Epiphanies", "description": ""}, {"title": "Python for Social Scientists", "description": ""}, {"title": "Python + Geographic Data = BFFs", "description": ""}, {"title": "Python in the Browser: Intro to Brython", "description": ""}, {"title": "Python packaging simplified, for end users, app developers", "description": ""}, {"title": "Python Scraping Showdown: A performance and accuracy review", "description": ""}, {"title": "Quick Wins for Better Website Security", "description": ""}, {"title": "Realtime predictive analytics using scikit-learn & RabbitMQ", "description": ""}, {"title": "REST is not enough: Using Push Notifications to better support your mobile clients", "description": ""}, {"title": "Sane schema migrations with Alembic and SQLAlchemy", "description": ""}, {"title": "Search 101: An Introduction to Information Retrieval", "description": ""}, {"title": "See Docs Run. Run, Docs, Run!", "description": ""}, {"title": "Set your code free: releasing and maintaining an open-source Python project", "description": ""}, {"title": "Shiny, Let's Be Bad Guys: Exploiting and Mitigating the Top 10", "description": ""}, {"title": "Smart Dumpster: Employing Python to Report Real-Time Resource", "description": ""}, {"title": "So you want to be a full-stack developer? How to build a full-stack python", "description": ""}, {"title": "So You Want to Build an API?", "description": ""}, {"title": "Software Carpentry: Lessons Learned", "description": ""}, {"title": "Software Engineering Research for Hackers: Bridging the Two Solitudes", "description": ""}, {"title": "Straightening Out AngularJS with Python", "description": ""}, {"title": "Subprocess to FFI: Memory, Performance, and Why You Shouldn't Shell Out", "description": ""}, {"title": "TDD for web applications, from scratch", "description": ""}, {"title": "Teaching Python: To Infinity and Beyond", "description": ""}, {"title": "Technical on-boarding, training, and mentoring.", "description": ""}, {"title": "The Day of the EXE Is Upon Us", "description": ""}, {"title": "The Python Pipeline: Why you should reach out to local teachers", "description": ""}, {"title": "The Sorry State of SSL", "description": ""}, {"title": "The State of Crypto in Python", "description": ""}, {"title": "The Young Coder: Let's Learn Python", "description": ""}, {"title": "Track memory leaks in Python", "description": ""}, {"title": "Turn Your Computer Into a Server", "description": ""}, {"title": "Twisted Mixing", "description": ""}, {"title": "Unit Testing Makes Your Code Better", "description": ""}, {"title": "Upgrade your Web Development Toolchain", "description": ""}, {"title": "What Is Async, How Does It Work, And When Should I Use It?", "description": ""}, {"title": "What is coming in Python packaging", "description": ""}, {"title": "Which messaging layer should you use if you want to build", "description": ""}, {"title": "Writing RESTful web services with Flask", "description": ""}, {"title": "3D Print Anything with the Blender API", "description": ""}, {"title": "A Beginner's Guide to Test-driven Development", "description": "Software is maintained by humans with limited memory and an unfortunate\ntendency to make mistakes. Test-driven development (TDD) can help you\nwork around these design flaws by providing a permanent, automated\nspecification for your code. Learn how to implement TDD when bug fixing\nand implementing new features and how this process will ensure your code\nis correct both now and in the future.\n"}, {"title": "A Winning Strategy with The Weakest Link: how to use weak references to make your code more robust", "description": "Working with weak references should not just be for Python wizards.\nWhether you have a cache, memoizing a function, tracking objects, or\nvarious other bookkeeping needs, you definitely do not want code leaking\nmemory or resources. In this talk, we will look at illuminating examples\ndrawn from a variety of sources on how to use weak references to prevent\nsuch bugs.\n"}, {"title": "Achieving Continuous Delivery: An Automation Story", "description": "Continuos Deployment is the act of deploying software constantly. The\nidea is if \"\"release early, release often\"\" is good, releasing very\noften is better. It's not trivial. Automation is part of the battle, and\ntesting is another. Learn to use tools like Jenkins and Ansible to move\nfrom deploying software once a month to 15 times every hour, and why\nyou'll want to.\n"}, {"title": "Advanced Git", "description": "You know clone, commit, push, and pull. Now you're ready for the fun\nstuff. This talk will give you the advanced knowledge you need to take\ncontrol of your git repository: rebase, cherry-pick, bisect, blame,\nsquashing, and the reflog. You'll also get a better conceptual\nunderstanding of how git works, allowing you to chain these tools\ntogether to accomplish whatever task you need.\n"}, {"title": "Ansible 101", "description": "Interested in Ansible, or in server orchestration and configuration\ngenerally? This tutorial will teach the basics -- and a few of the\nnot-so-basics -- of orchestrating machines with Ansible.\n"}, {"title": "Ansible beyond YAML", "description": "Ansible is a configuration management tool whose primary mode of\noperation involve using YAML to describe deployments and operations.\nHowever, it can do much more and be extended using python, which is what\nwe will explore in this talk. Among others, we will see the plugins\nsystem for various part of the tool and how to reuse Ansible in a\nscript.\n"}, {"title": "Avoiding Burnout, and other essentials of Open Source Self-Care", "description": "As technical community managers we are faced with a unique set of\nchallenges. We do it because we love our communities, but we also are\noften guilty of neglecting our own very real needs in order to serve\nthose communities. We end up feeling guilty, run down, inadequate, and\nultimately burnt out.\n"}, {"title": "Bayesian statistics made simple", "description": "An introduction to Bayesian statistics using Python. \u00a0Bayesian\nstatistics are usually presented mathematically, but many of the ideas\nare easier to understand computationally. \u00a0People who know Python can\nget started quickly and use Bayesian analysis to solve real problems.\n\u00a0This tutorial is based on material and case studies from Think Bayes\n(O\u2019Reilly Media).\n"}, {"title": "Beyond grep: Practical Logging and Metrics", "description": "Your Python server applications are running but you\u2019re wondering what\nthey are doing? Your only clue about their current state is the server\nload? Let\u2019s have stroll through the landscape of logging and metrics so\nyou\u2019ll find the perfect fit for your use cases!\n"}, {"title": "Beyond PEP 8 -- Best practices for beautiful intelligible code", "description": "Distillation of knowledge gained from a decade of Python consulting,\nPython training, code reviews, and serving as a core developer. Learn to\navoid some of the hazards of the PEP 8 style guide and learn what really\nmatters for creating beautiful intelligible code.\n"}, {"title": "Build and test wheel packages on Linux, OSX & Windows", "description": "Practical guide to build and test wheel packages for all platforms using\nfree Continuous Integration services such as Travis CI (Linux and OSX)\nand AppVeyor (Windows).\n"}, {"title": "Building a REST API Using Django & Django REST Framework", "description": "Using a combination of Django and Django REST Framework, we will build a\nRestaurant Menu that can be managed via a REST API. Starting from the\ninstall of the Django REST Framework, we will build our way to a\nfunctional API that meets the needs of developers and end-users. You\nwill walk away with an understanding of the basic concepts of REST APIs\nand a working sample project.\n"}, {"title": "Building secure systems", "description": "How do you build secure software? Why do we see bad security track\nrecords in projects that otherwise seem to tick all the right\nengineering boxes? Why is communicating about security issues so\npainful? More importantly: how can we do all of these things better?\n"}, {"title": "Bytes in the Machine: Inside the CPython interpreter", "description": "Have you ever wondered how the CPython interpreter works? Do you know\nwhere to find a 1,500 line switch statement in CPython? I'll talk about\nthe structure of the interpreter that we all use every day by explaining\nhow Ned Batchelder and I chased down a mysterious bug in Byterun, a\nPython interpreter written in Python. We'll also see visualizations of\nthe VM as it executes your code.\n"}, {"title": "Choose Your Own WSGI Deployment Adventure", "description": "From servers and proxies to configuration management, the Web Server\nGateway Interface (WSGI) deployment ecosystem is complicated for new\ndevelopers. This choose your own adventure talk contains decision points\nfor the audience to choose topics via text and email votes. Each choice\nleads down a separate path to explain different confusing WSGI subjects.\nBring your phone or laptop to participate!\n"}, {"title": "Closing Messages", "description": ""}, {"title": "Cutting Off the Internet: Testing Applications that Use Requests", "description": "A brief and opinionated view of testing applications and libraries that\nuse requests by a core-developer of requests. You will receive an\noverview of testing with responses, vcr, httpretty, mock, and betamax.\n"}, {"title": "Data Science in Advertising: Or a future when we love ads", "description": "This talk would give you an in-depth overview of Real-Time Bidded (RTB)\nadvertising systems, and why with increasing sophistication in ad-tech,\nin the future we will wonder why we ever hated ads. In particular, this\ntalk will discuss technical challenges in ad systems and how we use\nComputational Advertising and Data Science to solve problems around\nClick Through Rate (CTR) Prediction, Auto-Bidding systems, Traffic\nPrediction, etc.\n"}, {"title": "Delving into the Django Admin", "description": "The admin interface is widely considered a \"\"killer feature\"\" of Django.\nAt its most basic, you can just register all your models and be on your\nway, but there's so much more available within Django's admin. This\ntutorial takes you step by step through the creation and progressive\nimprovement of an admin interface for a fictional library (all code is\npublicly available).\n"}, {"title": "Demystifying Docker", "description": "Docker was one of last year\u2019s most talked about open source projects -\nbut what is it? And what does it mean for deploying applications? This\ntalk will explain what Docker is and where it fits in with other\ndeployment techniques. Attendees will learn the fundamentals of Docker,\nsee some practical examples of how Docker is used, and consider if\nDocker could be a useful addition to their platform.\n"}, {"title": "Describing Descriptors", "description": "The Python library uses descriptors frequently, but most developers\noverlook this feature. This talk will cover what a descriptor is, the\ncurrent uses in the standard library, and how custom descriptors can be\nused in a developer\u2019s toolset to eliminate repeated code.\n"}, {"title": "Descriptors and Metaclasses", "description": "Descriptors and metaclasses are advanced Python features. While it is\npossible to write Python programs without active knowledge of them,\nknowing more about them facilitates a deeper understanding of the\nlanguage. With examples, you will learn how they work and how to write\nyour own descriptors and metaclasses. Furthermore, you will understand\nwhen to use and when better not to use them.\n"}, {"title": "Distributed Systems 101", "description": "A very brief introduction to the theory and practice of distributed\nsystems.\n"}, {"title": "Django in Depth", "description": "This is a tutorial that goes beyond most tutorials; it's meant for\ndevelopers who already know a bit about Django and want to really\nunderstand the inner guts of the framework. This tutorial will *not*\ninvolve writing code or apps; rather, it'll be a deep tour of the\nworkings and APIs of Django itself, across all the bundled components\nand at all levels of the stack.\n"}, {"title": "Docker 101: Introduction to Docker", "description": "Docker was one of last year\u2019s most talked about open source projects -\nbut what is it? And what does it mean for deploying applications? This\ntutorial will explain what Docker is and where it fits in with other\ndeployment and configuration management tools. Students will then learn\nthe basics of working with Docker containers, how to \u201cdockerize\u201d their\nPython apps, and some emerging best practices.\n"}, {"title": "Don't Make Us Say We Told You So: virtualenv for New Pythonistas", "description": "Even though it\u2019s possible to program without using virtual environments,\nyou can shoot yourself in the foot without them. This talk will start\nwith an illustration of how not using virtual environments can mess you\nup as a programmer, and will walk you through a simple way to get\nstarted with good habits using virtualenv.\n"}, {"title": "Eventually Correct: Testing Async Apps", "description": "Async frameworks like Tornado and asyncio scramble our usual strategies\nfor writing sequential code. This is most problematic when writing\ntests: how can you validate the outcome when you don\u2019t know when to\nexpect it? This talk introduces you to methods and practices for\nunittesting async applications.\n"}, {"title": "Experimental pure mathematics using Sage", "description": "Pure mathematics is not always big formulas written on endless\nnotebooks, it can also be hidden behind python code. In combinatorics,\nwe study classical computer science objects like trees or graphs with a\nmathematical perspective. This talk aims to show how computer\nexploration and experimentation can be used to discover and prove new\nmathematical results.\n"}, {"title": "Exploring is never boring: understanding CPython without reading the code", "description": "Have you started to read the source code of CPython but not gotten as\nfar as you wanted? Maybe you want to understand more about CPython but\ndon't know where to begin. I'll present a number of strategies for\ngetting more familiar with Python under the hood that go beyond \"\"just\nread it!\"\" This talk isn't about contributing - it's about getting into\nthe code base and discovering interesting things.\n"}, {"title": "Exploring Minecraft and Python: Learning to Code Through Play", "description": "Interest and activity in childhood computing education continues to\ngrow. Meanwhile, Minecraft has become a massive cultural phenomenon as a\nfun, motivating platform that encourages exploration and play. This talk\ndemonstrates how Python can be used to teach programming while exploring\nthe world of Minecraft. We will cover how to set up learning\nenvironments, curricula, and case studies.\n"}, {"title": "Facts and Myths about Python names and values", "description": "The behavior of names and values in Python can be confusing. Like many\nparts of Python, it has an underlying simplicity that can be hard to\ndiscern, especially if you are used to other programming languages. Here\nI'll explain how it all works, and present some facts and myths along\nthe way. Call-by-reference? Call-by-value? The answer will be clear!\n"}, {"title": "Finding Spammers & Scammers through Rate Tracking with Python & Redis", "description": "This talk provides an introduction to rate tracking as well as an\nexplanation of a particularly cool way to implement it. You will learn\nwhat rate tracking is, why you would want to do it, and then how you can\nuse build a Redis-backed \u201cvelocity engine\u201d in Python to do just that.\n"}, {"title": "Finding Your Groove: Contributing to CPython and Beyond", "description": "Do you hear a jumble of jargony noise when reading Python mailing lists?\nDo you silently edit your dotfiles and playlists to avoid asking\nquestions on IRC? Come see how Jazz can help you understand and\ncontribute to Python. While both seem vast and complex, they build on\nsimple concepts. By mixing art, knowledge, and improv, you can find your\nCPython contribution groove and enjoy cool cats' music.\n"}, {"title": "Fire your supervisord running Python apps on CoreOS", "description": ""}, {"title": "Flask Workshop", "description": "Flask is a web framework for Python based on Werkzeug, Jinja 2 and good\nintentions. It is considered a micro-framework, but don't get the\n\"\"micro\"\" part fool you; Flask can do everything others can do, many\ntimes in a simpler, leaner way. In this tutorial session we will build a\nweb application together. Bring your laptop and your questions!\n"}, {"title": "Free Software, Free People", "description": "Four years after the Arab Spring & 2 years after Snowden, little has\nchanged. What now? This talk will remember Telecomix, an ad-hoc activist\ncluster that supported free communication around the world. Stories of\nhumans and machines, reflection on 3 years of hacktivism & exploration\nof similarities to the free software community. It follows a 2011 Pycon\nlightning talk given after Tahrir Square.\n"}, {"title": "Getting comfortable with web security: A hands-on session", "description": "Web application security can be an intimidating discipline, yet it can\nbe of supreme importance for the people who use the things we build.\n\nIn this tutorial, you'll learn about essential topics in web security,\nand you will gain hands-on practice identifying and leveraging\nvulnerabilities in a Python-based web app. For each issue, we will cover\nhow your code can stay on the side of safety.\n"}, {"title": "Getting to Jython 2.7 and beyond", "description": "So how did we get to Jython 2.7 anyway? And what are our future plans?\nIn this talk, you will get a taste of how Jython works, some new\nfunctionality, and especially how Jython leverages both Python and Java\nto provide a very compatible solution.\n"}, {"title": "Good Test, Bad Test", "description": "In a highly dynamic language like Python, testing is even more critical\nthan in compiled or more static languages. Like any other code we\nproduce, tests can be either good or bad. This talk explores three\nfallacies of testing, and the mistakes and bad habits these fallacies\nencourage; and shows how to write good tests which help assure proper\nbehavior without impeding development progress.\n"}, {"title": "Graph Database Patterns in Python", "description": "Creating and using models from a graph database can be quite different\nto the ones used for row/column/document-oriented databases, in the\nsense that the same query patterns could differ significantly in\nstructure and performance. This session will present how to create\nmodels in Python for Titan property graphs, that allow you to manipulate\ngraphs as if you were querying with Gremlin DSL.\n"}, {"title": "Grids, Streets and Pipelines: Building a linguistic street map with scikit-learn", "description": "Have you built a classifier in scikit-learn with out-of-the-box\nfeatures, been disappointed with the results, and wanted to know where\nto go next? This talk shows how to add your own feature Pipelines and\nhow to tune hyperparameters using GridSearchCV. We'll apply this to the\nproblem of classifying streetnames in Singapore by linguistic origin,\nand turn the results into a colour-coded street map.\n"}, {"title": "Gradual Typing for Python 3", "description": ""}, {"title": "Hadoop with Python", "description": "In this tutorial, students will learn how to use Python with Apache\nHadoop to store, process, and analyze incredibly large data sets. Hadoop\nhas become the standard in distributed data processing, but has mostly\nrequired Java in the past. Today, there are a numerous open source\nprojects that support Hadoop in Python and this tutorial will show\nstudents how to use them.\n"}, {"title": "Hands-on Data Analysis with Python", "description": "Python is quickly becoming the go-to language for data analysis.\nHowever, it can be difficult to figure out which tools are good to use.\nIn this workshop, we\u2019ll work through in-depth examples of tools for data\nwrangling, machine learning, and data visualization. I\u2019ll show you how\nto work through a data analysis workflow, and how to deal with different\nkinds of data.\n"}, {"title": "Hands-on with Pydata: how to build a minimal recommendation engine.", "description": "In this tutorial we'll set ourselves the goal of building a minimal\nrecommendation engine, and in the process learn about Python's excellent\nPydata and related projects and tools: NumPy, pandas, and the IPython\nNotebook.\n"}, {"title": "Hash Functions and You: Partners in Freedom", "description": "Our trusty friend, the hash function, is as crucial to programming as\nlinked lists or recursion, but it doesn't always get the press that it\ndeserves.\n\nWe're going to talk about hash functions, some data structures involving\nhash functions, the stately bloom filter, and the security implications\nof password hashing.\n"}, {"title": "How our engineering environments are killing diversity (and how we can fix it).", "description": "This talk focuses on how engineering team environments can impact\nemployee behavior, and how environmental factors can prohibit diversity\nat tech companies. I will talk about some of the key problems that exist\nin current engineering environments and how they can be fixed.\n"}, {"title": "How to Be More Effective with Functions", "description": "Functions improve readability, encourage reuse, and facilitate\nrefactoring. Python has many unique features that make functions\nsignificantly more powerful. This talk will show you the best ways to\nuse functions in Python: when \\*args is helpful and when it'll crash\nyour programs; how to use generators for arguments and return values;\nthe value of keyword vs. keyword-only arguments; and more!\n"}, {"title": "How to build a brain with Python", "description": ""}, {"title": "How to interpret your own genome using (mostly) Python.", "description": "We\u2019ve entered the era of the $1000 human genome, and soon it will be\nstraightforward to get your own genome sequenced by a commercial\ncompany. But what does the data mean? What information can you get out\nof your genomic sequence? And what are the barriers to deeper analysis?\nWhat kinds of algorithms and databases are used in genomic analysis? All\nthis, and more, will be revealed in this talk.\n"}, {"title": "How to make your code Python 2/3 compatible", "description": "You know Python 3 is an improvement over Python 2 and you want to use\nit. Unfortunately you have legacy Python 2 source code that needs to\nstay compatible. But don't fret! This talk will show you that you can\nmake your code be Python 2/3 source-compatible using various tools to\npick up the nitty-gritty work and help modernize your Python code to\nnewer Python 2 practices.\n"}, {"title": "How to Write Reusable Code", "description": "Learning to write high-quality, reusable code takes years of dedicated\nwork. Or you can take a shortcut: attend this talk and learn some of the\ntricks I've figured out over a couple of decades of programming.\n"}, {"title": "Hyperactive: HTTP/2 and Python", "description": "The internet has spoken, HTTP is to get its first serious update in 15\nyears. In this talk we'll discuss what HTTP/2 is, why it's happening,\nand how it's going to affect you and everyone you love. We'll briefly\ntalk about how you can get started with HTTP/2, and some interesting\nprojects associated with it, including Hyper, the first Python HTTP/2\nlibrary.\n"}, {"title": "I18N: World Domination the Easy Way", "description": "Have you heard about internationalization (i18n) and wondered what it\nmeant? Perhaps your project already has i18n of its strings but you have\na nagging feeling you could be doing it better. This talk will walk\nthrough the basics of i18n\u2019ing a Django project (but the principles\napply to any project!), and how to make the process of localization\n(l10n) go more smoothly.\n"}, {"title": "Improve your development environments with virtualization", "description": "A talk on how to employ virtualization to make development easier, more\nportable, and have it more closely adhere to production environments.\n"}, {"title": "Interactive data for the web", "description": "Interactive data visualization libraries are mostly a JavaScript\nstronghold. The new Python library, Bokeh, provides a simple, clean way\nto make more shiny things. Although it comes from the data science\ncommunity, it has a lot to offer web developers. For a visualization you\nmight have built in d3.js, I'll show how to build it in Bokeh, how to\ntest it, and how to hook it into your web app.\n"}, {"title": "Introduction to game programming with Kivy", "description": "This tutorial will walk the attendees through development of a simple\ngame using Kivy with time left over for some experimentation and\nexploration of different types of games.\n"}, {"title": "Introduction to HTTPS: A Comedy of Errors", "description": "Given recent increases in hostile attacks on internet services and large\nscale surveillance operations by certain unnamed government\norganizations, security in our software is becoming ever more important.\nWe'll give you an idea of how modern crypto works in web services and\nclients, look at some of the common flaws in these crypto\nimplementations, and discuss recent developments in TLS.\n"}, {"title": "Introduction to Spark with python", "description": "In this tutorial we will cover the basics of writing spark programs in\npython (initially from the pyspark shell, later with independent\napplications). We will also discuss some of the theory behind spark, and\nsome performance considerations when using spark in a cluster.\n"}, {"title": "Investigating Python Wats", "description": "Many of us have experienced a \"\"wat\"\" in Python - some behavior that\ntotally mystifies us. We'll look at three areas where wats arise -\nidentity, mutability, and scope. For each of these three topics, we'll\nlook at some common surprising behaviors, investigate the cause of the\nbehaviors, and cover some practical tips on how to avoid related bugs.\n"}, {"title": "IPython & Jupyter in depth: high productivity interactive and parallel python", "description": "IPython and Jupyter provide tools for interactive and parallel computing\nthat are widely used in scientific computing, but can benefit any Python\ndeveloper. We will show how to use IPython in different ways, as: an\ninteractive shell, a graphical console, a network-aware VM in GUIs, a\nweb-based notebook with code, graphics and rich HTML, and a high-level\nframework for parallel computing.\n"}, {"title": "Is Your REST API RESTful?", "description": "Writing a fully complaint REST API is hard, so hard it is too common for\nAPIs to violate one or more of the REST architectural principles. In\nthis talk I will describe the six REST principles, and I will tell you\nwhat happens if you don't follow them.\n"}, {"title": "Keynote - Catherine Bracy", "description": ""}, {"title": "Keynote  - Gabriella Coleman", "description": ""}, {"title": "Keynote - Guido van Rossum", "description": ""}, {"title": "Keynote - Jacob Kaplan-Moss", "description": ""}, {"title": "Keynote - Van Lindberg - Pycon 2015", "description": ""}, {"title": "Learning from other's mistakes: Data-driven analysis of Python code", "description": "Static code analysis is an useful tool that can help to detect bugs\nearly in the software development life cycle. I will explain the basics\nof static analysis and show the challenges we face when analyzing Python\ncode. I will introduce a data-driven approach to code analysis that\nmakes use of public code and example-based learning and show how it can\nbe applied to analyzing Python code.\n"}, {"title": "Lessons learned with asyncio (\"Look ma, I wrote a distributed hash table!\")", "description": "This talk introduces the asyncio module. I'll cover what it's for, how\nit works and describe how I used it to write a real-world networked\napplication (a distributed hash table). We'll explore the event loop,\nco-routines, futures and networking with examples from my code. This\nwon't be an exhaustive exposition. Rather, attendees will grasp enough\nof asyncio to continue with their own studies.\n"}, {"title": "Lightning Talks - April 10th", "description": ""}, {"title": "Lightning Talks - April 11th 17h30", "description": ""}, {"title": "Lightning Talks - April 12th 08h30", "description": ""}, {"title": "Lightning Talks - April 11th 8h30", "description": ""}, {"title": "Losing your Loops Fast Numerical Computing with NumPy", "description": ""}, {"title": "Machine Learning 101", "description": "Machine learning is a crucial part of modern software development.\nLibraries like pandas, scikit-learn, gensim, and Theano help developers\nbuild projects that were previously impossible, and these applications\nempower our users and can make fundamental improvements in daily life.\nThis talk will show you the why, what, and how of machine learning in\nPython.\n"}, {"title": "Machine Learning with Scikit-Learn (I)", "description": "This tutorial will offer an introduction to the core concepts of machine\nlearning and the Scikit-Learn package. We will introduce the\nscikit-learn API, and use it to explore the basic categories of machine\nlearning problems and related topics such as feature selection and model\nvalidation, and practice applying these tools to real-world data sets.\n"}, {"title": "Machine Learning with Scikit-Learn (II)", "description": "This tutorial will offer an overview of common usage and methodological\npatterns when using Scikit-Learn to build predictive models. In\nparticular we will highlight common strategies to deal with data with\nheterogeneously typed attributes with pandas dataframes, model\nevaluation and tuning. Finally if time permits we will explore the\nspecificities of working with textual data.\n"}, {"title": "Make web development awesome with visual diffing tools", "description": "Visual diffs are a great way to check for regressions on web sites which\nmay be missed by unit tests. In this talk you'll learn how to run\nend-to-end tests on your client and server web libraries using a tool\ncalled dpxdt. I'll also show how you can combine it with web-based diff\ntools like \"\"git webdiff\"\" to quickly and confidently iterate on web\ntools.\n"}, {"title": "Make your own Smart Air Conditioner", "description": ""}, {"title": "Making Beautiful Graphs in Python and Sharing Them", "description": "From Python basics to NYT-quality graphics, we walk through workflows to\nmake beautiful, shareable data visualizations. We\u2019ll also explore 3D\nplotting in the browser, cross-language collaboration, and matplotlib\nfigure conversion. By using Python\u2019s scientific stack and an IPython\nnotebook--attendees may follow along. For data analysts, data\njournalists, and anyone who likes plots.\n"}, {"title": "Managing Your Infrastructure with SaltStack", "description": "Are you still using SSH to manage your servers? Deploying code manually\nwith rsync? There\u2019s a better way. SaltStack is one of the latest and\ngreatest tools for system management. Once you have a foundation of\nlightning-fast remote execution, you can build anything on top of it.\nPlus, it\u2019s written in Python, and easy to extend!\n"}, {"title": "Modules and Packages: Live and Let Die!", "description": "All Python programmers use the import statement, but do you really know\nhow it works and what it allows? This tutorial aims to take a deep dive\ninto every diabolical issue related to modules, packages, and imports.\nWhen we're done, you'll finally be ready to unleash your million line\nmicro framework on the world!\n"}, {"title": "My Python's a little Rust-y", "description": "Rust is a new systems programming language from Mozilla that combines\nstrong compile-time correctness guarantees with fast performance... and\nit plays nice with ctypes! Come learn how you can call Rust functions\nfrom Python code and finally say goodbye to hacking C!\n"}, {"title": "Neural Nets for Newbies", "description": "Neural networks have regained popularity in the last decade, but they\nget dismissed as being too complicated to understand and implement. This\ntalk breaks down the neural net structure as simply as possible, so you\nhave a framework on which to grow your knowledge in the space. I will\nput neural nets in the context of real-world applications and share\nPython packages and code where you can get started building your own.\nComing out this talk you won't know everything about neural nets, but\nyou will walk away with a solid foundation and some resources on where\nto go next to learn more.\n"}, {"title": "Oh, Come On Who Needs Bytearrays", "description": ""}, {"title": "Open Source for Newcomers and the People Who Want to Welcome Them", "description": "Open source can be fun and rewarding, but it can also be intimidating.\nThis talk addresses some of the biggest technical and psychological\nbarriers to contributing, from the perspective of both the newcomers who\nwant to overcome them and the maintainers who want to remove them.\n"}, {"title": "Opening Statements - Julia Evans", "description": ""}, {"title": "Other people's messy data (and how not to hate it!)", "description": "Have you ever viscerally hated a dataset? Do you want to just get data\ncleaning out of the way? Are you always left wondering how it consumes\nmost of your time? Whether you work in the sciences, work with\ngovernment data or scrape websites, data cleaning is a necessary evil.\nWe'll share our woes and check out state of the art in day to day data\ncleaning tools and strategies.\n"}, {"title": "Pandas From The Ground Up", "description": "The typical Pandas user learns one dataframe method at a time, slowly\nscraping features together through trial and error until they can solve\nthe task in front of them. In this tutorial you will re-learn how to\nthink about dataframes from the ground up, and discover how to select\nintelligently from their abilities to solve your data processing\nproblems through direct and deliberately-chosen steps.\n"}, {"title": "Performance by the Numbers: analyzing the performance of web applications", "description": "Everyone knows poor performance when they see it, and performance\nconcerns affect every application -- web applications more than most.\nBut finding performance problems can be extraordinarily difficult, and\nrequires an analytical approach coupled with good instrumentation. This\ntalk explores approaches to instrumentation and what that\ninstrumentation can tell you.\n"}, {"title": "Porting Python to run without an OS", "description": "We've ported Python to run directly on hardware, without an OS, as a\ntesting and exploration environment for firmware, ACPI, and UEFI. This\ntalk will explore porting Python to a new platform, embedding Python,\nrecreating enough of libc and POSIX to run Python without an OS, and\nbinding to platform-specific services. Includes live demo of bare-metal\nPython, directly driving hardware.\n"}, {"title": "PostgreSQL Proficiency for Python People", "description": "PostgreSQL has become the default database for most green-field\ndevelopment projects, and is the data storage architecture behind many\nmajor Python-based success stories, such as Instagram. Despite a\nreputation as being complex and fiddly, Postgres is easy to install,\nadminister, maintain, and use... with just a little bit of orientation.\nThis is that orientation.\n"}, {"title": "Practical Graph/Network Analysis Made Simple", "description": "Have you ever wondered about how those data scientists at Facebook and\nLinkedIn make friend recommendations? Or how epidemiologists track down\npatient zero in an outbreak? If so, then this tutorial is for you. Here,\nwe will explore a bike sharing data set as a way to understand the kinds\nof problems that can be solved using graph analytics.\n"}, {"title": "PyPy.js: What? How? Why?", "description": "PyPy.js is an experiment in building a fast and compliant in-browser\npython interpreter, by compiling PyPy into javascript and retargeting\nits JIT to emit javascript code at runtime. This talk will demonstrate\nthe combination of technologies that make such a thing possible, the\nresults achieved so far, and the challenges that still remain when\ntaking python onto javascript's home turf.\n"}, {"title": "Python by Immersion", "description": "A very fast introduction to Python for software developers with\nexperience in other languages. Instead of a traditional top-down\npresentation of Python's features, syntax, and semantics, students are\nimmersed in the language bottom-up with hundreds of small examples using\nthe interactive interpreter to quickly gain familiarity with most of the\ncore language features.\n"}, {"title": "Python Concurrency From the Ground Up: LIVE!", "description": "There are currently three popular approaches to Python concurrency:\nthreads, event loops, and coroutines. Each is shrouded by various\ndegrees of mystery and peril. In this talk, all three approaches will be\ndeconstructed and explained in a epic ground-up live coding battle.\n"}, {"title": "Python Epiphanies", "description": "This tutorial is for developers who've been using Python for a while and\nwould consider themselves at an intermediate level, but are looking for\na deeper understanding of the language. It focuses on how Python differs\nfrom other languages in subtle but important ways that are often\nconfusing, and it demystifies a number of language features that are\nsometimes misunderstood.\n"}, {"title": "Python Performance Profiling: The Guts And The Glory", "description": "Your Python program is too slow, and you need to optimize it. Where do\nyou start? With the right tools, you can optimize your code where it\ncounts. We\u2019ll explore the guts of the Python profiler \u201cYappi\u201d to\nunderstand its features and limitations. We\u2019ll learn how to find the\nmaximum performance wins with minimum effort.\n"}, {"title": "Pythons are Deaf, So are Some Pythonistas", "description": "ASL, like Python, is a language which is both fun and powerful. We have\nused Python to build a tool, ASL-CLeaR (American Sign Language Concept\nLearning Resource) for the DHH community which will teach STEM\nterminology using ASL exclusively. We are also building a summer program\nto teach Python in English/ASL to DHH students.\n"}, {"title": "Rethinking packaging, development and deployment", "description": "Applying functional programming ideas to solve the problem of packaging\nsoftware and configuration of systems in a stateless and deterministic\nway. Nix project addresses those problems in unique way based on\nacademic research that has been applied to real world software\ncollections in last 10 years.\n"}, {"title": "Robots Robots Ra Ra Ra!!!", "description": "Lots of people want to learn more about robotics but are unsure where to\nstart. Turns out there is a python robotics framework, and it runs some\nof the most sophisticated robots in the world! It is also open source,\nwell-documented, and has a great community. In this talk we will look at\nRobot Operating System ROS.\n"}, {"title": "Satellite mapping for everyone ", "description": "Concerned about urban sprawl, landscape change or ecosystem recovery?\nWildfire, drought or flooding? A vast amount of satellite data,\ncollected since the 1970s, is freely available for your next mapping\nproject. I will demonstrate how Python helps to make sense of odd\nscientific data and metadata formats and produce beautiful visualization\nand map products.\n"}, {"title": "Schemas for the Real World", "description": "Development challenges us to code for users\u2019 personal world. Users give\npush-back to ill-fitted assumptions about their own name, gender, sexual\norientation, important relationships, & other attributes that are\nindividually meaningful. We'll explore how to develop software that\nbrings real world into focus & that allows individuals to authentically\nreflect their personhood & physical world.\n"}, {"title": "Serialization formats are not toys", "description": "It\u2019s not in the OWASP Top 10, but you don\u2019t have to look far to hear\nstories of security vulnerabilities involving deserialization of user\ninput. In this talk I\u2019ll go over what the threat is and how you might be\nmaking yourself vulnerable. I\u2019ll cover the features (not bugs: features)\nof XML, YAML, and JSON that make them surprisingly dangerous, and how to\nprotect your code from them.\n"}, {"title": "Shiny, Let's Be Bad Guys: Exploiting and Mitigating the Top 10 Web App Vulnerabilities", "description": "The Internet is a dangerous place, filled with evildoers out to attack\nyour code for fun or profit, so it's not enough to just ship your\nawesome new web app--you have to take the security of your application,\nyour users, and your data seriously. You'll get into the mindset of the\nbad guys as we discuss, exploit, and mitigate the most common web app\nsecurity flaws in a controlled environment.\n"}, {"title": "Ship it: Deployments with Pip", "description": "Gone are the days where creating system packages or scp-ing tar balls\nwere required for deployment. With Pip, Fabric, and Jenkins we've\ndeveloped a pipeline to simplify deployments and rollbacks that\ndove-tails into configuration management and virtualization. New\nmachines can come fully deployed and ready to rock at a moments notice\nallowing you to scale out nodes quickly and painlessly.\n"}, {"title": "Smart services & smart clients:  How micro-services change the way you build and deploy code.", "description": "At Runscope we've standardized the idea of small independent \"\"smart\"\"\nservices that can be quickly built, deployed, and scaled. This talk\nexamines lessons learned from writing these services as well as patterns\nfound in other platforms. We present a detailed look at the code that\nallow us to build dozens of services, serving billions of requests,\nwhile deploying to our cluster over 20 times a day.\n"}, {"title": "So you think you can PDB?", "description": "This talk will be an introduction to the most commonly used Python\nDebugger commands and what they do. Learn how to navigate and inspect\ncode from the pdb prompt so you can better understand how it works. The\nPython Debugger is a valuable debugging tool for all levels of Python\nprogrammers. You should walk away being able to debug the next Python\ncode you encounter!\n"}, {"title": "Statistical inference with computational methods", "description": "Statistical inference is a fundamental tool in science and engineering,\nbut it is often poorly understood. \u00a0This tutorial uses computational\nmethods, including Monte Carlo simulation and resampling, to explore\nestimation, hypothesis testing and statistical modeling. \u00a0Attendees will\ndevelop understanding of statistical concepts and learn to use real data\nto answer relevant questions.\n"}, {"title": "streamparse: real-time streams with Python and Apache Storm", "description": "Real-time streams are everywhere, but does Python have a good way of\nprocessing them? Until recently, there were no good options. A new open\nsource project, streamparse, makes working with real-time data streams\neasy for Pythonistas. If you have ever wondered how to process 10,000\ndata tuples per second with Python -- while maintaining high\navailability and low latency -- this talk is for you.\n"}, {"title": "Super considered super!", "description": "Python's super() is well-designed and powerful, but it can be tricky to\nuse if you don't know all the moves.\n\nThis talk offers clear, practical advice with real-world use cases on\nhow to use super() effectively and not get tripped-up by common\nmistakes.\n"}, {"title": "Systems programming as a swiss army knife", "description": "You might think of the Linux kernel as something that only kernel\ndevelopers need to know about. Not so! It turns out that understanding\nsome basics about kernels and systems programming makes you a better\ndeveloper, and you can use this knowledge when debugging your normal\neveryday Python programs.\n"}, {"title": "TDD with Django, from scratch: a beginner's intro to testing and web development", "description": "A beginner's introduction to testing and web development with Django.\nWe'll build a simple web app, from scratch, but with full TDD, including\nfunctional testing with Selenium and unit testing Django's views,\ntemplates, and models. Some familiarity with Python is desirable, but no\nprior knowledge of Django or testing is assumed.\n"}, {"title": "Technical Debt", "description": "Technical debt is the code monster hiding in everyone's closet. If you\nignore it, it will terrorize you at night. To banish it and re-gain your\nproductivity, you'll need to face it head on.\n"}, {"title": "Techniques for Debugging Hard Problems", "description": "Sometimes your programs have bugs. Often they're shallow things, simple\nAttributeErrors or TypeErrors. Sometimes they're large, complex, and\nnearly impossible to debug. This talk explores techniques for figuring\nthese out.\n"}, {"title": "Terminal whispering", "description": "Have you ever wanted to add a status bar to your command line program?\nOr maybe color the output a bit? Or do you want to write a fullscreen\nterminal application like ls, top, vim, or emacs? Then you need to speak\na bit of terminal! This talk describes how to talk to your terminal from\nscratch and goes on to show why Python libraries Blessings and Urwid are\nso awesome.\n"}, {"title": "The Ethical Consequences Of Our Collective Activities", "description": "As more of the world is controlled by software, software developers have\nan increasing obligation to serve that world well. Yet, we don't yet\nhave a sense of what makes a good ethical standard. The fast pace,\nsuccess, and youth (in both historical and demographic terms) of our\nindustry have given us the sense that such a standard might not be\nrequired. This talk will correct that misconception.\n"}, {"title": "The REST Ascendancy", "description": "As frontend web frameworks like AngularJS and Backbone.js take over, is\nPython on the server destined to be demoted to a basic REST interface?\nIf we embrace our new JavaScript overlords, how do we ensure Python is\nbest positioned for this new world of REST on the server?\n"}, {"title": "The (Slightly) Less Sorry State of SSL", "description": ""}, {"title": "To ORM or not to ORM", "description": "Database ORMs make it really convenient to pythonically query a\ndatabase, but it's difficult to decide when to use them and when not\nto---and what the alternatives are. In this talk you'll learn strategies\nfor deciding when and where to use an ORM, when to be cautious, and how\nto tell that you're doing the right thing, drawn from real-world lessons\nlearned building the Inbox email platform.\n"}, {"title": "Twitter Network Analysis with NetworkX", "description": "Twitter's network is fascinating because of its connectivity: there are\nhashtags, followers, retweets, and replies. Using the network analysis\ntool NetworkX, we'll look at how to make sense of these channels. We'll\ncover the basics of network theory, including types of networks and how\nmeasure influence, and we'll apply those measures to our investigation\nof Twitter's network.\n"}, {"title": "Type python, press enter. What happens?", "description": "This talk discusses how the Python interpreter starts, from the\nperspective of the operating system (OS). Together, we will see the ins\n& outs of processes: fork(), exec(), stdin, and stdout.\n\nIt focuses on OS concepts and requires no background knowledge, using\nanalogies to Python data structures. (The talk does not discuss Python\u2019s\nown initialization, such as site.py or global variables.)\n"}, {"title": "Usability Testing on the Cheap", "description": "While everyone agrees that usability testing should be an important part\nof your development process, not everyone has enough money laying around\nto pay for a dedicated team or consultants. In this talk, Katie will\nreview a number of inexpensive options that can help any team deliver a\nusable product.\n"}, {"title": "Using Supervisor For Fun And Profit", "description": "Supervisor is a popular Python application that lets you control and\nmonitor process state on UNIX-like systems. This talk describes what it\nis, and how to use it effectively to make your application deployments\nbetter.\n"}, {"title": "WebSockets from the Wire Up", "description": "HTML5 WebSockets power the real-time web. Come take a deep dive into how\nthey work, from the big picture down to what goes over the wire,\nincluding insight into the performance benefits of the protocol, via a\nreal-world example of how WebSockets are implemented client- and\nserver-side in Python.\n"}, {"title": "What can programmers learn from pilots?", "description": "What can Python-based software teams learn from aviation? Why should\nsoftware always fail hard? What's wrong with too many error logs? And\nwhy are ops people already like pilots? Learn all this, and about\nplanes, too.\n"}, {"title": "What Python can learn from Erlang", "description": ""}, {"title": "What to do when you need crypto", "description": "The cryptographic world doesn't lend itself to the typical developer\nflow of learning while doing. Add that to the massive amount of bad or\noutdated information on the web and many developers are lost or worse,\nbuild insecure systems. This tutorial will introduce developers to\nmodern cryptography with an eye towards practical scenarios around\npassword management, encryption and key management.\n"}, {"title": "Where in your RAM is \"python san_diego.py\"?", "description": "Gumshoes, the rogue program ``san_diego.py`` is threatening to cause\nhavok! What is it doing to hide itself? What kind of things is it doing?\nWho might it be communicating with? RAM is a big place - how can we even\nfind it, much less any of this information? Stay tuned and find out!\n"}, {"title": "Winning Machine Learning Competitions With Scikit-Learn", "description": "This tutorial will offer an introduction machine learning and how to\napply it to a Kaggle competition. We will cover methodologies that have\nworked well across a diverse set of problems, and then work on a current\nKaggle competition together using iPython notebook and scikit-learn. We\nwill cover concepts including feature extraction, feature selection,\nmodel evaluation, and data visualization.\n"}, {"title": "\"Words, words, words\": Reading Shakespeare with Python", "description": "This talk will give an introduction to text analysis with Python by\nasking some questions about Shakespeare and discussing the quantitative\nmethods that will go in to answering them. While we\u2019ll use Shakespeare\nto illustrate our methodologies, we\u2019ll also discuss how they can be\nported over into more 21st century texts, like tweets or New York Times\narticles.\n"}, {"title": "Your Brain's API: Giving and Getting Technical Help", "description": "Software engineers are never done learning since our field is always\nchanging. We are always beginners at some things and experts at others.\nAlong the way from beginner to expert we have to ask a lot of questions,\nbut it can be hard to get help. This talk gives concrete tools to help\nyou ask with confidence, and highlights common expert mistakes that\ninadvertently make people feel foolish.\n"}, {"title": "Zen of Quality", "description": "It is extremely important to PBS that digital viewers have an awesome\nexperience when viewing online videos. In this talk, we explain how PBS\nbuilt a system to collect, analyze, and measure who's getting a good\nexperience -- and who's not.\n"}, {"title": "Write an Excellent Programming Blog", "description": "Speaker: A. Jesse Jiryu Davis\n\nWriting rewards you and benefits us all: when you write you refine your thinking, share your knowledge, and connect with your niche community. This talk describes the special challenges of writing a programming blog. It outlines solid article structures, and offers methods for generating ideas and writing more skillfully. Get the guidance and inspiration to craft articles of enduring value.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Bake the Cookies, Wear the Dress: Connecting with Confident Authenticity", "description": "Speaker: Adrienne Lowe\n\nAre you interested in speaking at a tech conference, but you're unsure how you might share relevant technical information in an engaging way? Are you in a position of leadership or mentorship in open source and want to be more approachable, accessible, and collaborative? In a fun and light-hearted talk, learn actionable suggestions for inspiring others with your own confident authenticity.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "The cobbler's children have no shoes, or building better tools for ourselves", "description": "Speaker: Alex Gaynor\n\nAs developers, we make programs which do things. But we don't build nearly enough programs to make our own jobs easier. Once, not all that long ago, we didn't even have continuous integration servers. This talk will go through what types of new specialized tools we, as developers, can and should be building to make our jobs better.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Exception and error handling in Python 2 and Python 3", "description": "Speaker: Alex Martelli\n\nHandling errors and exceptions optimally is crucial in solid Python programs. Some technical details have changed in Python 3, and the talk covers those, but the core of \"\"best practices\"\" is quite enduring, and the talk focuses on presenting and explaining them.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Bayesian statistics made simple", "description": "Speaker: Allen Downey\n\nAn introduction to Bayesian statistics using Python. \u00a0Bayesian statistics are usually presented mathematically, but many of the ideas are easier to understand computationally. \u00a0People who know Python can get started quickly and use Bayesian analysis to solve real problems. \u00a0This tutorial is based on material and case studies from Think Bayes (O\u2019Reilly Media).\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Computational Statistics", "description": "Speaker: Allen Downey\n\nStatistical inference is a fundamental tool in science and engineering, but it is often poorly understood.  This tutorial uses computational methods, including Monte Carlo simulation and resampling, to explore estimation, hypothesis testing and statistical modeling.  Attendees will develop understanding of statistical concepts and learn to use real data to answer relevant questions.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "To mock, or not to mock, that is the question", "description": "Speaker: Ana Balica\n\nMocking is a very powerful testing concept that has some dangerous pitfalls. There are obvious use cases where mocks are an absolute requirement to be able to test a part of the app. Nevertheless sometimes apparently useful mocks can yield erroneous test results. This talk goes into deeper detail on the trade-off of using mocks in testing.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Reinventing Django for the Real-Time Web", "description": "Speaker: Andrew Godwin\n\nDjango has long been tied to the request-response pattern, but the upcoming \"\"channels\"\" project changes this and allows Django to natively support WebSockets, running tasks after responses, easily handle long-polling and more. Come and learn about the design, how we're trying to keep things as Django-like as possible, and how you can use it in your projects.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "See Python, See Python Go, Go Python Go", "description": "Speaker: Andrey Petrov\n\nBeing able to run C code from Python is pretty great, but what about running Go code from Python? Or even Python from Go? This talk will walk through the process of executing calls between Python and Go using CFFI bindings to bridge the two runtimes.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Wrestling Python into LLVM Intermediate Representation", "description": "Speaker: Anna Herlihy\n\nThe LLVM Project provides an intermediate representation (LLVM-IR) that can be compiled on many platforms. LLVM-IR is used by analytical frameworks to achieve language and platform independence. What if we could add Python to the long list of languages that can be translated to LLVM-IR? This talk will go through the steps of wrestling Python into LLVM-IR with a simple, static one-pass compiler.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "More Than Binary: Inclusive Gender Collection and You", "description": "Speaker: Anne DeCusatis\n\nMany people identify their gender in many ways. So why do we build systems to capture accurate gender information with a dropdown that only lists \u201cmale\u201d and \u201cfemale\u201d?\nThis talk covers why you might want to consider alternative ways of selecting gender for your users, a brief overview of the current best practices, issues addressed by my project Gender Amender, and why more work needs to be done.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "xonsh", "description": "Speaker: Anthony Scopatz\n\nXonsh is general purpose shell that combines Python and the best features of Bash, zsh, and fish. Relying only the standard library and PLY, the xonsh language is a strict superset of Python that compiles to a Python AST.  The shell provides exciting features such as a rich history, tab completion from bash and man pages, syntax highlighting, auto-suggestion, foreign-function aliases and more!\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Dispelling the 'Genius Programmer' myth through code review", "description": "Speaker: Ashwini Oruganti\n\nWe often hear people lament how hard it is to get a patch accepted to large Python open source libraries. Through a series of (often amusing) real-life anecdotes from Twisted, RPython, Cryptography, and examples from many other Python libraries, come learn about code reviews, getting your patches accepted, and tools/processes to encourage quality contributions.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Pyjion: who doesn\u2019t want faster for free?", "description": "Speakers: Brett Cannon, Dino Viehland\n\nAt PyCon US 2015 an experiment was started: could a JIT be added to CPython which would speed up performance **and** be fully backwards-compatible? Could unaltered extension modules live happily with a JIT? That experiment is Pyjion and this talk will explain what we changed to CPython to add a pre-existing JIT to it and whether we met our goal of being a benefit instead of a hindrance.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Refactoring Python: Why and how to restructure your code", "description": "Speaker: Brett Slatkin\n\nAs programs gain complexity, it becomes harder to add features and fix bugs. Reorganizing code is an effective way to make programs more manageable. This talk will show you Pythonic ways to do the most imporant \"\"refactorings\"\": Extract variables with __nonzero__; Change signatures with \\*args and \\*\\*kwargs; Extract fields and classes with @property; Create stateful closures with __call__; and more!\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Accelerating healthcare transactions with Python and PyPy", "description": "Speaker: Brian Corbin\n\nPython is well suited for many file processing tasks. However, Python is an uncommon\nlanguage choice for many organizations that need to process large files of\nhealthcare transactions.  This talk will share lessons we've learned\nprocessing healthcare transactions in Python running on PyPy.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Magic Wormhole- Simple Secure File Transfer", "description": "Speaker: Brian Warner\n\n\"\"magic-wormhole\"\" is a simple tool to move files from one computer to another, like \"\"scp\"\" but without the setup. By telling the recipient just a few secret words, the file is safely encrypted and delivered directly to the correct machine. The talk will explain the security mechanics, the cryptography (NaCl and SPAKE2), and how to use the underlying open-source library in your own applications.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Oneliner-izer: An Exercise in Constrained Coding", "description": "Speaker: Chelsea Voss\n\nWe'll describe the ideas and implementation behind Oneliner-izer, a \"\"compiler\"\" which can convert most Python 2 programs into one line of code. As we discuss how to construct each language feature within this unorthodox constraint, we'll explore the boundaries of what Python permits and encounter some gems of functional programming \u2013\u00a0lambda calculus, continuations, and the Y combinator.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Trainspotting: real-time detection of a train\u2019s passing from video", "description": "Speaker: Chloe Mawer\n\nAlmost anyone can set up their motion detection surveillance using just a few Python functions. This talk will walk through the development of a model used to detect whether a train is passing and in what direction it is going using a real-time video feed. You\u2019ll learn some basic motion detection techniques in Python as well as the effects of video quality on implementation.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "File descriptors, Unix sockets and other POSIX wizardry", "description": "Speaker: Christian Heimes\n\nHave you ever wondered how the OS manages open files and network connections, what this 'file descriptor' thing actually is all about, or what's so special about Unix sockets? In my talk I will give you a quick tour into the I/O layer and process model of Unix-like operating systems. You will learn how to securely identify and efficiently share resources between processes.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Django 1.8/1.9 and PostgreSQL: An Ever-Closer Union", "description": "Speaker: Christophe Pettus\n\nDjango 1.8/1.9 adds a whole bunch of cool new features that are specifically designed for PostgreSQL. We'll take a quick tour through them, and show when and how you can use them in real-world applications. We'll also talk about how to get the best performance out of PostgreSQL when using the Django ORM.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "PostgreSQL Proficiency for Python People", "description": "Speaker: Christophe Pettus\n\nPostgreSQL has become the default database for most green-field development projects, and is the data storage architecture behind many major Python-based success stories, such as Instagram. Despite a reputation as being complex and fiddly, Postgres is easy to install, administer, maintain, and use... with just a little bit of orientation. This is that orientation.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Git: A Peek Under the Hood", "description": "Speaker: Clara Bennett\n\nGit is a powerful source control tool, but the learning curve can be steep. This talk introduces the underpinnings of git, to provide a foundation for more confident and effective git use. My hypothesis is that having a solid mental model of what git is actually doing under the hood helps you more easily learn to use advanced git features.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Building Protocol Libraries The Right Way", "description": "Speaker: Cory Benfield\n\nOne of the great strengths of the Python ecosystem is the enormous collection of powerful, flexible libraries. However, these libraries tend to suffer from one extremely common design flaw that mean that the work done is not easily re-usable or transferable. In this talk, we talk about how to build libraries that can be used as widely as possible, through the lens of the Python Hyper HTTP project.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Postgres present and future", "description": "Speaker: Craig Kerstiens\n\nPostgres 9.5 was just released a few months ago and has a number of of new improvements we'll walk through including new JSONB functions, some analytical tooling, and of course upsert. Then we'll dive into what's coming in Postgres 9.6, the next Postgres release. Finally, we'll round it out with some look at the ecosystem of extensions.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Creating, building, testing, and documenting a Python project - a hands-on HOWTO", "description": "Speakers: Titus Brown, Luiz Irber\n\nWe will do a hands-on walkthrough of creating a new Python project, showing how to make use of git and GitHub, PyPI, distutils, nosetests, continuous integration, Sphinx, and other resources to support the development, distribution, and documentation of the project in a completely free and open manner.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Keynote", "description": "Speaker: Cris Ewing\n\nKeynote\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "The New Mobile Web: Service Worker, Push, and App Manifests", "description": "Speaker: Dan Callahan\n\nCompared to native apps, mobile websites are at a disadvantage: no installing, no push notifications, and they only work when you're online. This year, that changes.\n\nBrowser vendors are working together to implement open standards that address each of these shortcomings. This session examines how the Service Worker, Push, and App Manifest specifications fill the gap between web and native.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Remote Calls != Local Calls: Graceful Degradation when Services Fail", "description": "Speaker: Daniel Riti\n\nIn a world where we are becoming more dependent on the network to be reliable due to trends to decouple systems into distributed services, we must do our best to expect failure to occur everywhere and anywhere. This talks aims to explore different techniques for gracefully degrading when the networks fail and the services we depend on are no longer available.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Documentation-driven development - lessons from the Django Project", "description": "Speaker: Daniele Procida\n\nOne secret of Django's success is the quality of its documentation. As well as being key to the quality of the code itself, it has helped drive the development of Django as a community project, and even the professional development of programmers who adopt Django.\n\nI'll discuss how Django has achieved it, and how any project can easily win the same benefits.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "SQLite: Gotchas and Gimmes", "description": "Speaker: Dave Sawyer\n\nPython's sqlite module provides access to the most deployed database engine\nin the world. We'll go beyond the docs to discover how to unlock the full\npower of SQLite without additional libraries. We'll identify deadly\npitfalls and produce clean Pythonic code. Find out why the creators say to\nthink of SQLite not as a replacement for Oracle, but as a replacement for\nopen().\n\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "HTTP/2 and Asynchronous APIs", "description": "Speaker: Davey Shafik\n\nHTTP/2 (H2) is coming, and along with it a whole new way of communicating over the web. Connection re-use, prioritization, multiplexing, and server push are just some of the features in H2, and they will change how the web works.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Get Started with Git", "description": "Speaker: David \"DB\" Baumgold\n\nYou want to learn Git, but you don't know where to start. Or maybe you're already using Git, but you know you're not using it to its full potential. With this tutorial, you'll level up from Git novice to Git wizard, learning how to master your version control system, travel through time, and change history.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Prototyping New APIs with Flask", "description": "Speaker: David \"DB\" Baumgold\n\nYou need to build a new API, but which tools do you use? Flask is a microframework that makes web development a snap, and an ecosystem of extensions and other tools has grown around it to make it perfect for prototyping APIs. In this talk, we'll see how to get started with Flask, and learn the best parts of its ecosystem for API development.\n\nSlides can be found at: https://speakerdeck.com/singingwolfbo... and there is a GitHub repository for the code here: https://github.com/singingwolfboy/bui...\n\nhttps://us.pycon.org/2016/schedule/pr..."}, {"title": "Deploying and scaling applications with Docker, Swarm, and a tiny bit of Python magic", "description": "Speaker: J\u00e9r\u00f4me Petazzoni\n\nDocker is an open platform to build, ship, and run any application, anywhere. In this hands-on tutorial, you will learn advanced Docker concepts, and see how to deploy and scale applications using Docker Swarm clustering abilities and reusable, customizable Python tooling.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Pythons in A Container - Lessons Learned Dockerizing Python Micro-Services", "description": "Speaker: Dorian Pula\n\nMicro-services and Docker are all the rage for developing scalable systems.  But what challenges will you face when developing and deploying Python apps using Docker to production? This talk goes into the real-life lessons learned from creating, deploying and scaling Dockerized Python applications.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Designing secure systems with Object-Capabilities, Python, and Cap'n Proto", "description": "Speaker: Drew Fisher\n\nObject-capability security is a technique for designing systems that lets us apply object-oriented design principles to security policies, reducing cognitive overhead and risk of errors that lead to vulnerabilities.  In this talk, I'll explain capabilities, how they work, and what cool things they make possible for your systems, with real-world examples from sandstorm.io.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "What Is and What Can Be: An Exploration from `type` to Metaclasses", "description": "Speaker: Dustin Ingram\n\nMost of us use `type` every day, but few can say they know it well. This talk explores `type` and along the way, reveals how it relates to `object`, `class` and more, eventually arriving at deeper understanding of metaclasses in Python.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Keeping cool, using a Raspberry PI to create a networked temperature sensor", "description": "Speaker: Dwight Hubbard\n\nWant to keep things cool?  Come learn how to build a networked temperature sensor using a Raspberry PI, some simple hardware, and Python.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Teaching Python: The Hard Parts", "description": "Speaker: Elana Hashman\n\nSo you want to share the love and start teaching Python? It's dangerous to go alone! In this talk, I will share some of my experience teaching Python to newcomers of all levels and issues I've encountered. I hope to raise your awareness of some of the pitfalls different beginner Python programmers encounter, giving you some tools to help you build curriculum and answer difficult student questions.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Kalman Filters for non-rocket science", "description": "Speaker: Elizabeth Ramirez\n\nKalman Filters have been widely used for scientific applications. No wonder people often think they involve complex math, however you can actually introduce the Kalman Filter in your daily data processing work, without the complex math you would imagine. This talk will show how to implement the discrete Kalman Filter in Python using NumPy and SciPy.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Small Batch Artisanal Bots- Let's Make Friends", "description": "Speaker: Elizabeth Uselton\n\nBots are a fun, creative, community oriented project. They are perfect for a beginning programmer looking to build something cool, but open ended enough to hold the interest of an experienced developer. In this talk we'll go over the Python tools for building a great twitter bot, including where to find fun data sets, hosting your bot, delayed jobs, and examples of weird and wonderful bots.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Documenting your project with Sphinx & Read the Docs", "description": "Speaker: Eric Holscher\n\nThis tutorial will cover how to write documentation using RST, Sphinx, and publish it on Read the Docs. It will walk users through the experience of taking a basic module, writing multiple pages of documentation for it, and then publishing it for the world to see. We'll learn about the mental model required to write documentation, specifically ho\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Practical Network Analysis Made Simple", "description": "Speaker: Eric J. Ma\n\nHave you ever wondered about how those data scientists at Facebook and LinkedIn make friend recommendations? Or how epidemiologists track down patient zero in an outbreak? If so, then this tutorial is for you. In this upgraded version of last year's tutorial, we will explore a variety of network analysis problems, including graph construction, traversal, and statistics.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "What You Need to Know About Open Source Licenses", "description": "Speaker: Felix Crux\n\nAnyone who uses Open Source has run into software licenses. Too often, our understanding of this mess of legalese is incomplete, confused, or based on bad assumptions. But we can\u2019t ignore them: licenses govern everything about how we use others\u2019 code \u2014 and how they use ours. Come learn the basics of copyright, what different licenses let you do, and why & how you should choose one for your code!\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Final Remarks and Conference Close", "description": ""}, {"title": "Diving into the Wreck: a postmortem look at real-world performance", "description": "Speaker: Geoff Gerrietts\n\nAs a young engineer interested in performance, much of the advice I saw on performance management focused on algorithms and rules of thumb. It\u2019s good advice, but it doesn\u2019t address the most common problems. This talk will cover a handful of the most common performance problems I\u2019ve encountered in my career. We will talk about how to recognize them, what causes them, and how to resolve them.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Laser Cutters, 3D Printers, and Python", "description": "Speaker: Giles Hall\n\nHow to leverage python to generate physical, tangible things.  We will discuss the basics of laser cutters, 3D printers, and how you can use python to design physical objects.  After a brief introduction to these    technologies, we will explore a few different examples of how we can use python to generate designs suitable for 3D printing and laser cutting.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Shipping Software To Users With Python", "description": "Speaker: Glyph\n\nPython is a versatile language, available on a wide variety of platforms. However, when it comes to shipping code to users on those platforms, Python violates Zen Rule 13: \u201cThere should be one\u2014and preferably only one\u2014obvious way to do it.\u201d: there are a lot of ways to do it, and many of them are far from obvious.  In this talk I'll show you how to build Python code into something a user can use.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Python Sorted Collections", "description": "Speaker: Grant Jenks\n\nC++, Java, and .NET provide sorted collections types. Wish Python did too? Look around and you'll find Pandas DataFrame indexes, Sqlite in-memory databases, even redis-py sorted set commands. The SortedContainers module was designed to fill this gap with sorted list, dict and set implementations. It's written in pure-Python but generally faster than C-extension modules. Come see how it works.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Python Language", "description": "Speaker: Guido van Rossum\n\nPython Language\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Python as a configuration language", "description": "Speaker: Guillermo P\u00e9rez\n\nThe enormous size of Facebook's infrastructure and its \"\"Move Fast\"\" culture pose a challenge for the configuration framework, requiring a safe, fast and usable system to deploy settings to hundreds of thousands of servers.\n\nPython plays a special role in this framework, being the tool for generating the configuration, paired with thrift for enhanced schema validation and type-safety.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Outside-In TDD", "description": "Speaker: Harry Percival\n\nAn intermediate-level Test-Driven-Development workshop, presented as a hands-on exploration of \"\"outside-in\"\" TDD, in the style of a code-dojo code kata.  Will include discussion of \"\"double-loop\"\" BDD/TDD, outside-in vs inside-out, a detailed discussion of the pros + cons of mocking, test isolation, letting the tests drive design, and what are tests for anyway?\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "How I built a power debugger out of the standard library and things I found on the internet", "description": "Speaker: Doug Hellmann\n\nSmiley spys on your application, recording everything it does, using Python's built-in tracing facility and a database to create a complete record of your program's runtime so you can study it. Most of the tools I used to create Smiley are in Python's standard library, and the history of Smiley's development serves as a framework to discuss those tools and how you can tap their power yourself.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Get Instrumented: How Prometheus Can Unify Your Metrics", "description": "Speaker: Hynek Schlawack\n\nTo get real time insight into your running applications you need to instrument them and collect metrics: count events, measure times, expose numbers. Sadly this important aspect of development was a patchwork of half-integrated solutions for years. Prometheus changed that and this talk will walk you through instrumenting your apps and servers, building dashboards, and monitoring using metrics.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Improving Learning Resources and Community for Deaf Sign Language Users through Deaf Awareness", "description": "Speaker: Sarah Jessica Leivers\n\nDeaf people are underrepresented in programming roles and in the wider CS community. There are extra obstacles that Deaf people face when learning to code and integrating/networking within the industry. Python might be ideal for teaching Deaf people to program, and with the help of some Deaf Aware Pythonistas, the Python community might be the ideal place for Deaf programmers to feel included.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "IPython Notebook in Data Intensive Communities: Accelerating the process of Discovery", "description": "Speakers: Frances Haugen, Patrick Phelps\n\nHow does IPython Notebook (also known as Jupyter Notebook) change how data intensive teams work? This talk focuses on how the Search and Ads teams at Yelp adopted IPython notebook and how it changed how analysis is undertaken and communicated. Tradeoffs between ease-of-use and reusable code production will also be discussed along with security implications of adoption in an enterprise context.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "A Beginner's Guide to Deep Learning", "description": "Speaker: Irene Chen\n\nWhat is deep learning? It has recently exploded in popularity as a complex and incredibly powerful tool. This talk will present the basic concepts underlying deep learning in understandable pieces for complete beginners to machine learning. We will review the math, code up a simple neural network, and provide contextual background on how deep learning is used in production now.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Revitalizing Python Game Development- Packaging, Performance, and Platforms", "description": "Speaker: Jacob Kovac\n\nWith the advent of mobile platforms, as well as the prevalence of the GPU, Python has fallen almost entirely out of favor with game developers. However, there are some exciting solutions to the major issues being built on top of the Kivy GUI Framework. This talk will cover the recent developments that make it possible to build high quality, cross-platform games in Python.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Statistics for Hackers", "description": "Speaker: Jake Vanderplas\n\nStatistics has the reputation of being difficult to understand, but using some simple Python skills it can be made much more intuitive. This talk will cover several sampling-based approaches to solving statistical problems, and show you that if you can write a for-loop, you can do statistics.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "User Research for Non-Researchers", "description": "Speaker: Jane Davis\n\nUser research is a great way to avoid wasting your time. It doesn't have to be time-consuming, elaborate, or performed by a UX professional.In this talk, I'll go over why and how to do lightweight research on any product or topic, no matter what your background and training are. I'll focus on the most effective tools for quick research, and some of the common pitfalls.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Better Integration Testing with Cucumber", "description": "Speaker: Jay Goel\n\nOne of the hardest questions to answer is \"\"does my program help the user accomplish their goals?\"\" Whether that person is using our website or a programmer using our library, this talk will describe how to write automated tests which map to tasks our users are trying to accomplish. We will demonstrate specific Python testing libraries and evaluate the pros and cons of this approach to testing.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Introduction to Docker and containers", "description": "Speaker: J\u00e9r\u00f4me Petazzoni\n\nDocker is an open platform to build, ship, and run any application, anywhere. It can be used in many ways: providing clean, isolated development environments; quickly spinning up test instances for CI purposes; ensuring coherence between development and production platform; and much more.\n\nIn this hands-on tutorial, you will learn basic Docker concepts, and use it to run Python applications.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Networking without an OS", "description": "Speaker: Josh Triplett\n\nMany Python modules, such as socket and select, wrap low-level functionality written in C and provided by the OS. But what if you don't have an OS, and don't want any C code? We implemented client and server networking in Python itself, for a bare-metal environment running without an OS.\n\nOur socket and select implementations support Python HTTP server and client modules, which we'll demo live.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Diving into Machine Learning through TensorFlow", "description": "Speakers: Julia Ferraioli, Amy Unruh, Eli Bixby\n\nMachine learning can be an intimidating subject. In this session, we\u2019ll get practical, hands-on experience with core concepts in machine learning with TensorFlow, an open source deep learning library. We\u2019ll introduce the basics of TensorFlow, including how to ingest and prepare raw data for use, run a variety of algorithms to gain insight from the data, and have some fun with visualization.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Building An Interpreter In RPython", "description": "Speaker: Juozas Kaziuk\u0117nas\n\nTo understand how dynamic programming languages get executed I set out to build a PHP interpreter. Not a joke, I really did it and it worked! The final result was a well-tested piece of Python code, which could be compiled to be very performant as well.\n\nThe goal of this talk is to introduce you to the basics of interpreters and the tools available in RPython to build one.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Keynote", "description": "Speaker: K Lars Lohn\n\nKeynote\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Building a Quantitative Trading Strategy To Beat the S&P500", "description": "Speaker: Karen Rubin\n\nTwo years ago, Karen embarked on a project to learn how to research, write and trade algorithms to invest in the market. She re-learned python and explored what would happen if you invested in women-led companies over a 12-year period. In this talk, she will walk through the highs and lows of her journey from initial data gathering, through writing a strategy to validation and trading.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Usable Ops: How to make web infrastructure management easier.", "description": "Speakers: Kate Heddleston, Joyce Jang\n\nAs developer tools increase in power, the systems we\u2019re able to build do too. However, with great power comes great...complexity, and the systems we build today are more complex than ever before. This talk is about reducing the complexity of your web infrastructure, and making it easier for developers on your team to learn, use, and manage your infrastructure.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "The computer science of marking computer science assignments", "description": "Speaker: Katie Bell\n\nWhen writing systems to test if beginner programmers' code was correct, I didn't expect to need numpy, scipy a custom C module and a whole lot of cool geometry algorithms. Giving actionable feedback on tasks (in this case logo/turtle vector drawings), is necessary for the learning process and goes some fun places. Take this as a case study of writing efficient geometry number crunching in Python.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Build a Better Hat Rack: All Contributions Welcome", "description": "Speaker: Katie McLaughlin\n\nBy default, we idolise a 'open source contributor' as a person that contributes code. But what about all the other things in the software development lifecycle - documentation, code review, marketing, support - so much work happens without proper acknowledgement. Learn just how every little bit helps, and how to find and acknowledge these contributions.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "A tale of concurrency through creativity in Python: a deep dive into how gevent works.", "description": "Speaker: Kavya Joshi\n\ngevent is an open source Python library for asynchronous I/O. It provides a powerful construct to build concurrent applications; think threads, except lightweight and cooperatively scheduled. We will delve into how gevent is architected from its building blocks \u2014 sophisticated coroutines, an event loop, and a dash of creativity to neatly integrate them.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Seriously Strong Security on a Shoestring (CW)", "description": "Speaker: Kelsey Gilmore-Innis\n\nAre you confident your Python webapp is secure? Really confident? Hand-it-over-to-a-team-of-expert-haxx0rs\u00ad-to-tear-into confident? Find out how, without any formal security background, we successfully built a site storing some of the most sensitive data imaginable that passed a formal security audit from the best in the business. Content warning: this talk includes discussion of sexual assault.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Django 101", "description": "Speaker: Kenneth Love\n\nWant to build web apps with Django but don't know where to start? Did the Django tutorial but still feel unsure? Django 101 is a gentle introduction to Django. By the end, you'll be more confident in starting projects, apps, and tying together the most common pieces of Django.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Machine Learning with Text in scikit-learn", "description": "Speaker: Kevin Markham\n\nAlthough numeric data is easy to work with in Python, most knowledge created by humans is actually raw, unstructured text. By learning how to transform text into data that is usable by machine learning models, you drastically increase the amount of data that your models can learn from. In this tutorial, we'll build and evaluate predictive models from real-world text using scikit-learn.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Removing Python's GIL: The Gilectomy", "description": "Speaker: Larry Hastings\n\nYou've heard of Python's \"\"GIL\"\"... but what is it?  What problems does it solve?  How does it work?  What are the ramifications of its design?   Attendees should have a basic knowledge of multithreaded programming.  Understanding C is helpful but not required.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "What can software engineers learn from the medical field?", "description": "Speaker: Laura Rupprecht\n\nThere is a long history of improvements to medical practices, many of which can be applied to software development. This talk will explore some of those practices, and how they can be translated to the world of software.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Lightning Talks - 2016-05-30", "description": ""}, {"title": "Lightning Talks - 2016-05-31 AM", "description": ""}, {"title": "Lightning Talks - 2016-05-31PM", "description": ""}, {"title": "Lightning Talks - 2016-06-01", "description": ""}, {"title": "Keynote", "description": "Speaker: Lorena Barba\n\nKeynote\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Pythonic Objects: implementing productive APIs with the Python Data Model", "description": "Speaker: Luciano Ramalho\n\nPython is so consistent that often we can infer the behavior of new objects by assuming they work as the built-ins. The Python Data Model is the foundation of this consistent behavior. This talk presents the construction of Pythonic objects: classes that feel \"\"natural\"\" to a Python programmer, and leverage some of the best language features by implementing key protocols of the Data Model.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Ansible 101", "description": "Speaker: Luke Sneeringer\n\nAnsible has become one of the most popular tools available for deploying applications and otherwise managing large numbers of servers. Its agentless nature means that the only thing you need on a server to be able to orchestrate it is SSH. This tutorial will get you started with Ansible, first by covering the concepts, and then by deploying a non-trivial application together.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "The Hitchhiker's Guide to TLS & SSL", "description": "Speakers: lvh, Cory Benfield, Glyph, Hynek Schlawack, Paul Kehrer\n\nSince the SSL/TLS vulnerabilities in recent years, the landscape has improved considerably.  However, there\u2019s still a lot of knowledge necessary to use TLS in Python properly, and a lot of useful information for setting up and debugging TLS stacks that\u2019s hard to come by.  Join the makers of PyOpenSSL, the standard library\u2019s ssl module, requests/urllib3, Twisted, the former maintainer of a CA, and\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Why can't we be friends: do corporations and FOSS really mix?", "description": "Speakers: Lynn Root, Noa Resare\n\nMany folks in the Python community appreciate and contribute to Free and Open Source Software. But sometimes, your employer may not be on your side. We will present the current problem space that both community members and companies have for using and supporting FOSS. We will then walk you through arguments and solutions to help increase your company's engagement with the community.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Making an Impact with Python Natural Language Processing Tools", "description": "Speakers: Hobson Lane, Dan Fellin, Jeremy Robin\n\nDo your tweets get lost in the shuffle? Would you like to predict a tweet's impact before you hit send? Python now has all the tools to make this possible. Several Python packages for machine learning and natural language processing have reached \"\"critical mass\"\" and can now be combined to perform these and other powerful natural language processing tasks. This tutorial will teach you how.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Putting 1 million new words into the dictionary", "description": "Speaker: Manuel Ebert\n\n2015 was the year of spocking, amabots, dadbuds, and smol. Like half of all english words used every day, these words are not in the dictionary. Until we put them there. In this talk, I\u2019ll describe how we found definitions for 1 Million words that were missing from dictionaries, what it takes to do Natural Language Processing at that scale, and how to be the least popular scrabble winner.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Publish your code so others can use it in 5 easy steps", "description": "Speaker: Marko Samastur\n\nAs developers we all love well-documented, well-tested packages. If we do the same for our code it is easier for others to re-use our hard work, and maybe even contribute. We will take a quick look on how to do this using popular tools and only a small investment of time. With Github and some simple tools, setting up a well-groomed package doesn't have to be difficult.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Better Testing With Less Code: Property Based Testing With Python", "description": "Speaker: Matt Bachmann\n\nStandard unit tests have developers test specific inputs and outputs. This works, but often what breaks code are the cases we did not think about. Property based testing has developers define properties of output and has the computer explore the possible inputs to verify these properties. This talk will introduce property based testing and provide real world examples and patterns.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Python Typology", "description": "Speaker: Matthias Kramm\n\nWith PEP 484, Python now has a standard for adding type declarations to your programs. What checks these declarations, and how? I present one of the options, pytype, which Google has been working on for the last two years.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Advanced DNS Services for Securing Your Application and Enhancing User Privacy", "description": "Speaker: Melinda Shore\n\nThis talk introduces new features that have been added to the Domain Name System recently, and how to use those features to improve application security and user privacy. I also introduce the \"getdns\" Python library, which provides a simplified DNS API, and how to interface with popular crypto libraries.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Build Serverless Realtime Data Pipelines with Python and AWS Lambda", "description": "Speaker: Mercedes Coyle\n\nAt Scripps Networks Living, we operate a network of video players generating around 100 million events per day. In order to process, store, and analyze this data, we operate batch and realtime data pipelines based off of Lambda Architecture principles. After outgrowing our original events system, we rebuilt it from the ground up based on AWS Services and the learnings from our original system.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Introduction to Unit Testing in Python with Pytest", "description": "Speakers: Michael Tom-Wing, Christie Wilson\n\nIn this tutorial we\u2019ll be taking you on a journey into the wonderful land of unit testing with pytest. We\u2019ll be taking a step by step approach by iteratively adding unit test coverage to our awesome Cat In A Box\u2122 project. You will also get a crash course on Git, Github, virtualenvs, and test automation. By the end, we hope that you\u2019ll have a desire to bring testing to our own projects!\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Flask at Scale", "description": "Speaker: Miguel Grinberg\n\nDo you think that because Flask is a micro-framework, it must only be good for small, toy-like web applications? Well, not at all! In this tutorial I am going to show you a few patterns and best practices that can take your Flask application to the next level.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "The Life Cycle of a Python Class", "description": "Speaker: Mike Graham\n\nAnd end-to-end look at the life and death of a class and its instance.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Efficient Python for High-Performance Parallel Computing", "description": "Speaker: Mike McKerns\n\nThis tutorial is targeted at the intermediate-to-advanced Python user who wants to extend Python into High-Performance Computing. The tutorial will provide hands-on examples and essential performance tips every developer should know for writing effective parallel Python. The result will be a clear sense of possibilities and best practices using Python in HPC environments.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Descriptors and Metaclasses - Understanding and Using Python's More Advanced Features", "description": "Speaker: Mike M\u00fcller\n\nDescriptors and metaclasses are advanced Python features. While it is\npossible to write Python programs without active knowledge of them,\nknowing more about them facilitates a deeper understanding of\nthe language. With examples, you will learn how they work and how to\nwrite your own descriptors and metaclasses. Furthermore, you will understand\nwhen to use and when better not to use them.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Faster Python Programs - Measure, don't Guess", "description": "Speaker: Mike M\u00fcller\n\nOptimization can often help to make Python programs faster or use less memory.\nDeveloping a strategy, establishing solid measuring and visualization techniques\nas well as knowing about algorithmic basics and datastructures are the foundation\nfor a successful optimization. The tutorial will cover these topics.\nExamples will give you a hands-on experience on how to approach efficiently.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "SHINY, LET'S BE BAD GUYS", "description": "Speakers: Mike Pirnat, David Stanek\n\nThe Internet is a dangerous place, filled with evildoers out to attack your code for fun or profit, so it's not enough to just ship your awesome new web app--you have to take the security of your application, your users, and your data seriously. You'll get into the mindset of the bad guys as we discuss, exploit, and mitigate the most common web\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Antipatterns for Diversity", "description": "Speaker: Naomi Ceder\n\nJust as there is no single easy way to write good code there is no single easy way to increase diversity. There are, however, several things we (yes, even in the Python community) do which actually work against diversity. This talk will explore these anti-patterns for diversity,  as well as some ways that teams, companies, and organizations might work to combat them.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Code Unto Others", "description": "Speakers: Nathaniel Manista, Augie Fackler\n\nLarge codebases written by many authors over long periods of time too often become tragedies of the commons riddled with complexity and technical debt. We\u2019ll cover the pathologies that specifically encumber collaborative software development (drawing on examples from the Mercurial codebase) and describe alternative practices, their efficacy, and the costs of adopting them.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Machete-mode debugging: Hacking your way out of a tight spot", "description": "Speaker: Ned Batchelder\n\nWhen chasing mysterious bugs, it's helpful to use all the tools at your disposal.  We'll explore ways to use Python's dynamic tools to help track down the cause of head-scratching problems in large systems.  Tools include the inspect module, monkey-patching, trace functions, and the Python mechanisms at work behind them all.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Education Summit wrap-up: teaching Python \u2014 how hard can it be?", "description": "Speaker: Nicholas Tollervey\n\nIf you teach, if you Python \u2014 join us for a whirlwind tour of this year's Python Education Summit.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Memory Management in Python - The Basics", "description": "Speaker: Nina Zakharenko\n\nAs a new python developer, do you find memory management in Python confusing? Come to this talk to learn about the basics of how Memory Management works in Python. We'll cover the concepts of reference counting, garbage collection, weak references, __slots__, and the Global Interpreter Lock.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Keynote", "description": "Speaker: Parisa Tabriz\n\nKeynote\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "(PARTIAL) - Python Bootcamp", "description": "Speaker: Harry Percival\n\nIf you\u2019re thinking of coming to the conference but you\u2019re new to Python, this could be the session for you. Whether you\u2019re totally new to programming or you already know another language, this hands-on session will give you a crash-course in Python, and the ecosystem around it, to give you the context you need to get the most out of the rest of Pycon.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Reliably Distributing Compiled Modules", "description": "Speaker: Paul Kehrer\n\nShipping Python libraries is easy! ...until you want to use a C library. How do you easily and reliably deliver software to users when they may not have the libraries you depend on, or even a compiler? How do you handle the significant differences between linux, OS X, Windows, FreeBSD, and other platforms Python runs on?\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Here be Dragons - Writing Safe C Extensions", "description": "Speaker: Paul Ross\n\nWriting Python Extensions can be daunting. This talk de-mystifies what you need to know to write reliable and blazingly fast Pythonic C code.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Awaken your home: Python and the Internet of Things", "description": "Speaker: Paulus Schoutsen\n\nPeople are acquiring more and more connected devices for their homes. With no standard in place for communication, vendors are shipping their own platforms. This results in devices unable to work together. This talk shows people how to take control of their houses, their data and their privacy using Python \u2013 no cloud attached. Enter the world of Home Assistant.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Computational Physics with Python: Planetary Orbits from Newton to Feynman", "description": "Speaker: Pramod Gupta\n\nNewton's explanation of planetary orbits is one of the greatest achievements of science. We will follow Feynman's approach to show how the motion of the planets around the sun can be calculated using computers and without using Newton's advanced mathematics. This talk will convince you that doing physics with Python is way more fun than the way you did physics in high school or university.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "PyData 101: Essential data science skills for every programmer, from data to model to visualization", "description": "Speakers: Andy Terrel, Christine Doig\n\nData Science is fun and with the PyData toolset something you can start to build with in an afternoon. Join us as we start with a few datasets, learn how to munge, model, and materialize into simple web applications for predictions. At the end of the day you will come away with a solid understanding of the PyData ecosystem and tools used everyday by data scientists.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Python for Social Scientists: Cleaning and Prepping Data", "description": "Speaker: Renee Chu\n\nIf you're learning to code, working with data is a great way to implement your new skills. However, before you can do analysis or visualization, you must have a cleaned, prepped data set. This tutorial uses Python basics to unify data sets from disparate sources. It also shows you to write your programs as modules so you can re-use them for future projects.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Unit Tests, Cluster Tests: A Comparative Introduction", "description": "Speaker: Renee Chu\n\nYou've worked on a shared code base and contributed software tests. Great job! But you don't yet know how to set up the holy grail: Having test coverage that's so complete, you can sleep easy knowing any mistake is caught and spoken for. This talk is a \"\"102\"\" level of test talks, describing the different layers of test protection (unit and cluster) and how to approach writing each.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Discovering the world of Python through music", "description": "Speaker: Ria Baldevia\n\nThis talk aims to explain how music is a great way to learn Python with Pedro Kroger's  music programming library, Pyknon. In music programming, data structures are really important in order to organize notes, chords, durations, and rests. Eventually, a music programmer will utilize patterns and sequences in order to compose several bars of music.\nThis talk will utilize an animated presentation.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "A tale of two cellphones: Python on Android and iOS", "description": "Speaker: Russell Keith-Magee\n\nPython is enjoying a surge in popularity due to it's features as a language. However, over the last 10 years, mobile platforms have increased in importance, and Python doesn't have a good story on these platforms.\n\nIn this talk, Dr Russell Keith-Magee will give a technical dive into the work the BeeWare project has been doing to make Python as simple to use on Mobile as it is on other platforms.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "A Tour of Large-Scale Data Analysis Tools in Python", "description": "Speakers: Sarah Guido, Sean O'Connor\n\nLarge-scale data analysis is complicated. There\u2019s a limit to how much data you can analyze on a single box, but it is relatively inexpensive to get access to a large number of commodity servers. In this tutorial, you\u2019ll learn how to leverage the power of distributed computing tools to do large-scale data analysis quickly and affordably using pure Python, Hadoop MapReduce, and Apache Spark.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Playing with Python Bytecode", "description": "Speakers: Scott Sanderson, Joe Jevnik\n\nEver wondered what Python is actually doing when it executes your code?  Want to learn to hand-craft artisanal Python bytecode?  In this talk, we explain CPython's internal code representation, and we demonstrate techniques for modifying code objects for fun and profit.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "From Developer to Manager", "description": "Speaker: Sean O'Connor\n\nAs developers move along in their career, they will often be given the chance to move into management. This can be great, but it can also end in tears. In this talk we'll follow one developer's journey into management. Through that process we'll explore what one should think about before embarking on their own journey as well as some lessons for those who do decide to go down the management path.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Click: A Pleasure To Write, A Pleasure To Use", "description": "Speaker: Sebastian Vetter\n\nWe have a wide variety of packages and modules in Python that help build commandline tools in different ways. One of the more recent contenders is 'click'. It uses a very intuitive approach to create simple CLIs as well as complex ones. In this talk, I will introduce building CLIs with 'click' and illustrate some of its advantages.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Diff It To Dig It", "description": "Speaker: Sep Dehpour (Seperman)\n\nDo you know about objects __dict__ and __slots__ and what they hold? Hashing unhashables? Objects with loops pointing to themselves? Objects that have changed and you want to know how? No? Then this is the talk for you. In this talk we will learn a lot by diffing Python data types and objects, the same way that you can learn a lot about code by git diff. May the diff habit be with you!\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "The Fellowship of the Data", "description": "Speaker: Sev Leonard\n\nPython is an excellent tool for gathering, organizing, and storing data. This tutorial will cover efficient & scalable methods for performing these activities as part of an automated data pipeline, enabling attendees to build the One Data Pipeline To Rule Them All.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Python for Public Health: Building Statistical Models of Ciliary Motion", "description": "Speaker: Shannon Quinn\n\nCilia, microscopic hairs lining nearly every cell surface in your body, play a major role in developmental and sinopulmonary health. As such, deriving quantitative properties of their motion is compelling for both clinical and research purposes. Here we demonstrate a computational pipeline built entirely in Python for analyzing ciliary motion using a variety of machine learning techniques.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Python by Immersion", "description": "Speaker: Stuart Williams\n\nA very fast introduction to Python for software developers with experience in other languages.  Instead of a traditional top-down presentation of Python's features, syntax, and semantics, students are immersed in the language bottom-up with hundreds of small examples using the interactive interpreter to quickly gain familiarity with most of the core language features.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Python Epiphanies", "description": "Speaker: \n\nThis tutorial is for developers who've been using Python for a while and would consider themselves at an intermediate level, but are looking for a deeper understanding of the language.  It focuses on how Python differs from other languages in subtle but important ways that are often confusing, and it demystifies a number of language features that are sometimes misunderstood.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "HTTP Can Do That?!", "description": "Speaker: Sumana Harihareswara\n\nLearn how to get more performance, testability, and flexibility out of your web apps, using features already built into HTTP. I'll walk you through case studies exploring good (and bad) ideas, using Python, your browser, netcat, and other common tools.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Let's read code: the requests library", "description": "Speaker: Susan Tan\n\nImagine you\u2019re a new engineer at a workplace who has to learn a new unfamiliar codebase. After you acquire a copy of the repo, what is your next step? How do you dissect a new unfamiliar codebase to understand its inner workings? Come see a guided walkthrough of reading the widely used python-requests project, which gets over 18,000 downloads per day and powers many of the world\u2019s REST-based APIs.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Thank you", "description": ""}, {"title": "The Report Of Twisted\u2019s Death or: Why Twisted and Tornado Are Relevant In The Asyncio Age", "description": "Speaker: Amber Brown\n\nWith asyncio on the scene, the question has been asked: is there any point in having Twisted or Tornado around?\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Finding closure with closures", "description": "Speaker: Thomas Ballinger\n\nWhat are closures all about anyway, and why is there a new keyword in Python\n3?\nWe'll look at what a closure is, their history in the Python language, what\nthe Python 3 nonlocal keyword is about, and examine how closures are\nidiomatically used (and avoided) in Python.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Natural Language Processing with NLTK and Gensim", "description": "Speakers: Tony Ojeda, Benjamin Bengfort, Laura Lorenz\n\nIn this tutorial, we will begin by exploring the features of the NLTK library. We will then focus on building a language-aware data product - a topic identification and document clustering algorithm from a web crawl of blog sites. The clustering algorithm will use a simple Lesk K-Means clustering to start, and then will improve with an LDA analysis using the popular Gensim library.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Build Your First Web App with Hello Web App!", "description": "Speaker: Tracy Osborn\n\nThis workshop will walk you through creating a basic web app using Python and Django, from ideation to deployment. Set up your first web product with a database, registration and login forms, and perhaps get on the path to a fun side-project or future startup. Tailored for designers and non-programmers and taught by a designer.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Web Design for Non Designers", "description": "Speaker: Tracy Osborn\n\nWhen you are a programmer, web design can be super intimidating but still necessary for your websites and web apps. This talk will highlight the best ways to improve your design and UX skills so you can create an interfaces that are usable and at least semi-attractive without hiring a designer \u2014 guaranteed no designer-y jargon.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Data Carpentry: An Introduction to Python for Data Analysis and Visualization", "description": "Speaker: Tracy Teal\n\nIn most domains of research & industry, the increasing capacity to generate data means people need effective computational skills to turn this data into knowledge. We will teach participants how to get started with data analysis & visualization in Python. Skills taught are focused on novices & will enable participants to begin working with their own data & provide the basis for continued learning.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Regular Expressions", "description": "Speaker: Trey Hunner\n\nWhat are regular expressions, what are they useful for, and why are they so hard to read?  We'll learn what regular expressions are good for, how to make our own regular expressions, and how to make our regular expressions friendly and readable (yes it's possible, sort of).\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Computational Geometry in Python", "description": "Speaker: Tyler Reddy\n\nComputational geometry deals with the algorithms used to solve a diverse set of problems in geometry. Applications range from robotics (visibility) and geographic information systems to game development (collision detection) and medical research. This tutorial will introduce computational geometry, the related tools available in the Python ecosystem, and identify areas for improvement.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Thinking In Coroutines", "description": "Speaker: \u0141ukasz Langa\n\nThe wait for the killer feature of Python 3 is over! Come learn about asyncio and the beauty of event loops, coroutines, futures, executors and the mighty async/await. Practical examples. Bad puns. Pretty pictures. No prior asyncore, Twisted or Node.js experience required.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Python Software Foundation", "description": "Speaker: Van Lindberg\n\nPython Software Foundation\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Structured Data from Unstructured Text", "description": "Speaker: Van Lindberg\n\nEver wonder how if you google \u201cWhen was Python created?\u201d Google just has the answer in a box at the top for you?  In this talk we\u2019ll investigate how information extraction systems work, implement one using scikit-learn and NLTK, and learn about natural language processing along the way.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Visual Diagnostics for More Informed Machine Learning Within and Beyond Scikit-Learn", "description": "Speaker: Rebecca Bilbro\n\nVisualization has a critical role to play throughout the analytic process. Where static outputs and tabular data may render patterns opaque, human visual analysis can uncover volumes and lead to more robust programming and better data products. For Python programmers who dabble in machine learning, visual diagnostics are a must-have for effective feature analysis, model selection, and evaluation.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "When is it good to be bad? Web scraping and data analysis of NHL penalties", "description": "Speaker: Wendy Grus\n\nOn Jan. 20, Philadelphia Flyers forward Zac Rinaldo was ejected from a game after boarding Penguins defenseman Kris Letang. The Flyers came back to win. After the game, Rinaldo said he \"\"changed the game\"\" (for which he was suspended 8 games). Using Python for webscraping and data analysis, I explore data from 10 NHL seasons to investigate how hockey penalties affect the outcome of the game.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "When the going gets tough, get TUF going", "description": "Speakers: Ying Li, David Lawrence\n\nThe Update Framework (TUF) helps developers secure new or existing software update systems by providing integrity and freshness guarantees over package distribution. Integrate TUF into your deployment pipelines to provide integrity and version guarantees for build and deployment artifacts.\n\nSlides can be found at: https://speakerdeck.com/pycon2016 and https://github.com/PyCon/2016-slides"}, {"title": "Grok the GIL: Write Fast And Thread-Safe Python", "description": "I wrote Python for years while holding mistaken notions about the Global\nInterpreter Lock, and I've met others in the same boat. The GIL's effect\nis simply this: only one thread can execute Python code at a time, while\nN other threads sleep or await network I/O. Let's read CPython\ninterpreter source and try some examples to grok the GIL, and learn to\nwrite fast and thread-safe Python.\n"}, {"title": "Slot or not: higher performance custom objects in pure Python", "description": "``__slots__`` are versatile for certain kinds of uses and users, if you\nknow how they work.\n\nAt first glance, they seem like a free lunch, with improvements in both\ntime and space. At second glance, they seem to have so many caveats to\nmake them not worth using.\n\nThis talk is a deep dive into how ``__slots__`` work, how to wring every\nbenefit out, as well as the actual caveats and alternatives, with\nrecommendations for writers of core libraries as well as end users.\n"}, {"title": "Build a data pipeline with Luigi", "description": "`Luigi <https://pypi.python.org/pypi/luigi>`__ is a Python library for\nbuilding pipelines of batch processes. It \"handles dependency\nresolution, workflow management, visualization, handling failures,\ncommand line integration, and much more\"\n\nIn this tutorial, we will use Luigi to build a data pipeline that runs a\nseries of interdependent jobs. We will also discuss some real-world use\ncases for Luigi, and show how it can make running a data pipeline much\nmore robust and reliable.\n"}, {"title": "Time Series Analysis", "description": "Time series analysis is more relevant than ever with the rise of big\ndata, the internet of things, and the general availability of data that\nfollows events through time. This tutorial will introduce participants\nto the many versatile tools Python offers for exploring, analyzing, and\npredicting time series data. The tutorial will be a mix of lecture and\npractice, and it will be broken down into four components:\n\n(1) Handling timestamped data in Python\n(2) Commonly encountered problems with time series\n(3) Time series prediction exercises\n(4) Time series classification exercises\n"}, {"title": "Yes, It's Time to Learn Regular Expressions", "description": "Regular expressions have a reputation as opaque and inscrutable.\nHowever, the basic concepts behind \"regex\" and text pattern recognition\nare simple to grasp. This talk is for any programmer who isn't familiar\nwith Python's re module and its best practices. Stop putting it off,\nit's time to learn regular expressions!\n"}, {"title": "Executing python functions in the linux kernel by transpiling to bpf", "description": "``ebpf`` is a linux kernel byte-code which can be used for functionality\nranging from tracing system calls with kprobe to routing packets with\ntc. This talk is about a pure-python front-end for ebpf that allows\nusers to write simple python functions to be executed in the kernel.\nI'll first explain how this was made to work and then I'll show off some\nof the features/capabilities of this approach with working examples.\n"}, {"title": "Cython as a Game Changer for Efficiency", "description": "Are you running a Web application? Do you suffer from CPU bottlenecks\nthat slow down your growth? There's a tool that can easily fix all that,\nand then some. C++ knowledge not required.\n\nCome learn how Instagram, the world's largest Django deployment with\nmore than 600M active users, saved ~30% of global CPU by rewriting a\nhandful of modules on the critical path in Cython. Learn to apply those\ntechniques to your own projects with little effort and stop worrying\nabout switching to other programming languages or rewriting stable\ncomponents in C++.\n"}, {"title": "Introduction to Digital Signal Processing", "description": "Spectral analysis is an important and useful technique in many areas of\nscience and engineering, and the Fast Fourier Transform is one of the\nmost important algorithms, but the fundamental ideas of signal\nprocessing are not as widely known as they should be.\n\nFortunately, Python provides an accessible and enjoyable way to get\nstarted. \u00a0In this tutorial, I present material from my book, *Think\nDSP*, and from a class I teach at Olin College. \u00a0We will work with audio\nsignals, including music and other recorded sounds, and visualize their\nspectrums and spectrograms. \u00a0We will synthesize simple sounds and learn\nabout harmonic structure, chirps, filtering, and convolution.\n"}, {"title": "Complexity Science", "description": "Complexity Science is an approach to modeling systems using tools from\ndiscrete mathematics and computer science, including networks, cellular\nautomata, and agent-based models. \u00a0It has applications in many areas of\nnatural and social science.\n\nPython is a particularly good language for exploring and implementing\nmodels of complex systems. \u00a0In this tutorial, we present material from\nthe draft second edition of *Think Complexity*, and from a class we\nteach at Olin College. \u00a0We will work with random networks using\nNetworkX, with cellular automata using NumPy, and we will implement\nsimple agent-based models.\n"}, {"title": "Passing Exceptions 101: Paradigms in Error Handling", "description": "Exception handling in Python can sometimes feel like a Wild West. If you\nhave a ``send_email`` function, and the caller inputs an invalid email\naddress, should it: A) Return ``None`` or some other special return\nvalue, B) Let the underlying exception it might cause bubble up, C)\nCheck via a regex and type checking and raise a ``ValueError``\nimmediately, or D) Make a custom ``EmailException`` subclass and raise\nthat?\n\nWhat if there is a network error while the email was sending? Or what if\nthe function calls a helper ``_format_email`` that returns an integer\n(clearly wrong!), or raises an ``TypeError`` itself? Should it crash the\nprogram or prompt a retry?\n\nThis talk will introduce the concept of an exception, explain the\nbuilt-in Python exception hierarchy and the utility of custom\nsubclasses, demonstrate try/except/finally/else syntax, and then explore\ndifferent design patterns for exception control flow and their tradeoffs\nusing examples. It will also make comparisons to error handling\nphilosophy in other languages, like Eiffel and Go.\n"}, {"title": "Implementing Concurrency and Parallelism From The Ground Up", "description": "When writing an application, it is common to want to do many things at\nonce. For web servers, this is serve multiple web requests, for GUI\napplications it's doing a background task whilst keeping the UI\nresponsive. But how do we actually do that? This talk will go into how\nconcurrency and parallelism work from the CPU, OS, and threads up, how\nstate (data) is shared between them, and how this interacts with the\nfunctions that you, the programmer, write, and how you can write\nproperly behaving concurrent or parallel software.\n"}, {"title": "Applied Modern Cryptography in Python", "description": "Today we use cryptography in almost everywhere. From surfing the web\nover https, to working remotely over ssh. Although most developers don't\nneed to implement cryptography primitives, the knowledge and\nunderstanding of these building block allows them to better deploy them\nin their application. In modern crypto we have all the building block to\ndevelop secure application. However, we see instances of insecure code\neverywhere. Most of these vulnerabilities are not because of theoretic\nshortcomings, but due to bad implementation or a flawed protocol design.\nCryptography is a delicate art where nuances matter, and failure to\ncomprehend the subtleties of these building blocks leads to critical\nvulnerabilities. To add insult to injury most of the resources available\nare either outdated or wrong, and inarguably, using bad crypto more\ndangerous than not using it.\n\nIn this tutorial we look at the basic building blocks of modern\ncryptography. We will cover the encryption techniques, hashing\nmechanisms, and key devastation algorithms. Furthermore we review two of\nthe most widely used protocol suites, SSL and PGP. We conclude by\nimplementing a simplified version of Pretty Good Privacy (PGP), that is\nused for encryption of texts, e-mails, files, directories, and whole\ndisk partitions.\n"}, {"title": "Building Stream Processing Applications", "description": "Do you have a stream of data that you would like to process in real\ntime? There are many components with Python APIs that you can put\ntogether to build a stream processing application. We will go through\nsome common design patterns, tradeoffs and available components /\nframeworks for designing such systems. We will solve an example problem\nduring the presentation to make these points concrete. Much of what will\nbe presented is based on experience gained from building production\npipelines for the real-time processing of ad streams at Yelp. This talk\nwill cover topics such as consistency, availability, idempotency,\nscalability, etc.\n"}, {"title": "Awesome Command Line Tools", "description": "Designing a good command line tool is challenging. Command line tools\nlook archaic compared to modern graphical interfaces, discoverability is\na big issue for command line tools, proactive help is hard to implement.\nThis talk will cover a set of specific techniques to help alleviate\nthose challenges.\n\nHow did `pgcli <http://pgcli.com>`__ and `mycli <http://mycli.net>`__\novercome these problems? We will cover specific examples where command\nline apps shine. The examples will be drawn from pgcli, mycli and\n`bpython <http://bpython-interpreter.org/>`__. This talk will suggest\nlibraries and show how they can help you implement a wonderful command\nline interface.\n\nThe libraries covered in this talk include\n`python-prompt-toolkit <https://github.com/jonathanslenders/python-prompt-toolkit>`__,\n`pygments <http://pygments.org/>`__,\n`click <http://click.pocoo.org/>`__,\n`fuzzyfind <https://github.com/amjith/fuzzyfinder>`__.\n\nThe goal of the talk is to distil the ideas that exist in successful\ncommand line applications as guidelines for building powerful command\nline applications.\n"}, {"title": "5 ways to deploy your Python web app in 2017", "description": "You\u2019ve built a fine Python web application and now you\u2019re ready to share\nit with the world. But what\u2019s the best way to deploy your app in 2017?\n\nThis talk will demonstrate popular techniques for deploying Python web\napplications. We\u2019ll start with a simple Flask application and expose it\nto the world five times over as we learn to use different tools and\nservices available to the modern Python developer.\n\nSpecific topics covered include:\n\n-  Exposing your local dev environment with\n   `ngrok <https://ngrok.com/>`__\n-  Using a Platform-as-a-Service (PaaS) like\n   `Heroku <https://www.heroku.com/>`__\n-  Going \u201cserverless\u201d with `AWS\n   Lambda <https://aws.amazon.com/lambda/>`__\n-  Configuring your own VM with `Google Compute\n   Engine <https://cloud.google.com/compute/>`__\n-  Thinking inside the box using `Docker <https://www.docker.com/>`__\n\nWe\u2019ll also briefly touch on the pros and cons of each technique to help\nyou figure out which one is right for your app.\n\nAt the end of this talk you will have a basic understanding of how each\nof these techniques work and you\u2019ll be ready to try them out yourself.\n"}, {"title": "The trends in choosing licenses in Python ecosystem", "description": "The software licenses are the permissions over copyrighted software. The\npermission and/ grant includes the grant to use, to redistribute, to\nprepare derivative works etc. These software licenses also set forth the\nlimitations over these aforesaid rights. The software licenses basically\nmarks the boundary for the usage of the code.\n\nTherefore from the above mentioned introduction it very clear that it is\nvery important for developers to choose the license for their code\nwisely and correctly.\n\nPyPI, the Python Package Index is a repository of software for the\nPython programming language. There are currently 80000+ packages there.\n\nThis talk will go through the licenses of the top 2500 packages. We will\nsee the trend of choosing a license for these top Python projects. We\nwill discuss the licenses individually, compare them with each other.\nthe advantages and disadvantages of the same.\n\nWe will further explain that why a license and/or licenses are being\nfavored by the developers.\n"}, {"title": "Type uWSGI; press enter; what happens?", "description": "You're a pretty knowledgeable Python web application developer, but how\ndoes that web application get served to the world? For many of us, uWSGI\nis the magic that makes our application available, and in this talk\nwe'll look at how uWSGI works with the OS and the networking stack to\nmake the magic happen.\n"}, {"title": "Designing secure APIs with state machines", "description": "Did you ever need to create an application whose behavior varies with\nits state, while still presenting a consistent interface to its callers?\nA good, layered design using state machines can help avoid the tedious\n'if' checks for flags, and ensure that if your code runs at all, it will\nrun with all the required values initialized. I will demonstrate this\nwith examples, and talk about some available tools and libraries to\nbuild state machines in Python.\n\nI will also discuss how to effectively use the process of threat\nmodeling to build secure web applications. Threat modeling is a computer\nsecurity technique that helps you better understand the systems you\ncreate, identify attacks, and build defenses. I will talk about things\nthat we, as software developers, can do to assess the security of our\napplications in the real world through this process.\n"}, {"title": "aiosmtpd - A better asyncio based SMTP server", "description": "smtpd.py has been in the standard library for many years. It's been a\ncommon tool for deploying SMTP and LMTP servers that handle email-based\ncommunication in Python, providing both basic protocol implementations\nand a fundamental module for higher level tools, such as lazr.smtptest\nfor testing email clients. Based on asyncore and asynchat, smtpd.py is\nshowing its age, and its API is unwieldy.\n\nFortunately, there's a new alternative available. aiosmtpd is a modern\nreinvention based on asyncio, with all the improvements that come along\nwith such a new implementation. It provides servers for both the SMTP\nand LMTP protocols, as well as a higher level \"controller\" API for\ntesting SMTP and LMTP clients. It exposes a much better API for\ncustomization, allowing the user to associate a simple \"handler\" to\nprocess incoming messages without having to worry about the details of\nthe protocols, and it provides some useful hooks for subclassing.\n\nThis talk will describe the purpose and history of smtpd.py and\naiosmtpd, show how users can extend the servers and implement\nspecialized handlers, and show how applications can use the testing API\nfor ensuring that their email sending applications do the right things.\nExamples will be taken from GNU Mailman 3, which uses aiosmtpd\nextensively.\n"}, {"title": "Parallel Data Analysis", "description": "An overview of parallel computing techniques available from Python and\nhands-on experience with a variety of frameworks.\n\nThis course has two primary goals: 1. Teach students how to reason about\nparallel computing 2. Provide hands-on experience with a variety of\ndifferent parallel computing frameworks\n\nStudents will walk away with both a high-level understanding of parallel\nproblems and how to select and use an appropriate parallel computing\nframework for their problem. They will get hands-on experience using\ntools both on their personal laptop, and on a cluster environment that\nwill be provided for them at the tutorial.\n\nFor the first half we cover programming patterns for parallelism found\nacross many tools, notably map, futures, and big-data collections. We\ninvestigate these common APIs by diving into a sequence of examples that\nrequire increasingly complex tools. We learn the benefits and costs of\neach API and the sorts of problems where each is appropriate.\n\nFor the second half, we focus on the performance aspects of frameworks\nand give intuition on how to pick the right tool for the job. This\nincludes common challenges in parallel analysis, such as communication\ncosts, debugging parallel code, as well as deployment and setup\nstrategies.\n"}, {"title": "Python in The Serverless Era", "description": "Serverless is the latest phase in the evolution of cloud development.\nIts building blocks are functions, a bunch of stateless \u201cnano-services\u201d,\nthat can scale automatically and charged only when used. It enables\nteams to focus more on development while having fully managed servers.\nIn this talk I'll cover the Serverless Architectures practices, use\ncases, tooling and the role python plays in it.\n"}, {"title": "Big picture software testing: unit testing, Lean Startup, and everything in-between", "description": "There are many ways you can test your software: unit testing, manual\ntesting, end-to-end testing, and so forth. Take a step back and you'll\ndiscover even more form of testing, many of them very different in their\ngoals: A/B testing, say, where you see which of two versions of your\nwebsite results in more signups or ad clicks.\n\nHow do these forms of testing differ, how do they relate to each other?\nHow do you choose which kind of testing to pursue, given limited time\nand resources? How do you deal with strongly held yet opposite views\narguing either that a particular kind of testing is essential or that\nit's a waste time?\n\nThis talk will provide you with a model, a way to organize all forms of\ntesting and understand what exactly they provide, and why. Once you\nunderstand the model you will be able to choose the right form of\ntesting for *your* situation and goals.\n"}, {"title": "The Dictionary Even Mightier", "description": "Since my \u201cMighty Dictionary\u201d talk at PyCon\u00a02010, the Python dictionary\nhas evolved dramatically. Come learn about all of the the improvements,\nup to and including the re-architecture that has just landed with\nPython\u00a03.6! The talk will discuss iterable views, the dictionary\u2019s\ndedicated comprehension syntax, random key ordering, the special\nkey-sharing dictionary designed to underlie object collections, and,\nmost famously of all, the new \u201ccompact dictionary\u201d that cuts dictionary\nstorage substantially \u2014 and carries a fascinating side-effect.\n\nEach new feature that the talk discusses will be motivated by\nconsidering the trade-offs inherent in hash table data structure design,\nand followed up with hints about how you can now use the dictionary even\nmore effectively in your own code!\n"}, {"title": "Web identity: OAuth2 and OpenIDConnect", "description": "Interested in adding single sign-on to your application, but confused\nabout the variety of different web authentication methods out there?\nOAuth, OAuth2, OpenID, OpenIDConnect, SAML, Facebook Connect? This talk\nwill clarify the different protocols, examining OAuth2 and OpenIDConnect\nin greater detail. It will demonstrate a basic client implementation\nusing FLOSS libraries, and briefly touch on some of the issues involved\nin server implementation.\n"}, {"title": "What's new in Python 3.6", "description": "Python 3.6 has turned out to be quite the release! With `16 Python\nEnhancement Proposals <https://www.python.org/dev/peps/pep-0494/>`__\nincorporated into the version, Python 3.6 is only surpassed by Python\n3.0 for having more `PEPs <https://www.python.org/dev/peps/>`__ included\nin a single release. This talk will be an overview of those 16 PEPs and\nother changes outlined in the `What's\nNew <https://docs.python.org/3.6/whatsnew/3.6.html>`__ document for\nPython 3.6.\n"}, {"title": "Building A Gigaword Corpus: Lessons on Data Ingestion, Management, and Processing for NLP", "description": "As the applications we build are increasingly driven by text, doing data\ningestion, management, loading, and preprocessing in a robust,\norganized, parallel, and memory-safe way can get tricky. This talk walks\nthrough the highs (a custom billion-word corpus!), the lows (segfaults,\n400 errors, pesky mp3s), and the new Python libraries we built to ingest\nand preprocess text for machine learning.\n\nWhile applications like Siri, Cortana, and Alexa may still seem like\nnovelties, language-aware applications are rapidly becoming the new\nnorm. Under the hood, these applications take in text data as input,\nparse it into composite parts, compute upon those composites, and then\nrecombine them to deliver a meaningful and tailored end result. The best\napplications use language models trained on *domain-specific corpora*\n(collections of related documents containing natural language) that\nreduce ambiguity and prediction space to make results more intelligible.\nHere's the catch: these corpora are huge, generally consisting of at\nleast hundreds of gigabytes of data inside of thousands of documents,\nand often more!\n\nIn this talk, we'll see how working with text data is substantially\ndifferent from working with numeric data, and show that ingesting a raw\ntext corpus in a form that will support the construction of a data\nproduct is no trivial task. For instance, when dealing with a text\ncorpus, you have to consider not only how the data comes in (e.g.\nrespecting rate limits, terms of use, etc.), but also where to store the\ndata and how to keep it organized. Because the data comes from the web,\nit's often unpredictable, containing not only text but audio files, ads,\nvideos, and other kinds of web detritus. Since the datasets are large,\nyou need to anticipate potential performance problems and ensure memory\nsafety through streaming data loading and multiprocessing. Finally, in\nanticipation of the machine learning components, you have to establish a\nstandardized method of transforming your raw ingested text into a corpus\nthat's ready for computation and modeling.\n\nIn this talk, we'll explore many of the challenges we experienced along\nthe way and introduce two Python packages that make this work a bit\neasier: `Baleen <https://pypi.python.org/pypi/baleen/0.3.3>`__ and\n`Minke <https://github.com/bbengfort/minke>`__. Baleen is a package for\ningesting formal natural language data from the discourse of\nprofessional and amateur writers, like bloggers and news outlets, in a\ncategorized fashion. Minke extends Baleen with a library that performs\nparallel data loading, preprocessing, normalization, and keyphrase\nextraction to support machine learning on a large-scale custom corpus.\n"}, {"title": "Immutable Programming - Writing Functional Python", "description": "The world of Haskell and functional programming may seem like a distant\nplace to many working Python developers, but some of the techniques used\nthere are remarkably useful when developing in Python.\n\nIn this talk, I will cover some of the pitfalls of mutability that you\nmay run into while writing Python programs, and some tools and\ntechniques that Python has built in that will let you avoid them. You'll\nsee namedtuples, enums and properties, and also some patterns for\nstructuring immutable programs that will make them easier to build,\nextend, and test.\n"}, {"title": "bokeh: Data Visualization in Python", "description": "Bokeh is a powerful data visualization library that creates fully\ninteractive plots and integrates well with the data analysis tools you\nalready know and love: pandas, matplotlib, seaborn, ggplot. Bokeh can\nproduce stand-alone browser-based plots and much more sophisticated\nserver-hosted visualizations.\n\n-  Learn to use bokeh to create everything from basic graphs to advanced\n   interactive plots, dashboards, and data applications\n-  Incorporate bokeh within your Jupyter/IPython notebooks\n-  Partner bokeh with other libraries such as matplotlib, seaborn,\n   pandas, and ggplot\n-  Learn about bokeh server: to serve up even more impressive realtime\n   visualizations\n-  Explore configurations and settings\n-  Recognize and overcome common problems\n"}, {"title": "Exploratory data analysis in python", "description": "With the recent advancements in machine learning algorithms and\nstatistical techniques, and the increasing ease of implementing them in\nPython, it is tempting to ignore the power and necessity of exploratory\ndata analysis (EDA), the crucial step before diving into machine\nlearning or statistical modeling. Simply applying machine learning\nalgorithms without a proper orientation of the dataset can lead to\nwasted time and spurious conclusions. EDA allows practitioners to gain\nintuition for the pattern of the data, identify anomalies, narrow down a\nset of alternative modeling approaches, devise strategies to handle\nmissing data, and ensure correct interpretation of the results. Further,\nEDA can rapidly generate insights and answer many questions without\nrequiring complex modeling.\n\nPython is a fantastic language not only for machine learning, but also\nEDA. In this tutorial, we will walk through two hands-on examples of how\nto perform EDA using Python and discuss various EDA techniques for\ncross-section data, time-series data, and panel data. One example will\ndemonstrate how to use EDA to answer questions, test business\nassumptions, and generate hypotheses for further analysis. The other\nexample will focus on performing EDA to prepare for modeling. Between\nthese two examples, we will cover:\n\n-  Data profiling and quality assessment\n-  Basic describing of the data\n-  Visualizing the data including interactive visualizations\n-  Identifying patterns in the data (including patterns of correlated\n   missing data)\n-  Dealing with many attributes (columns)\n-  Dealing with large datasets using sampling techniques\n-  Informing the engineering of features for future modeling\n-  Identifying challenges of using the data (e.g. skewness, outliers)\n-  Developing an intuition for interpreting the results of future\n   modeling\n\nThe intended audience for this tutorial are aspiring and practicing data\nscientists and analysts, or anyone who wants to be able to get insights\nout of data. Students must have at least an intermediate-level knowledge\nof Python and some familiarity with analyzing data would be beneficial.\nInstallation of Jupyter Notebook will be required (and potentially, we\nwill also demonstrate analysis in JupyterLab, if its development in the\nnext few months allows). Instructions will be sent on what packages to\ninstall beforehand.\n"}, {"title": "The Next Step: Finding Model Parameters With Random Walks", "description": "The statistician John Tukey -- who designed the box plot and coined the\nterm \"bit\" -- wrote: \"An approximate answer to the right problem is\nworth a good deal more than an exact answer to an approximate problem\".\nPython has become one of the major languages for statistical data\nanalysis, not least because of the expressiveness of the language itself\nand the availability of tools like Jupyter Notebooks, which enable\niterative reasoning about a problem and its solutions.\n\nThis talks takes one step beyond an introduction to statistics with\nPython and aims to familiarize the audience with two concepts: a class\nof problems (so-called inverse problems), and a powerful statistical\ntool (the random walk, or more formally Markov-Chain Monte Carlo (MCMC)\nsampling with the Metropolis algorithm).\n\nIn inverse problems, model parameters are estimated from observational\ndata. Both model and data are expected to be affected by error. The\nobjective is not only to find parameters that best describe the\nobservations, but also to figure out how good, or how possibly bad, a\nsolution might be. Inverse problems are extremely common in many fields\nand crop up each time we attempt to reconstruct a reality from sensor,\nradar, scattering or imaging data.\n\nThe Metropololis-Hastings algorithm offers a solution via random\nsampling of a Bayesian posterior distribution. Even though listed as one\nof the 20th century's top 10 algorithms by the journal *Computing in\nScience & Engineering*, the Metropolis algorithm is easy to understand\nand implement, and a fun and instructive way to explore even complicated\nmulti-variate probability distributions.\n"}, {"title": "Introduction to Statistical Modeling with Python", "description": "This intermediate-level tutorial will provide students with hands-on\nexperience applying practical statistical modeling methods on real data.\nUnlike many introductory statistics courses, we will not be applying\n\"cookbook\" methods that are easy to teach, but often inapplicable;\ninstead, we will learn some foundational statistical methods that can be\napplied generally to a wide variety of problems: maximum likelihood,\nbootstrapping, linear regression, and other modern techniques. The\ntutorial will start with a short introduction on data manipulation and\ncleaning using `pandas <http://pandas.pydata.org/>`__, before proceeding\non to simple concepts like fitting data to statistical distributions,\nand how to use Monte Carlo simulation for data analysis. Slightly more\nadvanced topics include bootstrapping (for estimating uncertainty around\nestimates) and flexible linear regression methods using Bayesian\nmethods. By using and modifying hand-coded implementations of these\ntechniques, students will gain an understanding of how each method\nworks. Students will come away with knowledge of how to deal with very\npractical statistical problems, such as how to deal with missing data,\nhow to check a statistical model for appropriateness, and how to\nproperly express the uncertainty in the quantities estimated by\nstatistical methods.\n"}, {"title": "Probabilistic Programming with PyMC3", "description": "Bayesian statistics offers robust and flexible methods for data analysis\nthat, because they are based on probability models, have the added\nbenefit of being readily interpretable by non-statisticians. Until\nrecently, however, the implementation of Bayesian models has been\nprohibitively complex for use by most analysts. But, the advent of\nprobabilistic programming has served to abstract the complexity of\nBayesian statistics, making such methods more broadly available. PyMC3\nis a open-source Python module for probabilistic programming that\nimplements several modern, computationally-intensive statistical\nalgorithms for fitting Bayesian models, including Hamiltonian Monte\nCarlo (HMC) and variational inference. PyMC3\u2019s intuitive syntax is\nhelpful for new users, and the reliance on Theano for much of the\ncomputational work has allowed developers to keep the code base simple,\nmaking it easy to extend the software to meet analytic needs. PyMC3\nitself extends Python's powerful \"scientific stack\" of development\ntools, which provide fast and efficient data structures, parallel\nprocessing, and interfaces for describing statistical models.\n"}, {"title": "Requests Under The Hood", "description": "Requests is widely acknowledged as a library that saves users an\nenormous amount of time, effort, and pain through its intuitive and\nclear API. For this reason, most people who have never looked at the\ncode assume that its code is as intuitive, well-structured, and clear as\nthe API.\n\nOf course, the truth is more complex than that. Real software that deals\nwith real problems is rarely ideal: there are edge cases, terrible\nhacks, and awkward workarounds for problems.\n\nOften in the software industry we pretend that these imperfections in\nour software don\u2019t exist, or we try to hide them. These imperfections\nfrequently cause people to reinvent wheels in order to simplify the\ncode, which has benefits for understandability but frequently has\ndownsides for resilience. When people talk about \u201cbattle-tested\u201d code,\nthey mean code that has been dirtied up over time from its original\nPlatonic ideal implementation to something that is just as complex and\nwarty as real life.\n\nIn this talk, one of the Requests and urllib3 core maintainers lays bare\nall of the worst and hackiest corners of the codebases of these two\nlibraries. The goal is to help expose all of the invisible work done in\nmature codebases to tolerate edge cases and misbehaviour, as well as to\ntry to remind us all that the perfect is the enemy of the good.\n"}, {"title": "How documentation works, and how to make it work for your project", "description": "Nearly everyone (especially in the Python community) agrees that good\ndocumentation is important to the success of software projects, and yet\nvery few projects actually have good documentation.\n\nOften, it's *not for want of effort* - the project's developers have\nworked hard on it - *nor for lack of documentation* - the authors have\nproduced a lot of it.\n\n*It simply turns out to be not very good* - not helpful enough for the\nusers who should be able to rely on it, and a depressing chore for the\nauthors who have to maintain it.\n\nThe good news is that both these problems can be solved by understanding\n*how documentation works*, and what its different functions are.\nStructuring documentation according to those distinct functions helps\nensure that each of them is adequately served. It also makes it far\neasier to write and maintain.\n\nUsing real-life examples I'll draw out the key functions of\ndocumentation, and how they map onto different ways of writing it.\nPutting this into practice is simple when armed with some basic\nguidelines. The benefits are huge, and available with a minimum of\neffort.\n\nI won't be discussing documentation tools or software or other topics\nthat have been covered amply elsewhere, but some neglected aspects of\nsoftware documentation that **will make your software projects more\nsuccessful**.\n"}, {"title": "Contract-First API Development Using The OpenAPI Specification (Swagger)", "description": "Often developers will implement APIs and then only after they\u2019re\nreleased think about things like specifications and documentation.\nInstead we can make the design of the API contract an explicit part of\nour development process using The OpenAPI Specification (Swagger) and\nopen source tools.\n\nIn this workshop we will:\n\n-  Discuss the contract-first approach\n-  Build and validate a simple OpenAPI Specification\n-  Generate reference documentation and show how you can incorporate it\n   with other docs\n-  Run a mock server so clients can test using the API\n-  Generate stub code based on the specification\n-  Implement a basic working API using Flask\n-  Show how you can iteratively add features and make changes\n-  Discuss generating specifications for existing APIs\n\nParticipants will leave with:\n\n-  An understanding of how to incorporate a contract-first process into\n   their API development workflow\n-  An example specification that can be used as reference for their own\n   API design\n-  Working code for a basic API that can be used as a basis for their\n   own development\n\nParticipants are expected to have a basic familiarity with HTTP /\nRESTful APIs, understanding of simple git operations, and some\ndevelopment experience.\n"}, {"title": "Share Your Code! Python Packaging Without Complication", "description": "If you want people to use your code you should package it! You may have\nheard that packaging is hard but the Python packaging ecosystem has\nevolved a lot over the years. Taking your beautiful code and sharing it\nwith the world is complex but it doesn't have to be complicated. In this\ntalk you will learn how to take advantage of modern tooling and\npractices so you can get boring stuff out of the way, publish quickly\nand frequently, and focus on your code.\n\nThis talk will cover:\n\n-  A (brief) history of Python packaging\n-  Python Packaging User Guide recommendations\n-  Distribution formats\n-  Anatomy of a package\n-  Automating package creation\n-  Adding:\n    -  Testing\n    -  CI\n    -  Documentation\n-  Testing package installation\n-  Releasing to PyPI\n\nThis talk is for you if you're new to Python packaging and would like to\nlearn how to share you code or if you've worked with Python for a while\nand just aren't up-to-date with the latest packaging practices.\n"}, {"title": "Looping Like a Pro in Python", "description": "The humble loop: it's hard to write a program without it. Whether it's\nprocessing numbers in a sequence, lines in a text file, users in a\ndatabase, or any other list of things, you use loops all the time. But\ndid you know that Python has a lot of different ways to write loops?\nReaching for the right looping tool can make your code cleaner, more\nreadable, easier to test, and it can even make it run faster! By the end\nof this talk, you'll be looping like a pro, and your code will be better\nfor it.\n"}, {"title": "Python for mathematical visualization: a four-dimensional case study", "description": "This is a talk about creating pictures of a mathematical\nobject---specifically, a 4-dimensional fractal \"dust\" that has been the\nsubject of mathematical research in hyperbolic geometry since the 1980s.\nIn the end this is accomplished using a little algebra, a little\ngeometry, and a healthy dose of Python.\n\nThat is, I will present a case study of using Python in several aspects\nof a mathematical visualization project, from the computation itself, to\ntransforming and converting data, and finally for scripting the process\nof generating the images. Along the way I'll explain how Python's\nconvenient idioms and containers (e.g. sets and set comprehensions) are\na good fit for some of the algebraic and geometric questions that come\nup, how Scipy and Numpy enable fast numerical calculations, and how\nPython's strength as a language for scripting and automation allows easy\norchestration of rendering of still images and frames of animations.\n\nThe mathematical visualization project we describe is a collaboration\nwith Fran\u00e7ois Gu\u00e9ritaud (Universit\u00e9 de Lille).\n"}, {"title": "When the abyss gazes back: staring down Python's surprising internals", "description": "Python's fantastic until it isn't. This talk dives into some of the\nsurprising implementation details of CPython, then explains exactly how\nthey could be discovered from first principles.\n\nAttendees will leave with some dangerous Python trivia, and the tools\nthey'll need to uncovery their own trivia when surprises strike.\n\nThe talk takes a deep dive into a StackOverflow question asking why\n``\"x\" in (\"x\", )`` is faster than ``\"x\" == \"x\"``\n(http://stackoverflow.com/questions/28885132/why-is-x-in-x-faster-than-x-x/28885213#28885213),\nincluding a discussion of ``dis.disassemble``, the Pyhton stack machine,\nand reading the CPython source. If time permits, there will be other fun\nexamples, a whirlwind tour of debugging, and a couple of homework\nassignments.\n"}, {"title": "Lights, camera, action! Scraping a great dataset to predict Oscar winners", "description": "Using Jupyter notebooks and scikit-learn, you\u2019ll predict whether a movie\nis likely to `win an Oscar <http://oscarpredictor.github.io/>`__ or be a\nbox office hit. Together, we\u2019ll step through the creation of an\neffective dataset: asking a question your data can answer, writing a web\nscraper, and answering those questions using nothing but Python\nlibraries and data from the Internet.\n"}, {"title": "Deploy and scale containers with Docker native, open source orchestration", "description": "Deploy your own cluster! Use it to \"build, ship, and run\" containerized\napplications! Learn how to implement logging, metrics, stateful\nservices, and more! Learn the True Way of DevOps! Alright, we can't\npromise anything about the True Way of DevOps, but everything else will\ndefinitely be in this tutorial.\n\nWe will run a demo app featuring Python components and see some best\npractices to \"Dockerize\" Python code and Flask in particular; but the\ntutorial also includes other languages and frameworks.\n\nCome with your laptop! You don't need to install anything before the\nworkshop, as long as you have a web browser and a SSH client. Each\nstudent will have their own private cluster during the tutorial, to get\nimmediately applicable first-hand experience.\n"}, {"title": "The Fastest FizzBuzz in the West: Make Your Own Language with RPLY and RPython", "description": "In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very\nSpecial Programming Language), a tongue-in-cheek domain-specific\nlanguage, which is particularly good for implementing FizzBuzz -- as\nquickly as possible.\n\nWe'll build DIVSPL with RPLY, an implementation of David Beazley's PLY\n(but with a \"cooler\" API) and make it compatible with RPython, a\nrestricted subset of the Python programming language. Along the way,\nyou'll learn about lexers, parsers, and grammars, and in the end, you'll\nknow how to build your own language.\n"}, {"title": "Education Summit Thursday Afternoon Room A105", "description": "Education Summit Thursday Afternoon Room A105"}, {"title": "Education Summit Thursday Afternoon Room A106 Part 1", "description": "Education Summit Thursday Afternoon Room A106 Part 1"}, {"title": "Education Summit Thursday morning", "description": "Education Summit Thursday morning"}, {"title": "Debugging in Python 3.6: Better, Faster, Stronger", "description": "| Python 3.6 was released in December of 2016 and it has a lot of new\n  cool features. Some of them are quite easy for using: a developer can\n  read, for example, about f-strings and they can start using them in\n  their programs as soon as possible. But sometimes features are not so\n  evident, and a new frame evaluation API is one of them.\n| The new frame evaluation API was introduced to CPython in PEP 523 and\n  it allows to specify a per-interpreter function pointer to handle the\n  evaluation of frames. It might not be evident how to use this new\n  feature in everyday life, but it\u2019s quite easy to understand how to\n  build a fast debugger based on it.\n| In this talk we are going to explain how standard way of debugging in\n  Python works and how a new frame evaluation API may be useful for\n  creating the fast debugger. Also we will consider why such fast\n  debugging was not possible in the previous versions of Python. If\n  someone hasn\u2019t made a final decision to move to Python 3.6 this talk\n  will provide some new reasons to do it.\n"}, {"title": "Ending Py2Py3 compatibility in a user friendly manner   PyCon 2017", "description": "\"Four shalt thou not count, neither count thou two, excepting that\n    thou then proceed to three.\"\n\n        Monty Python and the Holy Grail; Scene 33\n\nPython 3 has been around for more than eight years, and much of the\nPython ecosystem is now available both on Python 2 and Python 3, often\nusing a single code base. Nonetheless, this compatibility comes at a\ndevelopment cost and some library authors are considering ending support\nfor Python 2 . These once-python-2-compatible libraries are at risk of\nbeing upgraded on non compatible system and cause user (and developer)\nfrustration.\n\nWhile it may seem simple to cease support for Python 2, the challenge is\nnot in ending support, but doing so in a way that does not wreak havoc\nfor users who stay on Python 2. And that is not only a communications\nproblem, but a technical one : up until recently, it was impossible to\ntag a release as Python 3 only; today it is possible.\n\nLike any maintainer of a widely used library, we want to ensure that\nusers continue to use Python 2 continue to have functioning libraries,\neven after development proceeds in a way that does not support Python 2.\n\nOne approach is to ensure easy installation of older versions if\npossible avoid incompatible versions altogether. Users should not need\nto manually pin maximal version dependencies across their development\nenvironments and projects if all they want is to use the latest versions\nof libraries that are compatible with their system.\n\nEven if we did expect that of users, consider what would happen when a\npackage they rely on converts to be only Python 3 compatible. If they\nwere not tracking the complete dependency tree, they might discover, on\nupgrade, that their projects no longer work. To avert this they would\nneed to pin those at the last version compatible with Python 2. Users\nthat want to use older python versions should not have to go through so\nmuch anguish to do so.\n\nIn order to solve this problem, and thereby make both users' and\nmaintainers' lives easier, we ventured into the rabbit-hole called\nPackaging.\n\nThough we set off with a singular quest, our tale roves through many\nlands. We'll narrate the story of our amending PEPs, our efforts in\nbuilding the ramparts of the pypa/Warehouse Castle, battles with the\ndragons of Pip, and errands in the \"land of no unit tests\" otherwise\nknown as PyPI legacy.\n\nBy the end of the above tale, the audience members will know the road to\nPython 3 only libraries had once had hazards that are now easily\navoidable. So long as users upgrade their package management tools.\n"}, {"title": "Hacking Cars with Python", "description": "Modern cars are networks of computers, and a high end vehicle could have\nnearly 100 different computers inside. These devices control everything\nfrom the engine to the airbags. By understanding how these systems work,\nwe can interface with vehicles to read data, perform diagnostics, and\neven modify operation.\n\nIn this talk, we'll discuss pyvit, the Python Vehicle Interface Toolkit.\nThis library, combined with some open source hardware, allows developers\nto talk to automotive controllers from Python.\n\nWe will begin with an introduction to automotive networks, to provide a\nbasis for understanding the tools. Next, we will look at the tools and\nshow the basics of using them. Finally, we'll discuss real world\napplications of these tools, and how they're being used in the\nautomotive world today.\n"}, {"title": "Bayesian Statistical Analysis with Python", "description": "You've got some data, and now you want to analyze it with Python. You're\non your way to greatness! Now the problem comes: do I do the t-test?\nChi-squared test? How do I decide? In this talk, inspired by many\nPythonista Bayesians (@jakevdp, @allendowney, @twiecki, @fonnesbeck)\nbefore, I will show you how you can take common statistical decision\nproblems, formulate them as a Bayesian analysis problem, and use PyMC3\nas your workhorse tool for gaining insights. This talk will be\nmath-light and code-heavy, and if you download the slides, you'll have a\nsimple template for more complex Bayesian analysis down the road!\n"}, {"title": "Best Testing Practices for Data Science", "description": "So you're a data scientist wrangling with data that's continually\navalanching in, and there's always errors cropping up! ``NaN``\\ s,\nstrings where there are supposed to be integers, and more. Moreover,\nyour team is writing code that is getting reused, but that code is\nfailing in mysterious places. How do you solve this? Testing is the\nanswer! In this tutorial, you will gain practical hands-on experience\nwriting tests in a data science setting so that you can continually\nensure the integrity of your code and data. You will learn how to use\n``py.test``, ``coverage.py``, and ``hypothesis`` to write better tests\nfor your code.\n"}, {"title": "Network Analysis Made Simple", "description": "Have you ever wondered about how those data scientists at Facebook and\nLinkedIn make friend recommendations? Or how epidemiologists track down\npatient zero in an outbreak? If so, then this tutorial is for you. In\nthis tutorial, we will use a variety of datasets to help you understand\nthe fundamentals of network thinking, with a particular focus on\nconstructing, summarizing, and visualizing complex networks.\n"}, {"title": "Constructive Code Review", "description": "\u201cYour code is bad and you are bad. Have a bad day.\u201d Too many code\nreviews feel like this, and it saps the enthusiasm that drives open\nsource. Instead, let\u2019s explore how to give reviews that are truthful but\nencouraging, boosting the skill level of contributors and the quality of\nthe project. We\u2019ll look at \u201ctact hacks\u201d that nudge communication in a\nfriendly direction, antipatterns to avoid, the pesky human emotions that\ncan tempt us into reviewing poorly, and techniques for leveling up\nnewcomers without losing all your coding time.\n"}, {"title": "Factory Automation with Python - Stories about Robots, Serial Ports, and Barcode Readers", "description": "In industrial automation *tried and tested* always beats *latest and\ngreatest*: The machines that make smartphones have a serial port and are\nconfigured with ``.csv`` files. But when your factory automates complex\nnon-linear workflows and is jam-packed with sensors and robots, you are\nquickly faced with software engineering challenges that call for modern\ntools.\n\nPython turns out to be surprisingly versatile in this setting, whether\nfor prototyping a single conveyor belt or taming a building full of\nrobots. This talk explains how to use Python for interfacing with two\ncommon industrial automation devices: a barcode scanner and a\nProgrammable Logic Controller (PLC). After a simple demo, you\u2019ll hear\nabout lessons learned using Python packages that weren\u2019t written with\nrobots in mind, like Celery and pandas, with robots.\n"}, {"title": "Fantastic Data and Where To Find Them: An introduction to APIs, RSS, and Scraping", "description": "Whether you\u2019re building a custom web application, getting started in\nmachine learning, or just want to try something new, everyone needs\ndata. And while the web offers a seemingly boundless source for custom\ndata sets, the collection of that data can present a whole host of\nobstacles. From ever-changing APIs to rate-limiting woes, from\nnightmarishly nested XML to convoluted DOM trees, working with APIs and\nweb scraping are challenging but critically useful skills for\napplication developers and data scientists alike. In this tutorial,\nwe\u2019ll introduce RESTful APIs, RSS feeds, and web scraping in order to\nsee how different ingestion techniques impact application development.\nWe\u2019ll explore how and when to use Python libraries such as\n``feedparser``, ``requests``, ``beautifulsoup``, and ``urllib``. And\nfinally we will present common data collection problems and how to\novercome them.\n\nWe\u2019ll take a hands-on, directed exercise approach combined with short\npresentations to engage a range of different APIs (with and without\nauthentication), explore examples of how and why you might web scrape,\nand learn the ethical and legal considerations for both. To prepare\nattendees to create their own data ingestion scripts, the tutorial will\nwalk through a set of examples for robust and responsible data\ncollection and ingestion. This tutorial will conclude with a case study\nof `Baleen <https://pypi.python.org/pypi/baleen/0.3.3>`__, an automated\nRSS ingestion service designed to construct a production-grade text\ncorpus for NLP research and machine learning applications. Exercises\nwill be presented both as Jupyter Notebooks and Python scripts.\n"}, {"title": "Community powered packaging: conda-forge", "description": "The Python scientific community always wanted a package manager that is\ncross platform, does not require ``sudo``, and lets Python be awesome!\nThe conda package manager solved that problem, but created a new ones...\n\nThis talk is a tour disguised as a beginner tutorial to ``conda-forge``\npackaging. We will try to discuss some myths and misconceptions about\n``conda`` and ``conda-forge``, as well as a quick comparison with\n``pip`` and ``wheels``.\n"}, {"title": "Final remarks and conference close", "description": "Final remarks and conference close"}, {"title": "How to make a good library API", "description": "It's not easy to write libraries with great APIs. We're aware of that.\nHowever, it's not always clear how we can follow abstract ideals like\nelegance, simplicity, and extensibility to improve our APIs. That's why\nin this talk we'll discuss good and bad APIs with real-world examples.\nFor each thing learned, we'll come up with a checklist to help us with\npractical advice for writing good APIs.\n"}, {"title": "In-Memory Event Resequencing: Realistic Testing For Impossible Bugs", "description": "As we all know, we should write testable code, and automated tests. But\nas we also know, no test plan survives contact with the real world.\nComplex, distributed systems fail in complex, distributed ways, and even\nthe simplest web app today is a complex distributed system. So, as our\ncode accrues little fixes to bugs that only show up in production, our\ntest suites eventually either become slow integration testing\nmonstrosities that are \"realistic\" but flaky and unreliable, or useless\npiles of mocks which are fast and deterministic but don't give you\nconfidence.\n\nIn this talk, we'll explore how to leverage event-driven programming, or\n\"async I/O\", to structure code in such a way that its tests are fast,\nrealistic, and reliable, even in the face of horrible race-conditions\nyou only discover in production.\n"}, {"title": "Gothic Colors: Using Python to understand color in nineteenth-century literature", "description": "Do you love literature and programming? Have you ever been curious about\nwhat the heck \u201cDigital Humanities\u201d are? Join us for a quick survey of\nwhat\u2019s going on in this growing field and learn about a specific\nproject, \u201cGothic Colors\u201d where we set out to enumerate and analyze color\nreferences and mood in 19th century Gothic novels, using Python and a\ncouple of popular libraries.\n"}, {"title": "Solid Snakes or: How to Take 5 Weeks of Vacation", "description": "No matter whether you run a web app, search for gravitational waves, or\nmaintain a backup script: being responsible for a piece of software or\ninfrastructure means that you either get a pager right away, or that you\nget angry calls from people affected by outages. Being paged at 4am in\neveryday life is bad enough. Having to fix problems from hotel rooms\nwhile your travel buddies go for brunch is even worse.\n\nAnd while incidents can\u2019t be prevented completely, there are ways to\nmake your systems more reliable and minimize the need for (your!) manual\nintervention. This talk will help you to get calm nights and relaxing\nvacations by teaching you some of them.\n"}, {"title": "IPython and Jupyter in Depth: High productivity, interactive Python", "description": "Description\n===========\n\nIPython and Jupyter provide tools for interactive computing that are\nwidely used in scientific computing, education, and data science, but\ncan benefit any Python developer.\n\nYou will learn how to use IPython in different ways, as:\n\n-  an interactive shell,\n-  a graphical console,\n-  a network-aware VM (Virtual machine) in GUIs,\n-  a web-based notebook combining code, graphics and rich HTML.\n\nWe will demonstrate how to deploy a custom environment with Docker that\nnot only contains multiple Python kernels but also a couple of other\nlanguages.\n\nObjectives\n==========\n\nAt the end of this tutorial, attendees will have an understanding of the\noverall design of Jupyter (and IPython) as a suite of applications they\ncan use and combine in multiple ways in the course of their development\nwork with Python and other programming languages. They will learn:\n\n-  Tricks from the IPython machinery that are useful in everyday\n   development,\n\n-  What high-level applications in Jupyter, the web-based notebooks, can\n   do and how these applications can be used.\n\n-  How to use IPython and Jupyter together so that they can be best used\n   for the problem at hand.\n\nPython Level\n============\n\nIntermediate\n\nDomain Level\n============\n\nIntroductory\n\nDetailed Abstract\n=================\n\nIPython started in 2001 simply as a better interactive Python shell.\nOver the last decade it has grown into a powerful set of interlocking\ntools that maximize developer productivity in Python while working\ninteractively.\n\nToday, Jupyter consists of an IPython kernel that executes user code,\nprovides many features for introspection and namespace manipulation, and\ntools to control this kernel either in-process or out-of-process thanks\nto a well specified communications protocol implemented over ZeroMQ.\nThis architecture allows the core features to be accessed via a variety\nof clients, each providing unique functionality tuned to a specific use\ncase:\n\n-  An interactive, terminal-based shell with capabilities beyond the\n   default Python interactive interpreter (this is the classic\n   application opened by the ``ipython`` command that many users have\n   worked with)\n\n-  A `web-based notebook <http://jupyter.org/>`__ that can execute code\n   and also contain rich text and figures, mathematical equations and\n   arbitrary HTML. This notebook presents a document-like view with\n   cells where code is executed but that can be edited in-place,\n   reordered, mixed with explanatory text and figures, etc. The notebook\n   provides an interactive experience that combines live code and\n   results with literate documentation and the rich media that modern\n   browsers can display:\n\n   .. figure:: http://jupyter.org/assets/jupyterpreview.png\n      :alt: Notebook screenshot\n\n      Notebook screenshot\n\nThe notebooks also allow for code in multiple languages allowing to mix\nPython with Cython, C, R and other programming languages to access\nfeatures hard to obain from Python.\n\nThese tools also increasingly work with languages other than Python, and\nwe renamed the language independent frontend components to *Jupyter* in\norder to make this clearer. The Python kernel we provide and the\noriginal terminal-based shell will continue to be called *IPython*.\n\nIn this hands-on, in-depth tutorial, we will briefly describe IPython's\narchitecture and will then show how to use the above tools for a highly\nproductive workflow in Python.\n\nThe materials for this tutorial are `available on a github\nrepository <https://github.com/ipython/ipython-in-depth>`__.\n"}, {"title": "Let's build a web framework!", "description": "\"Reinventing the wheel is great if your goal is to learn more about\n    wheels.\" -- James Tauber\n\nIf you're building a web app, you probably reach for your favorite\nframework -- Django, Flask, Pyramid, etc. But we rarely stop to think\nabout what these tools are doing under the hood. In this hands-on\ntutorial, you'll gain a deeper understanding of what frameworks are and\nhow they work by implementing your own framework from scratch. We'll\nbuild a complete (if minimal) web framework that handles the WSGI\nrequest/response cycle, routing, controllers, templating, and a data\nlayer. Along the way you'll gain a deeper understanding of the decisions\nweb frameworks make, their relative merits, and inner workings.\n"}, {"title": "Keynote: The Unexpected Effectiveness of Python in Science", "description": "Friday morning keynote by Jake Vanderplas."}, {"title": "The Python Visualization Landscape", "description": "So you want to visualize some data in Python: which library do you\nchoose? From Matplotlib to Seaborn to Bokeh to Plotly, Python has a\nrange of mature tools to create beautiful visualizations, each with\ntheir own strengths and weaknesses. In this talk I\u2019ll give an overview\nof the landscape of dataviz tools in Python, as well as some deeper\ndives into a few, so that you can intelligently choose which library to\nturn to for any given visualization task.\n"}, {"title": "An introduction to secure web development with Django and Python", "description": "You can't afford to have security be an optional or \"nice-to-have\"\nfeature in your applications. Luckily, Django has your back: this\nworkshop will introduce you to thinking about security, cover a broad\nrange of security concerns from the mundane to the arcane, and walk you\nthrough, in detail, how Django and the broader Django and Python\necosystems can help protect you and your users from them.\n"}, {"title": "Next Level Testing", "description": "Unit, functional, and integration tests are great first steps towards\nimproving the quality of your python project. Ever wonder if there\u2019s\neven more you can do? Maybe you've heard of property-based testing,\nfuzzing, and mutation testing but you're unsure exactly how they can\nhelp you. In this talk we\u2019ll cover additional types of tests that can\nhelp improve the quality and robustness of your python projects:\nproperty-based testing, fuzz testing, stress testing, long term\nreliability testing, and mutation testing.\n\nWe\u2019ll also go beyond just covering what these tests are. For each of the\ntest types above, I\u2019ll give you real world examples from open source\nsoftware that I maintain that shows you the types of bugs each test type\ncan find. I\u2019ll also show you how you can integrate these tests into your\nTravis CI and/or Jenkins environment.\n"}, {"title": "Leveraging Serverless Architecture for Powerful Data Pipelines", "description": "Serverless Architectures that allow us to run python functions in the\ncloud in an event-driven parallel fashion can be used to create\nextremely dynamic and powerful data pipelines for use in ETL and data\nscience. Join me for an exploration of how to build data pipelines on\nAmazon Web Services Lambda with python. We'll cover a single\nintroduction to event-driven programming. Then, we'll walk through\nbuilding an example pipeline while discussing some of the frameworks and\ntools that can make building your pipeline easier. Finally, we'll\ndiscuss how to maintain observability on your pipeline to ensure proper\nperformance and troubleshooting information.\n"}, {"title": "Writing a C Python extension in 2017", "description": "This talk describes the build of a C Python extension, with prebuilt\nbinaries, in 2017, where modern packaging standards, as well as Docker,\nhave been a game changer in the Python extensions world. Most examples\ncome from our experience building\n`PyMiniRacer <https://github.com/sqreen/PyMiniRacer>`__, an embedded\nPython / JavaScript bridge used in production across hundreds of\ncompanies.\n\nWe will describe the different aspects of building a binary extension,\nincluding:\n\n-  using the modern manylinux wheel type in order to ship a built\n   binary, usable in most Linux distributions;\n-  the choices offered to developers when building an extension: the\n   Python public C API, cffi, ...;\n-  testing of a binary module across various platforms;\n-  troubleshooting & debugging an extension: the basics you need to\n   tackle most common issues.\n"}, {"title": "An Introduction to Reinforcement Learning", "description": "Reinforcement learning (RL) is a subfield of machine learning focused on\nbuilding agents: software that can robustly achieve a desired objective\nunder varying states of the world. This introduction will provide you\nwith an overview of RL and tools to build your own agents. In this talk,\nwe will provide an overview of terminology in reinforcement learning and\na Jupyter Notebook outlining basic algorithms to learn 'policies',\nstrategies for an agent, and visualize them with numpy, pandas, and\nseaborn. Newer developments in reinforcement learning apply deep\nlearning to improve performance. We will further discuss deep\nreinforcement learning and how to use deep learning libraries, such as\nTensorFlow or Theano, with the latest RL libraries: `OpenAI\nGym <https://gym.openai.com>`__, `OpenAI\nUniverse <https://universe.openai.com>`__, and `DeepMind\nLab <https://github.com/deepmind/lab>`__.\n"}, {"title": "Snakes on a Hyperplane: Python Machine Learning in Production", "description": "Companies with an artificial-intelligence plan have a differentiating\nstrategy in the intelligence economy; however, implementing robust\nmachine-learning in production is nontrivial, often requiring a close\ncollaboration between data scientists and developers, and retooling the\nproduction stack and workflows to develop and maintain accurate models.\n\nMachine learning in production involves model application, handling\nmissing data, data artifacts, and data outside of the training\ncalibration. A rigorous evaluation framework draws upon logging to\ndetermine characteristics of model coverage, model performance,\nauditing, and run-time performance. Model coverage includes the number\nof times the model produced sensible output relative to number of times\nit is called. Model coverage is reduced if the model does not converge\nor model criteria are not met. Model performance is evaluated with a\nsuite of metrics (accuracy, AUC, FPR, TPR, RMSE, MAPE, etc.), which\nassist in determining the most appropriate model to use in the\nproduction scenario and the validity of the model training. Regularly\nperforming manual audits for spot checks is important for debugging and\nensuring the model passes sanity checks. Model performance includes run\ntimes and profiling model pieces, ensuring performance is within\nspecified requirements and refactoring otherwise.\n\nIn the AI renaissance, where ML is a critical piece of intelligent\nproducts, seamlessly integrating model evaluation into workflows is an\nimportant component of making robust products and building a satisfying\ncustomer experience. Python is a great language to build intelligent\nproducts with its abundance of ML libraries and wrappers contributed as\nopen-source software in addition to rich full-stack capabilities.\n"}, {"title": "Experiment Assignment on the Web", "description": "A popular way of improving websites is to run experiments on it. We\nsplit users into groups, show two or more variations of the site,\nmeasure how well each one does, and then show the best version to\neveryone. In this talk, I'll walk through a toy Python program that does\nthe first step: splits users into groups. A few interesting problems\narise: grouping users, whitelists, and scaling. I'll share different\nways to address them. I'll also give examples of things that can go\nterribly wrong when designing experiment assignment code.\n"}, {"title": "Fuzzy Search Algorithms: How and When to Use Them", "description": "Fuzzy Searching or approximate string matching is powerful because often\ntext data is messy. For example, shorthand and abbreviated text are\ncommon in various data sets. In addition, outputs from OCR or voice to\ntext conversions tend to be messy or imperfect. Thus, we want to be able\nto make the most of our data by extrapolating as much information as\npossible.\n\nIn this talk, we will explore the various approaches used in fuzzy\nstring matching and demonstrate how they can be used as a feature in a\nmodel or a component in your python code. We will dive deep into the\napproaches of different algorithms such as Soundex, Trigram/n-gram\nsearch, and Levenshtein distances and what the best use cases are. We\nwill also discuss situations where it\u2019s important to take into account\nthe meaning or intent of a word and demonstrate approaches for measuring\nsemantic similarity using nltk and word2vec. Furthermore, we will\ndemonstrate via live coding how to implement some of these fuzzy search\nalgorithms using python and/or built-in fuzzy search functions within\nPostgreSQL.\n"}, {"title": "How to Write and Debug C Extension Modules", "description": "The CPython interpreter allows us implement modules in C for performance\ncritical code or to interface with external libraries while presenting\nusers with a high level Python API. This tutorial will teach you how to\nleverage to power of C in your Python projects.\n\nWe will start by explaining the C representation of Python objects and\nhow to manipulate them from within C. We will then move on to\nimplementing functions in C for use in Python. We will discuss reference\ncounting and correct exception handling. We will also talk about how to\npackage and build your new extension module so that it may be shared on\nPyPI. (We will only be covering building extension modules on GNU/Linux\nand OSX, not Windows).\n\nAfter the break, we will show how to implement a new type in C. This\nwill cover how to hook into various protocols and properly support\ncyclic garbage collection. We will also discuss techniques for debugging\nC extension modules with gdb using the CPython gdb extension.\n"}, {"title": "Title Available On Request: An Introduction to Lazy Evaluation", "description": "Lazy evaluation, also known as \"call by need\", is an evaluation strategy\nwhere values are produced only when needed. Lazy evaluation is the\nopposite of eager evaluation, Python's normal evaluation model, where\nfunctions are executed as seen and values are produced immediately.\n\nIn this talk we will define lazy evaluation and contrast it with eager\nevaluation. We will discuss tools that exist in Python for using lazy\nevaluation and show how we can build on the primitives to better\nrepresent computations. We will introduce common vocabulary for\ndiscussing evaluation models, and compare different systems for\nimplementing lazy evaluation. Finally, we will discuss optimizations\nthat can be made to optimize lazily evaluated expressions.\n"}, {"title": "What's in your pip toolbox?", "description": "``pip`` is a great tool, but dependency management doesn't stop there.\nI'll explore several tools that work with ``pip`` to make managing your\ndependencies easier, faster, and safer. I'll cover generating\ndependencies a better way, maintaining your ``requirements.txt`` for the\nlong-term, and exploring existing Python environments. Afterward, you'll\nnever want to ``pip freeze > requirements.txt`` again.\n"}, {"title": "Temporal Data Structures with SQLAlchemy and Postgres", "description": "SQLAlchemy (`http://www.sqlalchemy.org <http://www.sqlalchemy.org/>`__)\nand Postgres\n(`https://www.postgresql.org <https://www.postgresql.org/>`__) provide\nseveral useful tools that allow us to build and query records through\ntime: *temporal models*. Combining a need to have robust auditing, as\nwell feature development on per-property history, we can turn\n\u201cregulatory overhead\u201d into an exciting technical challenge. At Clover\nHealth we have built a small library to automate the task of decorating\na model and making it \u201ctemporal.\u201d This talk aims to demonstrate the\nunderlying data model and interface for building this system.\n"}, {"title": "Static Types for Python", "description": "Over the past year and a half, Dropbox has been investing in the\ndevelopment of mypy, a static type checker for Python, as a way to make\nour multimillion-line Python codebase easier to understand, navigate,\nand maintain. In this talk, we will discuss the benefits of type\nannotations, explain how to use them, and give a peak into how mypy\nworks behind the scenes.\n\nMypy is an open-source type-checker for Python which supports the PEP\n484 standard for gradual typing. Originally created by Jukka Lehtosalo\nas part of his PhD thesis in 2013, it is now under active development by\na small team at Dropbox which includes David Fisher, Greg Price, and\nGuido van Rossum. It supports Python 3.2 and higher, as well as Python\n2.7 (via type comments).\n"}, {"title": "Python from Space: Analyzing Open Satellite Imagery Using the Python Ecosystem", "description": "Earth imaging satellites, just like our computers, are shrinking and\nbecoming more ubiquitous than ever before. It is now possible to obtain\nopen satellite data on a daily if not weekly basis and for this data to\nbe put to work; helping us better understand our planet and quickly\nrespond to disaster situations.\n\nIn this talk we will work through a jupyter notebook that covers the\nsatellite data ecosystem and the python tools that can be used to sift\nthrough and analyze that data. Topics include python tools for using\nOpen Street Maps data, the Geospatial Data Abstraction Library (GDAL),\nand OpenCV and NumPy for image processing. This talk is intended for\nnovice and intermediate python developers who are interested in using\ndata science and satellite imagery for social good and fundamental\nscientific research.\n"}, {"title": "Snek in the Browser", "description": "Python is a decades-strong language with a large community, and it has a\nsolid foundation on the server, but it doesn't have a good user story in\nthe browser... until now.\n\nThe BeeWare project aims to bring Python natively, everywhere. Using a\ncombination of the Batavia and Toga projects, we can develop and\nentirely native web experience in Python, no JavaScript required.\n\nDuring this talk, you will learn about how the BeeWare project has built\nBatavia, a Python virtual machine in JavaScript; and Toga, a\nmulti-platform native API wrapper; a combination of which can be used to\nbuild an entire web platform in Python only.\n"}, {"title": "Decorators, unwrapped: How do they work?", "description": "Decorators are a syntactically-pleasing way of modifying the behavior of\nfunctions in Python. However, they can be highly opaque to Python\nbeginners. It took me a while to learn how to write one, and even after\nI was confident writing my own decorators, felt like they were magical.\nThe goal of this talk is to demystify decorators by methodically\nstepping through how and why they work. Along the way we'll touch on\nclosures, scopes, and how Python is compiled.\n"}, {"title": "Keynote: Do It For Science", "description": "Saturday morning keynote by Katy Huff"}, {"title": "The Memory Chronicles: A Tale of Two Pythons", "description": "MicroPython is the leanest, meanest full Python implementation. Designed\nfor microcontrollers, this variant of Python runs in less than 300KB of\nmemory, *and* retains support for all your favorite Python features.\n\nSo what does it take to make the smallest Python? Put differently, why\ndoes CPython have a large memory footprint?\n\nThis talk will explore the internals of MicroPython and contrast it with\nCPython, focusing on the aspects that relate to memory use. We will\ndelve into the Python object models in each and the machinery for\nmanaging them. We will touch upon how the designs of the bytecode\ncompiler and interpreter of each differ and why that matters.\n"}, {"title": "Keynote: Kubernetes for Pythonistas", "description": "Sunday afternoon keynote by Kelsey Hightower"}, {"title": "Django Admin: Basics and Beyond", "description": "Django's admin is a great tool but it isn't always the easiest or\nfriendliest to set up and customize. The ModelAdmin class has a lot of\nattributes and methods to understand and come to grips with. On top of\nthese attributes, the admin's inlines, custom actions, custom media, and\nmore mean that, really, you can do anything you need with the admin...if\nyou can figure out how. The docs are good but leave a lot to\nexperimentation and the code is notoriously dense.\n\nIn this tutorial, you'll learn the basics of setting up the admin so you\ncan get your job done. Then we'll dive deeper and see how advanced\nfeatures like autocomplete, Markdown editors, image editors, and others\nwould be added to make the admin really shine.\n"}, {"title": "The Gilectomy: How's It Going?", "description": "One of the most interesting projects in Python today is Larry Hastings'\n\"Gilectomy\" project: the removal of Python's Global Interpreter Lock, or\n\"GIL\". Come for an up-to-the-minute status report: what's been tried,\nwhat has and hasn't worked, and what performance is like now.\n"}, {"title": "Prehistoric Patterns in Python", "description": "Why do some code use dictionaries that have None for all values? Is it\ntrue that you shouldn't concatenate strings with +? Will Python optimize\nconstant calculations?\n\nThis talk will go through some patterns that used to be common in\nPython, but which now are regarded as outdated and see if they really\nare outdated and why. The results surprised me, maybe they'll surprise\nyou.\n"}, {"title": "Lightning talks May 19th, 2017 Evening session", "description": "Lightning talks 2017-05-19 Evening\n\n+----------+--------------------+--------------------------------------------------------+\n+ Start    | Speakers           | Subject                                                +\n+==========+====================+========================================================+\n+ 0:55     | Katy               | **Emoji Archeology 101 - A lightning talk cover**      +\n+          |                    | - A call to revolution against the Unicode emoji.      +\n+----------+--------------------+--------------------------------------------------------+\n+ 5:55     | Daniel Whitenack   | **Taking Over the Data World with Containerized**      +\n+          |                    | **Python**                                             +\n+          |                    | - Using Kubernetes cluster with Pachyderm.             +\n+----------+--------------------+--------------------------------------------------------+\n+ 11:20    | Fang-Pen Lin       | **Bugbuzz - A modern web-based debugger for Python**   +\n+          |                    | - Adding just a couple lines triggers a web based      +\n+          |                    | debugger with basic functionality.  Uses PubNub.       +\n+----------+--------------------+--------------------------------------------------------+\n+ 16:45    | Kojo Idrissa       | **Software Engineering for Beginners**                 +\n+          |                    | - Focus on common tools like version control, in-code  +\n+          |                    | documentation, testing & TDD, dependency management &  +\n+          |                    | deployment, and finally OS stuff.                      +\n+----------+--------------------+--------------------------------------------------------+\n+ 21:50    | Cameron Dershem    | **Community Level Development:  What Python Should**   +\n+          |                    | **Learn From Rust**                                    +\n+          |                    | - Please learn From Rust. Rust is the best community.  +\n+          |                    | Devs are on chat and enforce good attitude; cool thank +\n+          |                    | you page; roadmap; 'how should this be taught' section +\n+          |                    | in RFCs; mentorship for starter maintainers; great     +\n+          |                    | opensource book.                                       +\n+----------+--------------------+--------------------------------------------------------+\n+ 26:30    | Al Sweigart        | **How to Do PyCon**                                    +\n+          |                    | - Skip talks and meet people; use shirt trick; don't   +\n+          |                    | eat alone; Twitter is great for followup.              +\n+----------+--------------------+--------------------------------------------------------+\n+ 31:53    | Myron Walker       | **Faking Python Imports**                              +\n+          |                    | - Fake for modules and callables not available on test +\n+          |                    | environment. Use directory of local fakes.             +\n+----------+--------------------+--------------------------------------------------------+\n+ 35:12    | Vince Salvino      | **Help Wanted: A PyPI Vulnerability DB**               +\n+          |                    | - Like WPScan, it would be nice to a central DB and    +\n+          |                    | tool for known PyPI security issues. Talk to me.       +\n+----------+--------------------+--------------------------------------------------------+\n+ 37:50    | Lev                | **Same Content, Different Words**                      +\n+          | Konstantinovskiy   | - Is 'Ice cream' the same as 'Gelato' in different     +\n+          |                    | reviews? Use Word Mover's Distance in GenSim to find   +\n+          |                    | out.                                                   +\n+----------+--------------------+--------------------------------------------------------+\n+ 43:20    | Mario              | **Randomize Your Decisions**                           +\n+          |                    | - We spammed ourselves by having too many alerts, had  +\n+          |                    | hacked users, bugs everywhere, bad SEO. Still, it was  +\n+          |                    | worth making a website.                                +\n+----------+--------------------+--------------------------------------------------------+\n+ 48:30    | Tim Head           | **Bayesian Optimization: Coffee**                      +\n+          |                    | - Tweak settings with Bayesian Optimization, easily.   +\n+          |                    | Made scikit-optimize with simpler calls than scikit-   +\n+          |                    | learn.                                                 +\n+----------+--------------------+--------------------------------------------------------+\n+ 53:35    | Meg Ray            | **Teaching Python to Children**                        +\n+          |                    | - Use both teacher pedagogy and developer technical    +\n+          |                    | skills to train K-12 teachers.                         +\n+----------+--------------------+--------------------------------------------------------+"}, {"title": "Lightning talks May 20th, 2017 Evening session session", "description": "Lightning Talks 2017-05-20 Evening\n\n+----------+--------------------+--------------------------------------------------------+\n+ Start    | Speakers           | Subject                                                +\n+==========+====================+========================================================+\n+ 0:30     | Meredydd Luff      | **Compiling blocking Python to non-blocking JS**       +\n+          |                    | - Wrote client side JS in Python before yield or await +\n+          |                    | statements, using Skulpt transpiler.                   +\n+----------+--------------------+--------------------------------------------------------+\n+ 5:45     | Efron Licht        | **Elements of Style**                                  +\n+          |                    | - Write understandable code; write a story. Shorter    +\n+          |                    | functions.                                             +\n+----------+--------------------+--------------------------------------------------------+\n+ 11:45    | Maria Mckinley     | **Refactoring Lengthy Bits of Code**                   +\n+          |                    | - Towards understanding the steps to refactoring: a    +\n+          |                    | test, prose, outline, make functions and tests.        +\n+----------+--------------------+--------------------------------------------------------+\n+ 15:45    | Erik Rose          | **Getting Things Unguilty**                            +\n+          |                    | - Using \"getting things done\" as a one slide           +\n+          |                    | flowchart.                                             +\n+----------+--------------------+--------------------------------------------------------+\n+ 21:45    | Meggie Mahnken     | **Using _slots_ for More Opinionated Objects**         +\n+          |                    | - __slots__ when you don't want to allow attributes;   +\n+          |                    | sometimes efficient.                                   +\n+----------+--------------------+--------------------------------------------------------+\n+ 26:00    | Travis             | **Crowd Computing**                                    +\n+          |                    | - fun controlling crowds with Python                   +\n+----------+--------------------+--------------------------------------------------------+\n+ 29:15    | Allen Downey       | **Physical Modeling in Python**                        +\n+          |                    | - Making an interactive book to improve the undergrad  +\n+          |                    | engineering student retention by putting in real world +\n+          |                    | early.                                                 +\n+----------+--------------------+--------------------------------------------------------+\n+ 33:00    | Luceneo            | **Time is Money**                                      +\n+          |                    | - Communicating Professor Antonio Candido's            +\n+          |                    | alternative view to this aphorism.                     +\n+----------+--------------------+--------------------------------------------------------+\n+ 35:45    | Cynthia Lynn       | **PyCon, a High Schooler's Perspective**               +\n+          |                    | - A 15 year-old programmer.  Didn't come for a job;    +\n+          |                    | felt accepted and welcome.                             +\n+----------+--------------------+--------------------------------------------------------+\n+ 41:45    | David Bieber       | **Python Fire, comand line interfaces**                +\n+          |                    | - A single line or decorators added to functions or    +\n+          |                    | classes to make CLIs; great workflow.                  +\n+----------+--------------------+--------------------------------------------------------+\n+ 47:15    |                    | **Pitches for different conferences**                  +\n+          |                    | - One minute each for Python conferences around the    +\n+          |                    | world.                                                 +\n+----------+--------------------+--------------------------------------------------------+"}, {"title": "Lightning talks May 20th 2017 Morning session", "description": "Lightning Talks 2017-05-20 Morning\n\n+----------+--------------------+--------------------------------------------------------+\n+ Start    | Speakers           | Subject                                                +\n+==========+====================+========================================================+\n+ 0:15     | James Powell       | **penv:  a stupid (but useful?) tool**                 +\n+          |                    | - A teaser for a script to replace virtualenv.         +\n+----------+--------------------+--------------------------------------------------------+\n+ 5:45     | Amber Brown        | **Falsehoods Developers Have About Identity**          +\n+          |                    | - Human identities have complexities, including        +\n+          |                    | changing names, different forms and surname orders,    +\n+          |                    | changing timezones and country names.  Developers      +\n+          |                    | should not make assumptions.                           +\n+----------+--------------------+--------------------------------------------------------+\n+ 11:15    | Jelle Zijlstra     | **Fun with Type Annotations**                          +\n+          |                    | - Python has type annotations, which aids              +\n+          |                    | documentation and restructuring and also provides an   +\n+          |                    | oportunity to contribute to open source.               +\n+----------+--------------------+--------------------------------------------------------+\n+ 14:15    | Mark Kohdev        | **Music Data, Metadata, and Morrrreeeee**              +\n+          |                    | - Spotify has a lot of free metadata about music.      +\n+----------+--------------------+--------------------------------------------------------+\n+ 18:45    | Nate Smith         | **Tildetown**                                          +\n+          |                    | - tilde.town is an intentional digital community       +\n+          |                    | accessible over SSH.   Non-commercial.                 +\n+----------+--------------------+--------------------------------------------------------+\n+ 24:00    | Patrick Laban      | **What do we hate?  Time Zones!**                      +\n+          |                    | - Time zones are weirdly set up, e.g., daylight        +\n+          |                    | savings, Indian reservations, China, offsets by crazed +\n+          |                    | weasels, and strange compromises. They are insane -    +\n+          |                    | don't roll your own timezone code.                     +\n+----------+--------------------+--------------------------------------------------------+"}, {"title": "Lightning talks May 21th, 2017 Morning session", "description": "Lightning Talks 2017-05-21 Morning\n\n+----------+--------------------+--------------------------------------------------------+\n+ Start    | Speakers           | Subject                                                +\n+==========+====================+========================================================+\n+ 0:45     | Pan and  C. Lin    | **ZulipBot - Improving GitHub Workflow**               +\n+          |                    | - Add Issue Assignment, better Notifications, and      +\n+          |                    | other improvements to GitHub.                          +\n+----------+--------------------+--------------------------------------------------------+\n+ 6:15     | Lennart            | **Your Keyboard:  Your Most Important Tool**           +\n+          |                    | - Eliminating angle issues and space problems with     +\n+          |                    | angled, tenkeyless keyboards, stretches, and more      +\n+          |                    | keyboard geekery.                                      +\n+----------+--------------------+--------------------------------------------------------+\n+ 11:30    | Hugh Herter        | **Live code reloading in Python**                      +\n+          |                    | - Using the module autoreload to watch and reload      +\n+          |                    | during debugging.                                      +\n+----------+--------------------+--------------------------------------------------------+\n+ 16:00    | Don Goodman-Wilson | **Pascal's Wager and You**                             +\n+          |                    | - Pascal's Wager on the Existence of God is equivalent +\n+          |                    | to wagering about a debilitating hack.                 +\n+----------+--------------------+--------------------------------------------------------+\n+ 20:15    | Paul Ganssle       | **Time Zone Tools**                                    +\n+          |                    | - Looking at datettime, tzinfo, dateutil and pytz,     +\n+          |                    | common errors, and timezone geekery.                   +\n+----------+--------------------+--------------------------------------------------------+\n+ 25:30    | Paul & Laura       | **State of PyVideo.org**                               +\n+          |                    | - Current website, traffic, and users.                 +\n+----------+--------------------+--------------------------------------------------------+"}, {"title": "Keynote: Python@Instragram", "description": "Saturday morning keynote by Lisa Guo & Hui Ding"}, {"title": "Exploring Network Programmability with Python and YANG", "description": "Recently, networking vendors and Silicon Valley giants have been putting\nforth a concerted effort to build standardized models for networking\ndevices. These models allow for building reusable and versatile scripts\nwith predictable, standardized data. Without such models, the wide\nvariety of inputs and outputs required by different devices and vendors\nmade scripting a tedious and challenging endeavor. The modeling language\nin use is called YANG, and a variety of standards have emerged. A vendor\nagnostic standard called OpenConfig has lately become stable enough to\nbegin programming devices with it. Using Python, YANG is surprisingly\neasy to work with, and extremely powerful applications can be written\nwith basic knowledge of JSON or XML and RPCs.\n\nThe talk will start with use-cases for programming networking devices,\nand will detail a specific, trivial, use case that will be used in the\ntalk. Next, we will discuss the \u2018legacy\u2019 way of programming devices (SSH\nand screenscraping), and highlight the challenges, such as complex\nregular expressions, slow responses, and lack of reusability between\ndevices. From there we will dive into YANG, focusing on OpenConfig\nmodels. A YANG model is essentially a template, and JSON or XML can be\nmapped to the YANG template. This makes it perfect for Pythonic\nmanipulation. In the use case there will be a GET RPC returning a YANG\nrepresentation of the box\u2019s state in JSON, which we will search for the\nrelevant health indicator by drilling down in the JSON dictionary. A\nsimple change to the dictionary will remediate the problem, and a PATCH\nRPC merges the new configuration onto the box. Since open, standard\nmodels are in use, this script could be run on many devices across a\nnetwork to achieve the same effect with no changes needed. We will\nfinish up with the pros and cons of YANG before opening the talk for\nQ&A.\n"}, {"title": "Decorators and descriptors decoded", "description": "Python developers use decorators and descriptors on a daily basis, but\nmany don't understand them well enough to create (or debug) them.\nDecorators are widely deployed in popular Python Web frameworks.\nDescriptors are the key to the database mappers used with those\nframeworks, but under the covers they play an even more crucial role in\nPython as the device that turns plain functions into bound methods,\nsetting the value of the ``self`` argument. This tutorial is a gentle\nintroduction these important language features, using a test-driven\npresentation and exercises, and covering enhancements in Python 3.6 that\nmake class metaprogramming easier to get right.\n\nDecorators without closures are presented first, highlighting the\ndifference between *run time* and *import time* that is crucial when\nmeta-programming. We then get a firm grounding on closures and how they\nare implemented in Python, before moving to higher order function\ndecorators and class decorators.\n\nCoverage of descriptors starts with a close look at Python's\n``property`` built-in function and dynamic attribute look up. We then\nimplement some ORM-like field validation descriptors, encounter a\nusability problem, and leverage PEP 487 -- Simpler customisation of\nclass creation -- to solve it. Alternative implementations using a class\ndecorator and a metaclass will be contrasted to the PEP 487 solution.\n"}, {"title": "Unicode: what is the big deal?", "description": "Ever wondered why people complain that text processing is a hard\nproblem? Or why Python 3 would introduce such a big backward\nincompatibility with switching to Unicode? Wonder no more, this talk is\nfor you.\n\nIn 30 minutes I'm going to demonstrate real world text processing\nproblems and how Python 3 helps solve them. The talk is going to explain\nhow you should split your text from binary data in your application,\nwhat are sensible defaults and what are possible gotchas. All this\nsprinkled with a healthy dose of frustration by a guy whose first name\nstarts with \u0141.\n"}, {"title": "Tracing, Fast and Slow: Digging into and improving your web service\u2019s performance", "description": "Do you maintain a `Rube\nGoldberg <https://s-media-cache-ak0.pinimg.com/564x/92/27/a6/9227a66f6028bd19d418c4fb3a55b379.jpg>`__-like\nservice? Perhaps it\u2019s highly distributed? Or you recently walked onto a\nteam with an unfamiliar codebase? Have you noticed your service responds\nslower than molasses? This talk will walk you through how to pinpoint\nbottlenecks, approaches and tools to make improvements, and make you\nseem like the hero! All in a day\u2019s work.\n\nThe talk will describe various types of tracing a web service, including\nblack & white box tracing, tracing distributed systems, as well as\nvarious tools and external services available to measure performance.\nI\u2019ll also present a few different rabbit holes to dive into when trying\nto improve your service\u2019s performance.\n"}, {"title": "Effectively running python applications in Kubernetes/OpenShift", "description": "Google, Red Hat, Intel, Huawei, Mirantis, Deis and many, many others are\ninvesting a lot of time and effort into improving Kubernetes. I bet, you\nhave encountered that name at least once in the past twelve months,\neither on Hacker News, Reddit, or somewhere else. Do you want to learn\nmore about the best container orchestration in the universe, but were\nafraid of the setup complexity? Do you want to see how easy it is to run\nany application using containers? Do you want to experience the joy of\nscaling application with a single click? This, and a lot more will be\ndiscussed in details. In this tutorial, every attendee will be provided\nwith an environment, and step by step instructions necessary to setup\nthe environment, build and deploy a microservices based sample\napplication. Alternatively, a sample application of any choosing can be\nused throughout the entire tutorial. All that will be performed on\nOpenShift, which is a Red Hat distribution of Kuberenets with some\nadd-ons that will be described in details at the beginning of the\ntutorial. To wet your appetite even more, here are some of the topics we\nare going to cover:\n\n-  automatic build and deployment\n-  git integration\n-  image registry integration\n-  scaling application\n-  containers security\n-  batch tasks\n\nand much more.\n\nAfter the session, every person will be able to play around with the\naccompanying code repository that was used in the tutorial, which\nincludes detailed instructions how to run it on your own from scratch.\n"}, {"title": "Library UX: Using abstraction towards friendlier APIs", "description": "Complicated libraries can be a pain in the butt to use. It's not\nsurprising that there are a lot of \"X for humans\" libraries out there,\nsome of which are mostly wrappers around more frustrating interfaces.\n\nThis is not a theoretical talk. I'll touch upon theory to give you\ncontext, but will then talk about what that means for you in practice so\nthat you can write better libraries. I'll talk about why library UX\nmatters, about abstraction as a general concept, about out what happens\nwhen you over/under abstract, and about some useful tips to help build\nfriendly APIs. Meanwhile, I'll show some positive examples from\nlibraries we know and love (flask, SQLAlchemy, Requests, etc). Once you\nrecognize these effects in play, you'll be able to apply them to your\nown code and make life better for everyone!\n"}, {"title": "Dial M For Mentor", "description": "One of the nicest things about Python community is the availability of\nmentors willing to help you. Various mentors have helped me navigate the\nopen source community and help advanced my skills. I realized finding a\nmentor is not as easy as it seems, and it takes a lot of courage to\nreach out in the first place. And then, there is impostor syndrome,\nwhere one may feel like they don\u2019t deserve the help. In this talk, I\nwill provide advice about working with a mentor. Asking for help is not\na failure.\n"}, {"title": "It's time for datetime", "description": "Working with time is not a trivial challenge. Python includes a native\nmodule in the standard library to work with it but datetime keeps being\ntogether with unicode a common source of errors. This often leads to the\nwidespread of many other libraries in the attempt of easing the work of\nworking with datetime. Datetime is one of those API that looks easy to\nuse but given the many concepts around time, is it easy to get backfired\nif the developer has not solid knowledge about the them.\n\nIn this talk we will overview the main concepts about timestamps\nrepresented through datetime objects, the limitations on the standard\nlibrary and some simple steps to try to avoid the common mistakes that\neveryone can fall into.\n\nNaive datetimes (which the datetime API works by default with) are a\ngreat tool to represent calendar times, but when talking about\ntimestamps (focus of this talk) timezones is n essential part of it and\nthe datetime module can be tricky to use for that use cases.\n\nWe will also speak about different standards of time, time zones,\nDaylight Saving Times, leap seconds, serialization and datetime\narithmetics.\n\nThe talk will be focused on giving the foundations that everyone knows\nto be able to understand and work efficiently and without making painful\nmistakes when dealing with time related algorithms.\n"}, {"title": "Piecing it Together: A beginner's guide to application configuration", "description": "Assembling all the necessary setup for an application you\u2019re building\ncan often be more frustrating than writing the app itself. Learning to\ndo this well is difficult, especially for those who are new to Python\nand might not know where to begin or what questions to ask. While there\nis no \u201cright way\u201d to set up a development environment or application,\nunderstanding the components involved and how they interact can empower\nyou to customize your setup to best suit your needs. This talk will dive\ninto what happens when setting up a database, the purpose and\nconfiguration of an isolated environment, how Python packages are\ninstalled, and finally, how each of these components interact with each\nother and the application itself; in particular, how an application's\nstructure facilitates said interactions.\n"}, {"title": "Dask: A Pythonic Distributed Data Science Framework", "description": "Dask is a general purpose parallel computing system capable of\nCelery-like task scheduling, Spark-like big data computing, and\nNumpy/Pandas/Scikit-learn level complex algorithms, written in Pure\nPython. Dask has been adopted by the PyData community as a Big Data\nsolution.\n\nThis talk focuses on the distributed task scheduler that powers Dask\nwhen running on a cluster. We'll focus on how we built a Big Data\ncomputing system using the Python networking stack (Tornado/AsyncIO) in\nservice of its data science stack (NumPy/Pandas/Scikit Learn).\nAdditionally we'll talk about the challenges of effective task\nscheduling in a data science context (data locality, resilience, load\nbalancing) and how we manage this dynamically with aggressive\nmeasurement and dynamic scheduling heuristics.\n"}, {"title": "Instagram Filters in 15 Lines of Python", "description": "Images tell stories, and we love Instagram filters because they give\nemotion to our images. Do you want to explore what makes up Instagram\nfilters? In this talk, we will talk about the basic elements of\nInstagram filters and implement them in Python. The staple libraries we\nwill use are scikit-image and numpy - matplotlib and jupyter notebooks\nfor plotting and interactivity. In the end, we will implement the\n(now-defunct) Gotham Instagram filter in 15 lines of Python (not\nincluding imports). Throughout the process, there will be many pretty\npictures.\n"}, {"title": "A gentle introduction to deep learning with TensorFlow", "description": "Deep learning's explosion of spectacular results over the past few years\nmay make it appear esoteric and daunting, but in reality, if you are\nfamiliar with traditional machine learning, you're more than ready to\nstart exploring deep learning. This talk aims to gently bridge the\ndivide by demonstrating how deep learning operates on core machine\nlearning concepts and getting attendees started coding deep neural\nnetworks using Google's TensorFlow library.\n"}, {"title": "Asynchronous Python for the Complete Beginner", "description": "With the introduction of the asyncio package in Python 3.4, you can hear\nlots of people talking about asynchronous programming, most in a\nfavorable way, some not so much. In this talk, I will tell you what this\nasync fever is about and what can it do for you that regular Python\ncan't, not only with asyncio, but also with other frameworks that\nexisted long before it.\n"}, {"title": "Microservices with Python and Flask", "description": "Microservices are receiving the buzzword treatment these days, and as\nsuch, they have a cloud of hype surrounding them that makes it hard to\nseparate substance from fluff. In this tutorial, Miguel Grinberg starts\nwith an introduction to this architecture, including what's great and\nnot so great about it, and then teaches you how a traditional monolithic\napplication written in Flask can be refactored into a modern distributed\nsystem based on microservices.\n"}, {"title": "ContainerOrchestration.py: The tutorial session", "description": "Container Orchestration is the new hot topic in design of scalable\nsystem architecture.\n\nIn this tutorial we look at the main choices for container\norchestrators: Docker Swarm, Kubernetes and Apache Mesos.\n\nWe will look at the use of the respective Python APIs for interacting\nwith thoses engines.\n\nThis 3-hr session will provide hands-on use of those orchestrators with\nreal use-cases.\n"}, {"title": "Faster Python Programs - Measure, don't Guess", "description": "Optimization can often help to make Python programs faster or use less\nmemory. Developing a strategy, establishing solid measuring and\nvisualization techniques as well as knowing about algorithmic basics and\ndatastructures are the foundation for a successful optimization. The\ntutorial will cover these topics. Examples will give you a hands-on\nexperience on how to approach efficiently.\n\nPython is a great language. But it can be slow compared to other\nlanguages for certain types of tasks. If applied appropriately,\noptimization may reduce program runtime or memory consumption\nconsiderably. But this often comes at a price. Optimization can be time\nconsuming and the optimized program may be more complicated. This, in\nturn, means more maintenance effort. How do you find out if it is\nworthwhile to optimize your program? Where should you start? This\ntutorial will help you to answer these questions. You will learn how to\nfind an optimization strategy based on quantitative and objective\ncriteria. You will experience that one's gut feeling what to optimize is\noften wrong.\n\nThe solution to this problem is: \u201eMeasure, Measure, and Measure!\u201c. You\nwill learn how to measure program run times as well as profile CPU and\nmemory. There are great tools available. You will learn how to use some\nof them. Measuring is not easy because, by definition, as soon as you\nstart to measure, you influence your system. Keeping this impact as\nsmall as possible is important. Therefore, we will cover different\nmeasuring techniques.\n\nFurthermore, we will look at algorithmic improvements. You will see that\nthe right data structure for the job can make a big difference. Finally,\nyou will learn about different caching techniques.\n\nSoftware Requirements\n---------------------\n\nYou will need Python 2.7 or 3.5 installed on your laptop. Python 2.6 or\n3.3/3.4 should also work. Python 3.x is strongly preferred.\n\nJupyter Notebook\n~~~~~~~~~~~~~~~~\n\nI will use a Jupyter Notebook for the tutorial because it makes a very\ngood teaching tool. You are welcome to use the setup you prefer, i.e\neditor, IDE, REPL. If you also like to use a Jupyter Notebook, I\nrecommend ``conda`` for easy installation. Similarly to ``virtualenv``,\n``conda`` allows creating isolated environments but allows binary\ninstalls for all platforms.\n\nThere are two ways to install ``Jupyter`` via ``conda``:\n\n1. Use `Minconda <http://conda.pydata.org/miniconda.html>`__. This is a\n   small install and (after you installed it) you can use the command\n   ``conda`` to create an environment:\n   ``conda create -n pycon2016 python=3.5`` Now you can change into this\n   environment: ``source activate pycon2016``. The prompt should change\n   to ``(pycon2017)``. Now you can install IPython:\n   ``conda install Jupyter``.\n\n2. Install `Anaconda <http://continuum.io/downloads>`__ and you are\n   ready to go if you don't mind installing lots of packages from the\n   scientific field.\n\nWorking with ``conda`` environments\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAfter creating a new environment, the system might still work with some\nstale settings. Even when the command ``which`` tells you that you are\nusing an executable from your environment, this might actually not be\nthe case. If you see strange behavior using a command line tool in your\nenvironment, use ``hash -r`` and try again.\n\nTools\n~~~~~\n\nYou can install these with ``pip`` (in the active ``conda``\nenvironment):\n\n-  `SnakeViz <http://jiffyclub.github.io/snakeviz/>`__\n-  `line\\_profiler <https://pypi.python.org/pypi/line_profiler/>`__\n-  `Pympler <https://pypi.python.org/pypi/Pympler>`__\n-  `memory\\_profiler <https://pypi.python.org/pypi/memory_profiler>`__\n-  `pyprof2calltree <https://github.com/pwaller/pyprof2calltree/>`__\n\nLinux\n^^^^^\n\nUsing the package manager of your OS should be the best option.\n"}, {"title": "Text is More Complicated Than You Think: Comparing and Sorting Unicode", "description": "Few people realize just how complicated text can be. Did you know\nsorting and even case-folding can depend on a user's locale? That\ndifferent strings of characters can be semantically completely\nequivalent? That there are over a thousand Latin letters?\n\nLegacy text encodings like ASCII made a lot of simplifying assumptions\nabout how written languages work, and we all put up with them because it\nwas cool to even have computers in the first place. Unicode removes many\nof those assumptions and provides the tools we need to write software\nthat can just do the right thing regardless of what text users throw at\nit. Even if you don't translate your UI, getting the details of string\ncomparison, sorting, and searching right can eliminate annoying\nsurprises for you and your users.\n"}, {"title": "Automate AWS With Python", "description": "AWS is one of the best-known cloud vendors. Using the Web UI is fine\nwhen starting out, but automating cloud operations is important. Boto3\nprovides a great Pythonic API to AWS, but using it correctly can be\nsubtle.\n\nThe talk will cover how to automate AMI builds, building Cloud Formation\nTemplates and automating S3 bucket management.\n"}, {"title": "Creating And Consuming Modern Web Services with Twisted", "description": "This tutorial will show students how to write applications and services\nwhich efficiently publish and consume services and APIs.\n\nTo do so, we will combine 4 Python-based technologies:\n\n-  Jupyter is a real-time development environment.\n-  Twisted is a powerful platform for network programming that supports\n   many protocols, including HTTP.\n-  Klein is a Twisted-based web application framework.\n-  Treq is a Requests-style HTTP client based on Twisted.\n\nBy combining all of these we will guide students through *interactively\nprototyping* a production quality web application that *publishes* both\n*service APIs* and web resources such as HTML, and that can *efficiently\nconsume many back-end services* such as 3rd-party APIs.\n"}, {"title": "The Glory of pdb's set_trace", "description": "Everyone needs to debug code, and it can take up a non-trivial portion\nof our time to wait for code to complete execution and write print\nmessages to stdout. There\u2019s one function in particular in the python\ndebugger (pdb) library that can give you a much clearer understanding of\nwhat\u2019s going on in your code, much more quickly; pdb.set\\_ trace(). In\nthis talk, we\u2019ll identify the most useful things you can do when you use\nset trace, that can make debugging exponentially more efficient and\nenjoyable.\n"}, {"title": "Packaging Let\u2019s Encrypt: Lessons learned shipping Python code to hundreds of thousands of users", "description": "Let's Encrypt launhced on April 12th 2016, for the first time allowing\nanyone access to free SSL certificates that could be automatically\nfetched and renewed. The demand was massive, and so was the need for a\nclient to fetch these certificates for all of those users. This client\nis called Certbot, and it's written entirely in Python. Unfortunately\nfor the sanity of Certbot developers, these users of Let's Encrypt can't\ndecide on a single operating system to use! This requires us to ship our\nsoftware, and all of its dependencies, to a variety of systems all with\ndifferent web servers, Python versions, package managers,and underlying\npackages. Learn how we got through this mess!\n"}, {"title": "Algorithmic Music Generation", "description": "Music is mainly an artistic act of inspired creation and is unlike some\nof the traditional math problems. Music cannot be solved by a simple set\nof formulae. The most interesting and challenging part is producing\nunique music without infringing the copyright. The generated music has\nto sound good, and what sounds good is very subjective and varies from\nculture to culture.\n\nArtificial Neural Network/Deep Learning has a wide range of\napplications, such as in Image processing, Natural language processing,\nTime series prediction, etc. But what about its usage in art? Could we\nuse deep learning to create music?\n\nThis talk is about how deep learning models were used to produce music -\ncatering particularly to Bollywood.\n\nThis talk would show how an exquisite piece of art i.e. music can be\ngenerated using deep learning model which helps in automated feature\nextraction. In order to automate the music generation, the model must be\nable to remember the learned features over the longer period of time,\nthis is achieved by a special type of Recurrent Neural Network (RNN)\ncalled as LSTM (Long Short Term Memory) network.\n\nImplementation of such complex model can be made much easier using\ninbuilt Python libraries such as Keras with Theano as backend. It allows\nfor easy and fast prototyping. Packages like numpy and scipy are being\nused for easier mathematical computation of input vectors and for\nreading/writing the WAV files respectively. The neural network\narchitecture makes use of numerous amount of music samples to train the\nmodel. After an adequate number of iterations and training time, this\nmodel generates music that is unique and original.\n\nIn this talk, steps involved in preprocessing of data, training the\nmodel, testing the model and generating the music from the trained model\nwill be discussed. This talk will also cover some of the challenges and\ntradeoffs made for algorithmic music generation.\n"}, {"title": "Panel Discussion: Paul Everitt with Guido van Rossum and others", "description": "Paul Everitt, Guido van Rossum\n\nPanel Discussion\n"}, {"title": "PSF Community Service Awards", "description": "PSF Community Service Awards"}, {"title": "Modern Python Dictionaries -- A confluence of a dozen great ideas", "description": "Python's dictionaries are stunningly good. Over the years, many great\nideas have combined together to produce the modern implementation in\nPython 3.6.\n\nThis fun talk uses pictures and little bits of pure python code to\nexplain all of the key ideas and how they evolved over time.\n\nIncludes newer features such as key-sharing, compaction, and versioning.\n"}, {"title": "Using Functional Programming for efficient Data Processing and Analysis", "description": "As a multi paradigm language, Python has great support for functional\nprogramming. For better or for worse, leading data libraries such as\nPandas eschew the this style for object-oriented programming. This\ntutorial will explain how to take advantage of Python's excellent\nfunctional programming capabilities to efficiently obtain, clean,\ntransform, and store data from disparate sources.\n"}, {"title": "Re-Programming the Human Genome with Python", "description": "Modern genome editing techniques such as CRISPR-Cas9 are revolutionizing\nthe way we discover and treat the root genetic causes of disease. Many\nof the most popular tools and libraries in this cutting edge application\nare written in Python. This talk will provide a general,\nsoftware-centric introduction to the exciting new area of genome\nediting, describe the central string search, machine learning, and data\nmanagement problems involved, and review how Python frameworks and\nlibraries are used today to solve these problems in Production in order\nto benefit human health. This talk assumes no prior lab experience: only\na proficiency with Python and curiosity!\n"}, {"title": "How to write a Python transpiler", "description": "We all know Python is a powerful and expressive programming language.\nWhat you may not know is how much of the internals of Python itself is\nexposed for you to use and manipulate.\n\nIn this talk, you'll be introduced to the tools and libraries Python\nprovides to manipulate the compilation and execution of Python code. You\nwill also see how you can use those tools to target execution\nenvironments other than the CPython virtual machine.\n"}, {"title": "Dr. Microservices, Or How I Learned to Stop Worrying and Love the API", "description": "Assuming that you already know how to build a monolithic app, you must\nbe wondering how you can use all this \"microservice\" stuff that you keep\nhearing about. Well, a good word of advice is that you probably don't\nneed it. If designed properly, a monolithic app should be able to scale\nand fit the needs of most businesses. Even so, you should keep your\ndevelopment as simple as possible until you have proven and solidified\nyour business concepts. But if you do need to grow to Internet scale,\nthen you have a long road ahead of you.\n\nMoving from a monolithic application to microservices is a natural\nevolution that is often of necessity. There are several competing\nschools of thought that are still being battle-tested in these early\ndays of microservice architecture. Among all the competing paradigms,\nmost of the requirements can be agreed upon, but are mostly\ndifferentiated by the tools used to fulfill the requirements.\n\nThis talk will cover setting up the required infrastructure, and\ndemonstrate how to migrate a sample monolithic Django application into a\nmicroservices platform.\n\nThe demo application will use the following technologies: Django, Flask,\nFabric, Terraform, Ansible, CentOS, Docker, Mesos, Consul, Nginx,\nPgbouncer, Kafka\n"}, {"title": "Hacking Classic Nintendo Games with Python", "description": "Do you feel like using your superpowers as a developer to bring the\ngames of your childhood into the future with the power of the Internet?\nIn this live coded journey, we'll build an SMS powered \"Game Genie\"\nallowing the audience to send text messages to manipulate the Nintendo\ngames being played in real time. This will involve working with Flask,\nthe Twilio API, the FCEUX NES emulator and how to bridge them with quick\nLua scripts.\n"}, {"title": "One Data Pipeline to Rule Them All", "description": "There are myriad data storage systems available for every use case\nimaginable, but letting application teams choose storage engines\nindependently can lead to duplicated efforts and wheel reinvention. This\ntalk will explore how to build a reusable data pipeline based on Kafka\nto support multiple applications, datasets, and use cases including\narchival, warehousing and analytics, stream and batch processing, and\nlow-latency \"hot\" storage.\n"}, {"title": "The Wild West of Data Wrangling", "description": "Data science introductory courses might give you the impression that\ndealing with data is neat, tidy, and simple. They present you with a\nsimplistic dataset and the scikit-learn or Pandas documentation, and a\nday or so later, you're done! Piece of cake, right?\n\nThe real world of data isn't that easy!\n\nAs a data scientist who has worked in the industry for several years, I\nhave had a lot of experience dealing with messy, inaccurate, incomplete\ndata, and I want to share those experiences with you. I'll talk my way\nthrough three real-world situations where I've had to analyze and build\nmodels on untidy and complex data, going through how I've preprocessed\nthe data and prepared it for modeling. You'll leave with an\nunderstanding of how a data scientist thinks about data and what she\ndoes when the data is complicated.\n"}, {"title": "Magic Method, on the wall, who, now, is the `__fairest__` one of all?", "description": "Magic methods are a very powerful feature of Python and can open a whole\nnew door for you. However, with great power comes great responsibility.\n\nIn this talk we explore magic method's capabilities by first designing\nnew interfaces in a series of fun experiments. Secondly, we play with\ncreating undeletable objects and learn about the mighty Garbage\nCollector in cPython and how a single magic method can overturn the fate\nof the object. Lastly, we create a lazy Redis client to illustrate a\npractical application of magic methods and learn about lazy loading.\n\nOnce you see what magic methods can bring to the table, the limit is\nonly your imagination!\n"}, {"title": "IoT Lab with Micropython and Friends", "description": "Come learn about the Internet of Things and Micropython in this hands-on\nhardware tutorial, no soldering or hardware experience required! We will\nbe building a wifi-enabled temperature sensor as a vehicle for learning\nIoT concepts including data capture, building security into data\ntransmission, and messaging between IoT clients and servers. Attendees\nwill have an opportunity to take their sensors out into the conference\nvenue to take measurements, reconvening to discuss analysis and\nvisualization of IoT data. All the hardware needed will be provided, and\nattendees will be able to program the devices via a locally-hosted web\ninterface.\n\nThis tutorial will be a great introduction for folks interested in\nInternet of Things, Micropython, or hardware hacking. You do not need\nprior experience in any of these topics to attend. We will be using the\nESP8266 micro controller and the MQTT protocol for messaging. Attendees\nshould download the `mosquitto MQTT\nbroker <https://mosquitto.org/download/>`__ in addition to collateral\nthat will be sent out to attendees ahead of the tutorial. We will be\nusing the `WebREPL\ninterface <https://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/repl.html>`__\nfor programming the ESP8266. If you are wondering what the heck all of\nthis means do not despair! These topics will be covered in the tutorial.\n"}, {"title": "No More Sad Pandas: Optimizing Pandas Code for Speed and Efficiency", "description": "When I first began working with the Python Pandas library, I was told by\nan experienced Python engineer: \"Pandas is fine for prototyping a bit of\ncalculations, but it's too slow for any time-sensitive applications.\"\nOver multiple years of working with the Pandas library, I have realized\nthat this was only true if not enough care is put into identifying\nproper ways to optimize the code's performance. This talk will review\nsome of the most common beginner pitfalls that can cause otherwise\nperfectly good Pandas code to grind to a screeching halt, and walk\nthrough a set of tips and tricks to avoid them. Using a series of\nexamples, we will review the process for identifying the elements of the\ncode that may be causing a slowdown, and discuss a series of\noptimizations, ranging from good practices of input data storage and\nreading, to the best methods for avoiding inefficient iterations, to\nusing the power of vectorization to optimize functions for Pandas\ndataframes.\n"}, {"title": "I Installed Python 3.6 on Windows and I Liked It", "description": "Python has a great reputation as a cross-platform language, which for\nmany people means different varieties of Linux. But a huge number of\nPython users are running on Windows - a fundamentally different\noperating system where things do not always work the same. However,\nPython has always worked incredibly well across different platforms\nincluding Windows, going to great lengths to support and expose the\nplatform without making development more complex. In this session,\nCPython core developer and Microsoft engineer Steve Dower will discuss\nsome of the reasons why cross-platform support is not an accident, and\nhow Python 3.6 makes it even easier to support both Windows and Linux.\n"}, {"title": "Python Epiphanies", "description": "This tutorial is for developers who've been using Python for a while and\nwould consider themselves at an intermediate level, but are looking for\na deeper understanding of the language. It focuses on how Python differs\nfrom other languages in subtle but important ways that are often\nconfusing, and it demystifies a number of language features that are\nsometimes misunderstood.\n\nIn many ways Python is very similar to other programming languages.\nHowever, in a few subtle ways it is quite different, and many software\ndevelopers new to Python, after their initial successes, hit a plateau\nand have difficulty getting past it. Others don't hit or perceive a\nplateau, but still find some of Python's features a little mysterious or\nconfusing. This tutorial will help deconstruct some common incorrect\nassumptions about Python.\n\nIf in your use of Python you sometimes feel like an outsider, like\nyou're missing the inside jokes, like you have most of the puzzle pieces\nbut they don't quite fit together yet, or like there are parts of Python\nyou just don't get, this may be a good tutorial for you.\n\nAfter completing this tutorial you'll have a deeper understanding of\nmany Python features. Here are some of the topics we'll cover:\n\n-  How objects are created and names are assigned to them\n\n-  Ways to modify a namespace: assignment, import, function definition\n   and call, and class definition and instantiation. Much of the\n   tutorial is structured around namespaces and how they get modified to\n   help you understand most of the differences between variables in\n   other languages and those in Python, including\n\n   -  why Python has neither pass-by-value nor pass-by-reference\n      function call semantics,\n\n   -  and why parameters passed to a function can sometimes be changed\n      by it and sometimes cannot.\n\n-  Iterables, iterators, and the iterator protocol, including how to\n   make class instances iterable\n\n-  How to use generators to make your code easier to read and understand\n\n-  Hacking classes after their definition, and creating classes without\n   a class statement, as an exercise to better understand how they work\n\n-  Bound versus unbound methods, how they're implemented, and\n   interesting things you can do with bound methods\n\n-  How and why you might want to create or use a partial function\n\n-  Example use-cases of functions as first-class objects\n\n-  Unpacking and packing arguments with \\* and \\*\\* on function call and\n   definition\n\nBring a laptop with Python 3 and Jupyter Notebook.\n"}, {"title": "Rants and Ruminations From A Job Applicant After \ud83d\udcaf CS Job Interviews in Silicon Valley", "description": "What is it like to interview at 1 technology company? Stressful and\ntiring. What is it like to interview at 100 technology companies? I have\ndone that. In late August 2016, I quit an uninspiring full-time software\njob and talked to 100 employers in the San Francisco Bay Area to find\nthe best fit. The hiring process reflects the company culture and its\nvalues. Listen to my rants and ruminations of interviewing at tiny\nseed-stage startups to large technology companies in Silicon Valley.\nLearn how to reform your own hiring process to be more considerate and\nthoughtful. Learn how to prepare for interviews efficiently.\n"}, {"title": "Know thy self: Methods and method binding", "description": "Methods are like functions, but different. How? Why? And what's will\nhaving to type \"self\" all the time?\n\nWe'll explore partial application of functions and review why it might\nbe nice to start using classes. Then to clarify how method objects work\nwe'll examine the result of accessing the method attributes of an object\nwithout calling them. Understanding the behavior we uncover here will\nrequire more attribute lookup experiments, which will lead us discover\nthe power of descriptors.\n\nAlong the way we'll peek in at other languages' approaches to method\nbinding, hopefully coming to appreciate the way Python does things\nenough to type \"self\" a few thousand more times.\n"}, {"title": "Web programming from the beginning", "description": "*What\u2019s the web all about anyway? How can you make your computer talk to\nother computers with Python?*\n\nModern web frameworks such as Django and Flask are immensely powerful.\nHowever, these useful tools obscure the foundations of network\nprogramming upon which they are based, which can be very helpful to\nunderstand. So instead of building useful applications with these\nlibraries, let's experiment with sockets!\n\nAt this tutorial, a Python-flavored history of the web will be presented\nand attendees will write or modify a TCP chat client, a static site web\nserver, an HTTP client, a CGI script, and a WSGI-compliant server and\nweb application. We will learn what all those things are and how they\nfit together, bringing the architecture of modern web apps into better\nfocus.\n\nThe material will be accessible to participants with no web development\nexperience, however, they must be able to write and run Python scripts\nat the command-line. This tutorial might appeal to someone also\nattending an introductory web development tutorial, but it covers\nseparate, complementary material. Web development experience is not\nrequired but a little exposure would be helpful; for instance,\ninstalling flask and running the minimal application on the `quickstart\npage <http://flask.pocoo.org/docs/0.11/quickstart/>`__. Similarly, prior\nexposure to HTML would be useful but is not necessary.\n"}, {"title": "Look mum no hands! From blinking LEDs to a bike speedometer with MicroPython", "description": "In this talk I will show you how to use a micro-controller to build a\nwifi enabled speedometer for your bike, using MicroPython. And some\nhardware. And a bike (maybe). I will introduce you to the world of\nMicroPython: a python distribution that runs on micro-controllers.\nMicro-controllers are small computers that are all around us: in cars,\nTVs, and your internet connected fridge. We will start with making LEDs\nblink, then serve webpages, build an interrupt handler and finally put\nit all together to make a wifi enabled speedometer for a bike.\n"}, {"title": "Level up! Rethinking the Web API framework.", "description": "Think there's nothing left to explore in how we design Web API\nframeworks? Think again.\n\nThe author of Django REST framework walks through how we might approach\ndesigning a new Python-based API framework from scratch, and looks at\nhow we can start building smarter, more productive API tooling as a\nresult.\n\nYou should come away from this talk with a better appreciation of:\n\n-  How best to provide API client libraries and API documentation to\n   your users.\n-  How to build APIs that support both realtime and request/response\n   interfaces.\n-  How to build APIs that are web-browsable.\n-  Why you might want to consider taking a schema-first approach to your\n   API design.\n"}, {"title": "Human-Machine Collaboration for Improved Analytical Processes", "description": "Over the last several years, Python developers interested in data\nscience and analytics have acquired a variety of tools and libraries\nthat aim to facilitate analytical processes. Libraries such as Pandas,\nStatsmodels, Scikit-learn, Matplotlib, Seaborn, and Yellowbrick have\nmade tasks such as data wrangling, statistical modeling, machine\nlearning, and data visualization much quicker and easier. They have\naccomplished this by automating and abstracting away some of the more\ntedious, repetitive processes involved with analyzing and modeling data.\n\nOver the next few years, we are sure to witness the introduction of new\ntools that are increasingly intelligent and have the ability to automate\nmore complex analytical processes. However, as we begin using these\ntools (and developing new ones), we should strongly consider the level\nof automation that is most appropriate for each case. Some analytical\nprocesses are technically difficult to automate, and therefore require\nlarge degrees of human steering. Others are relatively easy to automate\nbut perhaps should not be due to the unpredictability of results or\noutputs requiring a level of compassionate decision-making that machines\nsimply don\u2019t possess. Such processes would benefit greatly from the\ncollaboration between automated machine tasks and uniquely human ones.\nAfter all, it is often systems that utilize a combination of both human\nand machine intelligence that achieve better results than either could\non their own.\n\nIn this talk, we will discuss human-machine collaboration as it applies\nto analyzing data with Python. We will review a framework for\nexploratory data analysis with the goal of identifying which tasks\nshould be automated, which tasks should not, and which tasks would\nbenefit from a more interactive, symbiotic, and collaborative process\nbetween the human and the machine. We will explore Python libraries that\nwe can use to build tools that allow us to perform different types of\nanalysis. We\u2019ll also introduce the Cultivar project, an example of a\nhybrid analytics tool that combines a Django framework with Javascript\nvisualizations and Celery for task management to facilitate more\nefficient and effective human-machine systems for data analysis.\n"}, {"title": "Intro to Bayesian Machine Learning with PyMC3 and Edward", "description": "There has been uprising of probabilistic programming and Bayesian\nstatistics. These techniques are tremendously useful, because they help\nus to understand, to explain, and to predict data through building a\nmodel that accounts for the data and is capable of synthesizing it. This\nis called the generative approach to statistical pattern recognition.\n\nEstimating the parameters of Bayesian models has always been hard,\nimpossibly hard actually in many cases for anyone but experts. However,\nrecent advances in probabilistic programming have endowed us with tools\nto estimate models with a lot of parameters and for a lot of data. In\nthis tutorial, we will discuss two of these tools, PyMC3 and Edward.\nThese are black box tools, swiss army knifes for Bayesian modeling that\ndo not require knowledge in calculus or numerical integration. This puts\nthe power of Bayesian statistics into the hands of everyone, not only\nexperts of the field. And, it's great that these are implemented in\nPython with its rich, beginner-friendly ecosystem. It means we can\nimmediately start playing with it...\n\nWe have planned three awesome parts, spread over three awesome hours:\n\n-  First hour: Introduction to Bayesian machine learning.\n\n-  Second hour: Baby steps in PyMC3 and Edward.\n\n-  Third hour: Solve a real-world problem with PyMC3 or Edward (model,\n   fit, criticize).\n"}, {"title": "Hands-On Intro to Python for New Programmers", "description": "Brand new to programming and want to get some hands-on Python\nexperience? Let's learn some Python together!\n\nDuring this tutorial we will work through a number of programming\nexercises together. We'll be doing a lot of asking questions, taking\nguesses, trying things out, and seeking out help from others.\n\nIn this tutorial we'll cover:\n\n-  Types of things in Python: strings, numbers, lists\n-  Conditionally executing code\n-  Repeating code with loops\n-  Getting user input\n"}, {"title": "Readability Counts", "description": "Have you found unreadable PEP8-compliant code and wondered how to fix\nit? Have you ever seen code that was simply a pleasure to read?\n\nIf you've ever wondered what makes code easy to read, this talk is for\nyou.\n\nDuring this talk we'll learn a number of techniques for refactoring code\nto improve readability and maintainability.\n\nWe'll discuss:\n\n-  whitespace\n-  self-documenting code\n-  modularity\n-  expectation management\n\nWe'll end with a checklist for improving the readability of your own\ncode.\n"}, {"title": "Readable Regular Expressions", "description": "What are regular expressions, what are they useful for, and why are they\nso hard to read? We'll learn what regular expressions are good for, how\nto make our own regular expressions, and how to make our regular\nexpressions friendly and readable (yes it's possible, sort of).\n"}, {"title": "Mastering scipy.spatial", "description": "The heavily-used scipy library is so large that each of the major\nmodules could fill its own tutorial syllabus. It is also\nproduction-quality software with a 1.0 release imminent. In this\ntutorial, my focus is to cover the scipy.spatial component of the\nlibrary in great detail, from the perspective of a heavy user and active\ndeveloper of the computational geometry components of scipy. From\ndistance matrices to Voronoi diagrams and Hausdorff distances, we will\nexplore the corners of scipy.spatial code--both long-established\nfeatures and even proposed features that haven't yet made it into a\nstable release.\n"}, {"title": "Optimizations which made Python 3.6 faster than Python 3.5", "description": "Various optimizations made Python 3.6 faster than Python 3.5. Let's see\nin detail what was done and how.\n\nPython 3.6 is faster than any other Python version on many benchmarks.\nWe will see results of the Python benchmark suite on Python 2.7, 3.5 and\n3.6.\n\nThe bytecode format and instructions to call functions were redesign to\nrun bytecode faster.\n\nA new C calling convention, called \"fast call\", was introduced to avoid\ntemporary tuple and dict. The way Python parses arguments was also\noptimized using a new internal cache.\n\nOperations on bytes and encodes like UTF-8 were optimized a lot thanks\nto a new API to create bytes objects. The API allows very efficient\noptimizations and reduces memory reallocations.\n\nSome parts of asyncio were rewritten in C to speedup code up to 25%. The\nPyMem\\_Malloc() function now also uses the fast pymalloc allocator also\ngiving tiny speedup for free.\n\nFinally, we will see optimization projects for Python 3.7: use fast\ncalls in more cases, speed up method calls, a cache on opcodes, a cache\non global variables.\n"}, {"title": "Welcome to Pycon 2017", "description": "Welcome to Pycon 2017"}, {"title": "Introduction to Threat Modeling", "description": "Are you a website or application developer? Are you worried about\nsecurity? Don\u2019t know what you need to know, and what you can safely\nleave to the experts? Come learn about how to analyze your application\u2019s\ndesign for potential security flaws, how to think like a security\nengineer, and see some of the most common pitfalls that programs fall\nvictim to. In this talk we will work through the process of threat\nmodeling - understanding how your system might get attacked, what its\nweak points are, and how to defend it.\n"}, {"title": "async/await and asyncio in Python 3.6 and beyond", "description": "The talk overviews async/await, asynchronous generators and\ncomprehensions in Python 3.6 and the asyncio module. We'll discuss when\nand how asyncio should be used in a modern applications and services,\nwhat is uvloop, and what asyncio frameworks and libraries one should\nuse. I'll share our ideas about where asyncio is headed and what to\nexpect in Python 3.7.\n"}, {"title": "Practical API Security", "description": "With the dominance of Mobile Apps, Single Page Apps for the Web, and Micro-Services, we are all building more APIs than ever before. Like many other developers, I had struggled with finding the right mix of security and simplicity for securing APIs. Some standards from the IETF have made it possible to accomplish both. Let me show you how to utilize existing libraries to lock down you API without writing a ton of code.\n\nIn this tutorial, you will learn how to write a secure API with future proof security utilizing JOSE. JOSE is a collection of complimentary standards: JWT, JWE, JWS, JWA, and JWK. JOSE is used by OAuth, OpenID, and others to secure communications between APIs and consumers. Now you can use it to secure your API."}, {"title": "Learning From Failure: Post Mortems", "description": "Unless you work on pacemakers or at NASA, you've probably accepted the fact that you will make mistakes in your code, and those mistakes will creep into production. This talk will introduce you to post-mortems, and how to use them as a vehicle for improving your code and your process."}, {"title": "Analyzing Data: What pandas and SQL Taught Me About Taking an Average", "description": "\u201cSo tell me,\u201d my manager said, \u201cwhat is an average?\u201d\n\nThere\u2019s probably nothing worse than that sinking feeling when you finish an analysis, email it to your manager or client to review, and they point out a mistake so basic you can\u2019t even fathom how you missed it.\n\nThis talk is about mine: how to take an average.\n\nAverages are something we use everywhere - it\u2019s a simple ``np.mean()`` in pandas or ``AVG()`` in SQL. But recently I\u2019ve come to appreciate just how easy it is to calculate this statistic incorrectly. We learn once - in middle school no less - how to take an average, and never revisit it. Then, when we are faced with multidimensional datasets (ie. pretty much every dataset out there), we never reconsider whether we should be taking an average the same way.\n\nIn this talk, we follow my arduous and humbling journey of learning how to properly take an average with multidimensional data. We will cover how improperly calculating it can produce grossly incorrect figures, which can slip into publications, research analyses and management reports."}, {"title": "Complexity Science", "description": "Complexity Science is an approach to modeling systems using tools from discrete mathematics and computer science, including networks, cellular automata, and agent-based models.  It has applications in many areas of natural and social science.\n\nPython is a particularly good language for exploring and implementing models of complex systems.  In this tutorial, we present material from the draft second edition of *Think Complexity*, and from a class we teach at Olin College.  We will work with random networks using NetworkX, with cellular automata using NumPy, and we will implement simple agent-based models."}, {"title": "Introduction to Digital Signal Processing", "description": "Spectral analysis is an important and useful technique in many areas of science and engineering, and the Fast Fourier Transform is one of the most important algorithms, but the fundamental ideas of signal processing are not as widely known as they should be.\n\nFortunately, Python provides an accessible and enjoyable way to get started.  In this tutorial, I present material from my book, *Think DSP*, and from a class I teach at Olin College.  We will work with audio signals, including music and other recorded sounds, and visualize their spectrums and spectrograms.  We will synthesize simple sounds and learn about harmonic structure, chirps, filtering, and convolution."}, {"title": "Love your bugs", "description": "Wrestling bugs can be one of the most frustrating parts of programming - but with the right framing, bugs can also be our best allies. I'll tell the tales of two of my favorite bugs, including the time I triggered a DDOS of a logging cluster, and explain why I love them. I'll also give you concrete strategies for approaching tricky bugs and making them easier and more fun."}, {"title": "Systemd: why you should care as a Python developer", "description": "Done! Your shiny new application is functionally complete and ready to be deployed to production! But how exactly do you deploy properly on Linux? Wonder no more! In 30 minutes, this talk explains how you can harness the power of the init system and systemd to solve common deployment problems, including some that you didn't even know you had. Examples of things we will cover:\n\n* How to secure your system by having: private /tmp for your process, read-only paths so that your process can not write to them, inaccessible paths, protect users home, network access, bin directories, etc.\n* How to limit the resources you app can consume.\n* How to interact directly with systemd, so it can start transient units, start/stop services, mount disks, resolve addresses.\n* How to isolate your service without containers.\n* How to isolate your service using containers (using systemd to spawn a namespace).\n\nAll this will be covered from a Python developer's perspective."}, {"title": "Docker for Data Science", "description": "Jupyter notebooks simplify the process of developing and sharing Data Science projects across groups and organizations. However, when we want to deploy our work into production, we need to extract the model from the notebook and package it up with the required artifacts (data, dependencies, configurations, etc) to ensure it works in other environments. Containerization technologies such as Docker can be used to streamline this workflow.\n\nThis hands-on tutorial presents Docker in the context of Reproducible Data Science - from idea to application deployment. You will get a thorough introduction to the world of containers; learn how to incorporate Docker into various Data Science projects; and walk through the process of building a Machine Learning model in Jupyter and deploying it as a containerized Flask REST API."}, {"title": "Randomness in Python: Creating Chaos in an Ordered Machine/Controlled Environment", "description": "There are many computational needs for randomness--from creating a game to building a simulation involving naturally occurring randomness similar to the physical world. For most purposes using the python math module to create random numbers within a specific range can be done with no further questions, but sometimes we require a more nuanced implementation.\n\nWe will look at both pseudo-random number generators, which use statistically repeatable processes to generate seemingly random series and true random number generators, which inject physical processes like atmospheric noise to generate sequences of numbers. We will discuss the benefits and drawbacks of both approaches and common methods of implementing these two types of generators in python.\n\nFinally, we will look at several real applications for randomness and discuss the best method for generating \u201crandomness\u201d in each scenario."}, {"title": "How We Do Identity Wrong", "description": "Most software has a user. Depending on the software, the user may need to provide various details about themselves for proper operation -- their name, their date of birth, where they live. However, it is quite common for software systems such as these to ask the wrong questions, collect too much data, and when it comes down to it, serialise the parts of the user's identity wrongly. This talk will discuss common ways that real-world systems store identity wrong, what questions you shouldn't ask, and how you can fix it in your own projects."}, {"title": "Getting Started with Blockchains and Cryptocurrencies in Python", "description": "Blockchains and cryptocurrencies are getting more popular everyday. The rise and wide adoption of cryptocurrencies such as Bitcoin has attracted a lot of attention, ranging from developers to bankers. However, many people are still not very comfortable with the ideas and concepts behind the blockchain, and workings of cryptocurrencies such as Bitcoin. Therefore, it stops them from entering and exploring the blockchain and cryptocurrency world.\n\n\nIn this tutorial, we first explore the cryptographic ideas behind the cryptocurrencies, including hashing, public/private cryptography. This will be followed by the basics of a simplified blockchain. We cover mining, incentives, payment records, ownership, etc. Then we delve into working and playing with a private Bitcoin network, by implementing simple programs in Python to create public/private keys, accounts, and transactions. We further look into services that provide exchange rate data on cryptocurrencies and analyze the data."}, {"title": "Counter, Gauge, Upper 90 - Oh my!", "description": "Setting up application monitoring is often an afterthought, and in the speaker's opinion can be a bit overwhelming to get started with. What is a `metric`? What is a `gauge`? What is a `counter`? What's that `upper 90` metric you have up on your `dashboard`? And what *all* metrics should I monitor?\n\nThis talk aims to get you started on the monitoring journey in Python. In addition to clearing up some of the jargon, we will look at `statsd` and `prometheus` monitoring systems and how to integrate our applications with these.\n\nWithout the numbers, we are really flying blind!"}, {"title": "How Netflix does failovers in 7 minutes flat", "description": "During peak hours, Netflix video streams make up more than one third of internet traffic. Netflix must stream uninterrupted in the face of widespread network issues, bad code deploys, AWS service outages, and much more. Failovers make this possible.\n\nFailover is the process of transferring all of our traffic from one region in AWS to another. While most of Netflix runs on Java, failovers are powered entirely by Python. Python's versatility and rich ecosystem means we can use it for everything from predicting our traffic patterns to orchestrating traffic movement, while dealing with the eventual consistency of AWS.\n\nToday, we can shift all of our 100 million+ users in under seven minutes. A lot of engineering work went into making this possible. The issues we faced and solutions we created have broad application to availability strategies in the cloud or the datacenter."}, {"title": "Taking Django Async", "description": "The Django Channels project has taken a major turn with version 2.0, embracing Python's async functionality and building applications around an async event loop rather than worker processes.\n\nDoing this, however, wasn't easy. We'll look through some of the techniques used to make Django coexist in this async world, including handing off between async and sync code, writing fully asynchronous HTTP and WebSocket handling, and what this means for the future of Django, and maybe Python web frameworks in general."}, {"title": "Behavior-Driven Python", "description": "Behavior-Driven Development (BDD) is gaining popularity as an improved way to collaborate over product features and tests. In Python, **behave** is one of the leading BDD test frameworks. Using **behave**, teams write Gherkin behavior scenarios (e.g., tests) in plain language, and then programmers write Python code to automate the steps. BDD testing is great because tests are self-documenting and steps abide by the DRY principle. An example test could be:\n\n- Given the DuckDuckGo home page is displayed\n- When the user searches the phrase \"Python\"\n- Then search results for \"Python\" are shown\n\nThis talk will teach how to use **behave** to develop well-designed test scenarios and a robust automation framework. It will focus on the layers of the behave framework: feature files, step definitions, support classes, and config files. A full example project will be hosted on GitHub for audience members to reference after the talk."}, {"title": "Data Visualization in Mixed Reality with Python", "description": "Data Visualization charts are supposed to be our map to information. However, when making charts, customarily we are just re-sizing lines and circles based on metrics instead of creating data-driven version of reality.  The contemporary charting techniques have a few shortcomings (especially when dealing with high-dimensional dataset):\n\n* **Context Reduction**: in order to fit a high-dimensional dataset into a chart one needs to filter/ aggregate/ flatten data which results in reduction of full context of information.  Without context most of the charts show only a part of the story, that can potentially lead to data misinterpretation/misunderstanding.\n* **Numeric Thinking**: naturally humans have hard time perceiving big numbers. While data visualization is suppose to help us to conceptualize large volumes,  unless the dataset is carefully prepared, 2D charts rarely give us the intuitive grasp of magnitude.\n* **Perceptual de-humanization**: when examining charts it is easy to forget that we are dealing with activity in real world instead of lines/bars.\n\nAugmented/Mixed Reality can potentially solve all of the issues listed above by presenting an intuitive and interactive environment for data exploration. Three dimensional space provides conditions to create complex data stories with more \u201crealistic assets\u201d (beyond lines and bars). The talk would present the architecture required to create MR data visualization story with Python (70% of architecture), starting with drawing 3D assets in a data-driven way and finishing with deployment on MR devices."}, {"title": "Flourishing FLOSS: Making Your Project Successful", "description": "You maintain an Open Source project with great code? Yet your project isn\u2019t succeeding in the ways you want? Maybe you\u2019re struggling with funding or documentation? Or you just can\u2019t find new contributors and you\u2019re drowning in issues and pull requests?\nOpen Source is made up of many components and we are often better-trained in methods for writing good code, than in methods for succeeding in the other dimensions we want our project to grow.\nIn this talk we\u2019ll explore the different components of an Open Source project and how they work together. After this talk you\u2019ll be well-equipped with a ideas and strategies for growing, cultivating, and nourishing your Open Source project.\n\nFor your project to succeed, all of its non-code components must be well-maintained. What are these different components and what methods can we learn to maintain them?\n\n* Build real relationships with your sponsors and determine ways how both sides can benefit from this relationship, don\u2019t just ask people for money.\n* Establish a good communication system with your contributors: Keep them informed, listen to their feedback and input, make them feel heard.\n* Thank the people who worked on ticket triage or marketing, not just those who wrote code, in your release notes.\n* Make it easy for new contributors to get started: Write and maintain good documentation, answer questions in a friendly and timely manner.\n* Market and evangelize in the right places and at the right time: Give conference talks, organize sprints, keep your project\u2019s Twitter account active, always curate new and interesting content on your blog or website.\n* Implement a Code of Conduct and enforce it if needed: Make your project a safe space to contribute for everyone.\n\nWith these methods and a half-dozen others, you\u2019ll handle beautifully all the components your project needs to succeed."}, {"title": "Pycamp 2K17: A Disclaimer", "description": "Nagpur is a tier-two city in India. There were no user groups, programming meetups and that too in Python? Impossible! It really seemed impossible to organise people and do something that will make them interested in learning and contributing.\nAs a student of Computer Engineering Bachelor's Degree Program, I always felt that drive missing in my fellow classmates.\nMy talk covers the journey of organising first Django Girls Meetup and first ever Python BootCamp of my city called \"Pycamp 2k17\".\nIt covers the journey of survival, how being a women it made tougher and how we ended up putting a disclaimer on our website because we never knew that name 'PyCamp' has a copyright!\nHow me and my team managed to sell tickets of worth INR 50,000 to the people who hardly ever heard of the name 'Python'.\nAnd cherry on the cake to get 'PSF' sponsoring the event."}, {"title": "Get your resources faster, with importlib.resources", "description": "Resources are files that live within Python packages.  Think test data files, certificates, templates, translation catalogs, and other static files you want to access from Python code.  Sometimes you put these static files in a package directory within your source tree, and then locate them by importing the package and using its `__file__` attribute.  But this doesn't work for zip files!\n\nYou could use `pkg_resources`, an API that comes with `setuptools` and hides the differences between files on the file system and files in a zip file.  This is great because you don't have to use `__file__`, but it's not so great because `pkg_resources` is a big library and can have potentially severe performance problems, even at import time.\n\nWelcome to `importlib.resources`, a new module and API in Python 3.7 that is also available as a standalone library for older versions of Python.  `importlib.resources` is build on top of Python's existing import system, so it is very efficient.  It also defines an abstract base class which loaders can implement to provide their own resource access.  Python's built-in zipimporter uses this to provide efficient access to resources within a zip file.  Third party import hooks can do the same, so resources can come from anything that is importable by Python.\n\nThis talk will step through the motivations behind `importlib.resources`, the library's usage, its interfaces, and the hooks made available to third party packages.  It will also talk about the minor differences between the standalone version and the version in Python 3.7's standard library.  Hopefully audience members will come away with compelling reasons to port their code to this much more efficient library."}, {"title": "Visual Testing with PyCharm and pytest", "description": "Know you should be doing testing but haven\u2019t gotten over the hurdle to learn it? pytest is Python\u2019s modern, friendly, and powerful testing framework. When paired with an IDE, testing gets a visual interface, making it much easier to get started.\n\nIn this talk we cover \u201cvisual testing\u201d: starting, learning, using, and mastering test-driven development (TDD) with the help of a nice UI. We\u2019ll show PyCharm Community Edition, a free and open-source Python IDE, as a productive TDD environment for pytest. Specifically, we\u2019ll show a workflow using pytest and PyCharm that helps make tests speed up development, or at the very least help to make testing seem less \"in the way\" of other development activities"}, {"title": "Type-checked Python in the real world", "description": "You've heard about Python type annotations, but wondered if they're useful in the real world? Worried you've got too much code and can't afford to annotate it?  Type-checked Python is here, it's for real, and it can help you catch bugs and make your code easier to understand. Come learn from our experience gradually typing a million-LOC production Python application!\n\nType checking solves real world problems in production Python systems. We'll cover the benefits, how type checking in Python works, how to introduce it gradually and sustainably in a production Python application, and how to measure success and avoid common pitfalls. We'll even demonstrate how modern Python typechecking goes hand-in-hand with duck-typing! Join us for a deep dive into type-checked Python in the real world."}, {"title": "Practical Sphinx", "description": "Each member of your project team uses something different to document\ntheir work -- RestructuredText, Markdown, and Jupyter Notebooks. How do\nyou combine all of these into useful documentation for your project's users.\nSphinx and friends to the rescue!\n\nLearn how to integrate documentation into your everyday development\nworkflow, apply best practices, and use modern development tools and\nservices, like Travis CI and ReadTheDocs, to create engaging and up-to-date\ndocumentation which users and contributors will love."}, {"title": "STEAM Workshops using Jupyter Notebooks, JupyterHub, and Binder", "description": "Middle School and High School students can learn by doing. Jupyter Notebooks and the rich Python ecosystem with libraries on a variety of topics can engage many learners of the sciences and humanities. Interactive content, using Jupyter Widgets and visualization libraries, put the student in charge of manipulating content and extending their learning. Giving students engaging content in familiar subjects encourages them to develop and use computational skills to build upon their interests.\n\nOne difficulty of teaching workshops is access to computers and the ability to install software on those systems. This talk will demonstrate how a workshop organizer or teacher can deploy JupyterHub easily for a class using the Zero to JupyterHub Guide, Kubernetes, and Cloud Services. Even if students only have access to smartphones, tablets, or shared computers, a workshop can be held using Binder which allows a notebook environment to be served at the click of a button to any modern web browser."}, {"title": "Statistics and probability: your first steps on the road to data science", "description": "An introduction to statistics and probability geared toward enabling attendees to understand the capabilities and limitations of statistics and probability and to help them implement calculations in their projects. Where possible/feasible, attendees will build their own tools to help them grasp the underlying concepts. In addition, attendees will be introduced to the pre-built tools in world-class Python and data science libraries to help them capitalize on the efficiencies and utility that those libraries offer."}, {"title": "Coding through Adversity", "description": "In 2017, I was released from prison after serving 17 years. One of the most transformational experiences I had while incarcerated was learning to code, through a pioneering new program called Code.7370 \u2014 the first coding curriculum in a United States prison.\n\nIn this talk, I\u2019d like to share my experiences learning to code in prison and getting a software engineering job after my release, with the goals of:\n\nInspiring new programmers to stick with it and be confident in their abilities\n\nInspiring educators to think about how to support new coders in a broad range of learning environments (there\u2019s no internet in prison!)\n\nInspiring everyone to think about the potential for rehabilitation in prison in a new way\n\n**Abstract**\n\nMy story: My first computer was the Commodore 64. I can still remember writing in Basic when you had to number the lines of code yourself and save everything onto cassette drives. Once the Atari 2600 came on the scene, I traded in my keyboard for a joystick and lost myself in each successive release. From Intellivision to Colecovision and from Nintendo to Playstation, I immersed myself to test my skill and lose myself in these magical digital universes. As I left my teen years behind, I discovered new ways of exciting and losing myself in a sea of alcoholism and drug addiction. As Y2K came and went, American Online and Motorola flip phones were about the hottest thing going and I began dealing drugs to support my reckless lifestyle. This decision would lead me to taking a friend\u2019s life over a six pound suitcase of marijuana. It was the worst decision I\u2019ve ever made in my life and would cost me the next 17 years in prison. While I was in prison, I sat on the sidelines and watched as the world of technology was passing me by. I spent over a decade in prison with no access to computers, the internet, or email. The only glimmers I saw were from commercials on TV and my subscription to Wired magazine. That was until I was accepted to The Last Mile, an entrepreneurial program at San Quentin State Prison. We read books by authors like Guy Kawasaki, Reid Hoffman, and Andy Smith. We also learned to develop business plans for our own entrepreneurial ideas that involved 3 components, 1) something we were passionate about 2) something that involved technology 3) something with a social cause. My idea was for an online life coaching platform called Fitness Monkey that would empower addiction recovery through physical fitness. In 2014, the door to technology was finally opened. The Last Mile started the Code.7370 program where I was accepted and began learning front-end web development. With every line of HTML, CSS, and JavaScript I wrote, I fell in love with coding for its ability to solve problems and create and design solutions that could enhance people\u2019s lives. I carried a coding book with me everywhere I went and my love for coding would propel me to the head of the class. I begin doing breakout sessions with my classmates on coding challenges assigned to us by Hack Reactor, a dev bootcamp in San Francisco. The first class was such a success, they started a Track 2 that taught advanced CSS and went into depth on data structures and algorithms. Later, we began delving into full-stack development with Angular, Node, and WordPress. With so many qualified inside coders, The Last Mile partnered with the Prison Industry Authority to open The Last Mile Works, a dev shop inside the walls of San Quentin. We began developing projects for outside companies like Airbnb and the Coalition for Public Safety. As well as, earning a wage that would provide us with a savings account upon our release to help transition back into society. I was building a resume and gaining real world experience while incarcerated that would enable me to find employment with The Last Mile upon my release. On May 4, 2017, I was released from prison after serving a total of 17 years. I did everything in my power to make sure that this time wasn\u2019t wasted. I was hired for a paid internship with The Last Mile as a Web Developer to build a learning management system that would package the coding program at San Quentin into a piece of software that could be distributed to other prisons throughout California and eventually the entire country. This internship also included our application to Y-Combinator where we pitched our project to Michael Seibel, the CEO and his team of VC\u2019s. We finished the project and it\u2019s currently being tested in San Quentin and two different Women\u2019s prisons. As my internship drew to an end, I began to reach out and see what other opportunities would be available to someone with my experience. I went through a 4 hour interview process with the entire engineering team at FANDOM. I\u2019m not going to say it was as difficult as the parole board, but these guys put me through my paces and in the end offered my a 90 day internship. Here was my chance! When my internship began, I was given quite a few tasks that those in the industry call pixel pushing. Design tweaks and CSS fixes. All of the cards on the project management board were labeled 1-5 on complexity. For the first few weeks, all of my cards were ones. However, with each successive week, I became more familiar with the code base and started to reach for some of the more difficult assignments. I believe one of my strengths was being able to admit when I had no clue what I was doing and courage to ask for help. My time at FANDOM was an amazing experience in learning how to collaborate on an international team that spans eight different countries. I learned how to effectively communicate with different departments within the office in San Francisco. And, one of the most amazing parts was getting to tell my story to the entire company at the all hands meeting. Now, I was not only the \u2018old\u2019 intern, but someone who had persevered through adversity and was willing to share his truth of committing a horrible crime, but also of earning a college degree, running marathons, developing business ideas, and learning to code. All of the work paid off this past December, when I was offered a full-time position as a Software Engineer for FANDOM. One of my biggest fears was what would life be like for me once I was released from prison. The answer is nothing short of incredible. The Last Mile\u2019s mantra is \u2018Believe in the Process\u2019 and there were times when I wasn\u2019t even quite sure what the process was, but I believed anyway. For every step I took learning and growing, more and more opportunities opened up for me. I found great freedom in defaulting to yes."}, {"title": "Visualizing Algorithms with Python and Programmable LEDs", "description": "Recently, a new LED strip specification, APA102, has been released which allows these strips to be driven by a general purpose CPU instead of a dedicated microcontroller. This allows us the luxury of controlling them with Python!\n\nI'll teach you about how to get the the hardware, how to think about programming for lights and how to build anything from a psychedelic art installation to home lighting to an educational tool.\n\nProgramming with lights is awesome because you can SEE bugs with your eyes. I think the use of these LED's have great potential as a teaching tool because of the immediacy of the feedback.\n\nLIVE hardware demos!  See Quicksort in brilliant colors!"}, {"title": "Bayesian Non-parametric Models for Data Science using PyMC3", "description": "Nowadays, there are many ways of building data science models using Python, including statistical and machine learning methods. I will introduce probabilistic models, which use Bayesian statistical methods to quantify all aspects of uncertainty relevant to your problem, and provide inferences in simple, interpretable terms using probabilities.  A particularly flexible form of probabilistic models uses Bayesian *non-parametric* methods, which allow models to vary in complexity depending on how much data are available. In doing so, they avoid the over-fitting that is common in machine learning and statistical modeling. I will demonstrate the basics of Bayesian non-parametric modeling in Python, using the PyMC3 package. Specifically, I will introduce two common types, Gaussian processes and Dirichlet processes, and show how they can be applied easily to real-world problems using two examples."}, {"title": "Colossal Cave Adventure in Python... in the browser!", "description": "Colossal Cave, also known as Adventure or ADVENT, is the original text adventure. It was written in FORTRAN IV and there is practically no way to run the original program without translating it. We'll explore software archeology to write a Python interpreter to run the FORTRAN code as-is, without translating it. Come learn about pre-ASCII and 36-bit integers and writing interpreters in Python!\n\nAnd, we'll show how to use BeeWare's Batavia Python interpreter (in JavaScript) to execute the program. FORTRAN IV in Python in JavaScript in your browser!"}, {"title": "Intro to Spatial Analysis and Maps with Python", "description": "In this tutorial, we will introduce Python as a spatial problem solving and data visualization tool. To demonstrate the power of Python for spatial analysis, we will solve a spatial problem and make a beautiful map of our results. Along the way, we will discuss considerations when dealing with spatial data and the wide range of Python tools available for spatial analysis."}, {"title": "Efficient shared memory data structures", "description": "Multithreading makes shared memory easy, but true parallelism next to impossible. Multiprocessing gives us true parallelism, but it makes sharing memory very difficult, and high overhead. In this talk, we'll explore techniques to share memory between processes efficiently, with a focus on sharing read-only massive data structures."}, {"title": "Code like an accountant: Designing data systems for accuracy, resilience and auditability", "description": "As engineers, we care a lot about the reliability of our applications. When a website falls over, pagers go off, and engineers burst into action to bring a site back to life.  Postmortems are written, and teams develop strategies to prevent similar failures in the future.\n\nBut what about the reliability of our data? Would _you_ trust financial reports built on your data?\n\nIf not, what can you do to improve data health? If you _would_ trust these reports, how can you prove to customers, investors, and auditors alike that they should too?\n\nIn this talk, you\u2019ll learn to apply strategies from the world of dev-ops to data. You\u2019ll learn about questions auditors ask that can help you pinpoint data problems. You\u2019ll also learn some accounting-specific tools for accurate and timely record keeping that I\u2019ve found fascinating and helpful!"}, {"title": "Fighting Gerrymandering with PyMC3", "description": "At the end of 2017, there were seven states with ongoing redistricting litigation.  We will discuss a statistical model that the United States Supreme Court declared to be appropriate in cases of racial gerrymandering, and show how it can be implemented and used with the library `PyMC3`.  We will also discuss what the model tells us about racial gerrymandering in North Carolina."}, {"title": "Dan Callahan - Keynote - PyCon 2018", "description": "Speaker: Dan Callahan"}, {"title": "A practical guide to Singular Value Decomposition in Python", "description": "Recommender systems have become increasingly popular in recent years, and are used by some of the largest websites in the world to predict the likelihood of a user taking an action on an item. In the world of Netflix, this means recommending similar movies to the ones you have seen. In the world of dating, this means suggesting matches similar to people you already showed interest in!\n\nMy path to recommenders has been an unusual one: from a Software Engineer to working on matching algorithms at a dating company, with a little background on machine learning. With my knowledge of Python and the use of basic SVD (Singular Value Decomposition) frameworks, I was able to understand SVDs from a practical standpoint of what you can do with them, instead of focusing on the science.\n\nIn my talk, you will learn 2 practical ways of generating recommendations using SVDs: matrix factorization and item similarity. We will be learning the high-level components of SVD the \"doer way\": we will be implementing a simple movie recommendation engine with the help of Jupiter notebooks, the MovieLens database, and the Surprise recommendation package."}, {"title": "Reinventing the Parser Generator", "description": "Writing lexers and parsers is a complex problem that often involves the use of special tools and domain specific languages (e.g., the lex/yacc tools on Unix).  In 2001, I wrote Python versions of these tools which can be found in the PLY project.  PLY predates a huge number of modern Python features including the iteration protocol, generators, decorators, metaclasses, and more.  As such, it relied on a variety of clever hacks to layer a domain specific parser specification language on top of Python itself.\n\nIn this talk, I discuss a modernization of the PLY project that abandons its past and freely abuses modern Python features including advanced metaclasses, guaranteed dictionary ordering, class decorators, type hints, and more.   The result of this work can be found in the SLY project.  However, this talk isn't so much about SLY as it is focused on how far you can push Python metaprogramming features to create domain-specific languages.   Prepare to be horrified--and to write code that will break your IDE.\n"}, {"title": "import time_travel: A Primer on Timezones in Python", "description": "Timezones are one of those things every programmer loves to hate. Most of us, at\nleast in the US, just try to ignore them and hope nobody notices. Then twice a\nyear, we fear with impending doom those 3 small words: Daylight Saving Time.\n\nIt doesn't have to be this way. Armed with some best practices and a little help\nfrom supporting libraries, timezone-related bugs can be a thing of the past.\n\nThis talk explores standard library and 3rd party library timezone support, as\nwell as persistence and serialization techniques for timezone-aware datetimes.\nBy the end of the talk, the listener should feel confident in their ability to\ncorrectly store, send, receive, and manipulate datetime objects in any timezone."}, {"title": "Debugging PySpark -- Or trying to make sense of a JVM stack trace when you were minding your own bus", "description": "Apache Spark is one of the most popular big data projects, offering greatly improved performance over traditional MapReduce models. Much of Apache Spark\u2019s power comes from lazy evaluation along with intelligent pipelining, which can make debugging more challenging. This talk will examine how to debug Apache Spark applications, the different options for logging in PySpark, as well as some common errors and how to detect them.\n\nSpark\u2019s own internal logging can often be quite verbose, and this talk will examine how to effectively search logs from Apache Spark to spot common problems. In addition to the internal logging, this talk will look at options for logging from within our program itself.\n\nSpark\u2019s accumulators have gotten a bad rap because of how they interact in the event of cache misses or partial recomputes, but this talk will look at how to effectively use Spark\u2019s current accumulators for debugging as well as a look to future for data property type accumulators which may be coming to Spark in future version.\n\nIn addition to reading logs, and instrumenting our program with accumulators, Spark\u2019s UI can be of great help for quickly detecting certain types of problems.\n\nDebuggers are a wonderful tool, however when you have 100 computers the \u201cwonder\u201d can be a bit more like \u201cpain\u201d. This talk will look at how to connect remote debuggers, but also remind you that it\u2019s probably not the easiest path forward."}, {"title": "Teaching Python 101", "description": "My name is Devishi Jha, and I am a freshman at Valparaiso High School, Indiana. I have been taught programming by the Python community, and currently, I have been teaching python to children in my local community. Throughout elementary and middle school, I have been taught programming in many different ways. Then in late middle school, I taught programming to children at my local library. In this talk, I have compiled many teaching methods that I have found useful when learning python/teaching python. I also cover the ages to start coding, access to computers, and teaching at school vs. an after-school program. With the help of several coding teachers, school principals, and after-school coding program directors, I hope that this talk will serve as a guide to anyone who wants to teach python or find a good way to learn it."}, {"title": "By the Numbers: Python Community Trends in 2017/2018", "description": "Want to know about the latest trends in the Python community and see the the big picture of how things have changed over the last few years? Interested in the results of the latest official Python Developers Survey 2017 which was supported by the Python Software Foundation and gathered responses from more than 10.000 Python developers? Come learn about the most popular types of Python development, trending frameworks, libraries and tools, additional languages being used by Python developers, Python versions usage statistics and many other insights from the world of Python. All derived from the actual data and professional research such as the Python Developers Survey 2017 which collected responses from over 10.000 Python developers, organized in partnership between the Python Software Foundation and JetBrains, the Python Developers Survey 2016, 3rd party surveys and supplementary analytical research."}, {"title": "Jupyter Tools for Teaching and Learning", "description": "Project Jupyter is the center of a set of technologies that grew out of simple tools to make Python easier to use. Today, Jupyter is composed of powerful client-server applications and protocols for computing in many programming languages. This talk focuses on using these technologies for pedagogical purposes.\n\nEvery course I have taught since the Fall semester of 2014 has been over the web via our JupyterHub server. These courses have included firstyear writing seminars, as well as courses in Programming Languages, Assembly Language, Introduction to Biology (in Python), and in Processing (Java-based). In this talk I hope to help identify best-practices for using Jupyter in the classroom. I will discuss and demonstrate tools and techniques, and explore the challenges of using Jupyter for teaching and learning."}, {"title": "Inside the Cheeseshop: How Python Packaging Works", "description": "Questions and confusion about the Python packaging ecosystem abound. What is this `setup.py` file? What's the difference between wheels and eggs? Do I use setuptools or distutils? Why should I use twine? Do I put my projects dependencies in a `requirements.txt` or in `setup.py`? How do I just get my module up on PyPI? Wait, what is Warehouse?\n\nThis talk will identify the key tools one might encounter when trying to distribute Python software, what they are used for, why they exist, and their history (including where their weird names come from). In addition, we'll see how they all work together, what it takes to make them work, and what the future has in store for Python packaging."}, {"title": "Hard Shouldn't be Hardship: Supporting Absolute Novices to Python", "description": "When we tell novices that programming is hard, what are we warning them about? The intent may be to impress upon learners the importance of taking the workload seriously and starting early on the homework. However, \u201chard\u201d is a loaded word and leaving novices alone with that word and their imaginations can create an unbounded variable, normalizing emotional extremes and all nighters.  The instructor often has no idea that \"hard\" has become \"hardship\".\n\nAn instructor's expertise can become a blindspot. We've learned what is normal through experience and can easily forget that we didn't know from the start.  We presume that those experiencing trouble will stop and reach out for help, but this will not always be the case if they don't know those situations look like.  Saying \"when you're stuck\" is not an objective,  actionable statement and leaves the unbounded suffering monster in play, particularly for students who are afraid of being a bother or being seen as asking a stupid question.  We need to be clear with our learners about when difficult material has moved outside our expectations and create a classroom environment where questions and clarifications are celebrated.\n\nThis talk will cover real and practical methods to help learners succeed in intensive programming courses, such as making your expectations clear, helping your students recognize when and how they should reach out for help, creating a positive emotional atmosphere in the classroom, and providing help efficiently.  Topics will include a ban on demotivational words, strategies for soliciting questions, the \"2 hour\" rule, the educational benefits of live coding, and recontextualizing error messages."}, {"title": "The AST and Me", "description": "Get under the hood and learn about Python's beloved Abstract Syntax Tree. Ever wonder how Python code is run? Overheard people arguing about whether Python is interpreted or compiled? In this talk, we will delve into the lifecycle of a piece of Python code in order to understand the role that Python's Abstract Syntax Tree plays in shaping the runtime of your code. Utilizing your newfound knowledge of Python's AST, you'll get a taste of how you probably already rely on ASTs and how they can be used to build awesome tools."}, {"title": "Making Art with Python", "description": "In this workshop, we\u2019ll learn how to make visual art using Processing.py, the Python mode for a powerful visual language library called Processing.\n\nThis tutorial walks through Processing.py from the ground up\u2013\u2013from initial setup & foundational concepts, to the library's core functions, as well as its more advanced features. Topics covered include the coordinate system, shape primitives, lines, stroke, fill, color, mapping, events, and transforms. At the end, we'll break out of the tutorial format and give free reign for attendees to create, tinker, and experiment freely with the framework.\n\nYou\u2019ll walk away with an art piece of your own original design, as well as a newfound appreciation for Python as a medium for creative expression."}, {"title": "Network Analysis Made Simple: Part I", "description": "Have you ever wondered about how those data scientists at Facebook and LinkedIn make friend recommendations? Or how epidemiologists track down patient zero in an outbreak? If so, then this tutorial is for you. In this tutorial, which is Part I of a two-part series, we will use a variety of datasets to help you understand the fundamentals of network thinking, with a particular focus on constructing, summarizing, and visualizing complex networks. With this tutorial, you will be well equipped to explore advanced topics (dynamics on graphs, evolving graphs, and network propagation methods) in Part II."}, {"title": "Python Data Sonification for Science and Discovery", "description": "What do geiger counters, black holes, heart monitors, and volcanoes have in common?  They all can use sound to convey information! This talk will explore using python for sonification: the process of translating data into sound that could otherwise be represented visually. Have you ever wondered how to use python to represent data other than making charts and graphs?  Are you a musician looking for inspiration in the world around you?  This talk will go over how to use python to translate time series data to MIDI that can be played back in real time. We\u2019ll sonically interpret light-curve data from the Kepler space telescope using pygame, MIDIUtil, and astropy, turning points on a graph into a musical masterpiece! Come learn about how data sonification is used to help people, to expand the reach of scientific research, and to create music from data."}, {"title": "One weird trick to becoming a better software developer", "description": "Those of us who have worked in software development for longer than a few years probably feel we have an intuitive sense of what a great developer is. Some traits come more easily to mind than others when it comes to identifying a great developer. In this talk we will take a slightly different approach to evaluating software development best practices, and identify one underrated skill common to great software developers: empathy. I hope to demonstrate that cognitive and emotional empathy skills are critical to good software development. We will explore ways to cultivate this trait in order to become better developers, both for our own sakes and for the sake of the teams in which we work."}, {"title": "Secrets of a WSGI master.", "description": "The WSGI (Web Server Gateway Interface) specification for hosting Python web applications was created in 2003. Measured in Internet time, it is ancient. The oldest main stream implementation of the WSGI specification is mod_wsgi, for the Apache HTTPD server and it is over 10 years old.\n\nWSGI is starting to be regarded as not up to the job, with technologies such as HTTP/2, web sockets and async dispatching being the way forward. Reality is that WSGI will be around for quite some time yet and for the majority of use cases is more than adequate.\n\nThe real problem is not that we need to move to these new technologies, but that we aren't using the current WSGI servers to their best advantage. Moving to a new set of technologies will not necessarily make things better and will only create a new set of problems you have to solve.\n\nAs one of the oldest WSGI server implementations, Apache and mod\\_wsgi may be regarded as boring and not cool, but it is still the most stable option for hosting WSGI applications available. It also hasn't been sitting still, with a considerable amount of development work being done on mod\\_wsgi in the last few years to make it even more robust and easier to use in a development environment as well as production, including in containerised environments.\n\nIn this talk you will learn about many features of mod\\_wsgi which you probably didn't even know existed, features which can help towards ensuring your Python web application deployment performs to its best, is secure, and has a low maintenance burden.\n\nTopics which will be covered include:\n\n* Easy deployment of Python web applications using mod\\_wsgi-express.\n* Integration of mod_wsgi-express with a Django web application.\n* Using mod\\_wsgi-express in a development environment.\n* How to make use of mod\\_wsgi-express in a production environment.\n* Using mod_wsgi-express in a containerised runtime environment.\n* Ensuring consistency between development and production environments using warpdrive.\n* Using mod\\_wsgi-express to bootstrap a system Apache installation for hosting WSGI applications.\n* Why you should be using daemon mode of mod\\_wsgi and not embedded mode.\n* How to properly associate mod\\_wsgi with a Python virtual environment.\n* Building a robust deployment that can recover from misbehaving application code, backend services, or request overloading.\n* Using hooks provided by mod\\_wsgi to monitor the performance of your Python web application.\n\nIf you are a beginner, come learn why mod\\_wsgi is still a good option for deploying your Python web applications. If you are an old time user of mod\\_wsgi, find out about all the features you probably didn't know existed, revisit your current Python web application deployment and make it even better."}, {"title": "Clearer Code at Scale: Static Types at Zulip and Dropbox", "description": "Python now offers static types! Companies like Dropbox and Facebook, and open-source projects like Zulip, use static types (with `PEP 484 <https://www.python.org/dev/peps/pep-0484/>`_ and `mypy <https://github.com/python/mypy>`_) to make Python more productive and fun to work with \u2014 in existing codebases from 40k lines to 4 million, in Python 2 and 3, and while preserving the conciseness and flexibility that make Python a great language in the first place. I\u2019ll describe how.\n\nReading and understanding code is a huge part of what we do as software developers. If we make it easier to understand our codebases, we make everyone more productive, help each other write fewer bugs, and lower barriers for new contributors. That's why Python now features optional static types, and why Dropbox, `Facebook <https://engineering.instagram.com/let-your-code-type-hint-itself-introducing-open-source-monkeytype-a855c7284881>`_, and `Zulip <https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/>`_ use them on part or all of their Python code.\n\nIn this talk, I\u2019ll share lessons from Zulip\u2019s and Dropbox\u2019s experience \u2014 having led the mypy team at Dropbox and working now on the Zulip core team \u2014 for how you can start using static types in your own codebases, large or small. We\u2019ll discuss how to make it a seamless part of your project\u2019s tooling; what order to approach things in; and powerful new tools that make it even easier today to add static types to your Python codebase than ever before."}, {"title": "Intermediate testing with Django:  Outside-in TDD and Mocking effectively", "description": "Once developers have got the hang of the basics of testing, problems of applying it in the real world soon start to manifest themselves, and common questions come up.\n\n- What order should I write my tests and code in to avoid wasting time on blind alleys?\n- If I'm using Mocks in my tests to avoid external dependencies, how do I avoid getting stuck with unwieldy, unreadable tests that don't actually tell me when things have gone wrong?\n- Unit tests vs integration tests vs functional tests, which should I use when, and what are the trade-offs?\n\nIn this tutorial we'll work through an example of using an existing Django codebase, adding a new feature, and experimenting with different testing techniques along the way to illustrate the pros and cons of each\n\n- bottom-up vs outside-in development\n- double-loop TDD\n- using Mocks to isolate application layers from each other\n- \"listen to your tests\", and learning to use ugly or convoluted tests as a signal for improving design.\n\nSome familiarity with Django is desirable, although skills learned in other web frameworks are transferrable.  By the end, you'll be able to go back to your own projects with practical experience, and a new way of thinking about how to optimise your tests for your own circumstances."}, {"title": "Introduction to TDD with Django", "description": "Over the past few years, automated software testing has moved from being a niche interest to being the default assumption.  This tutorial is an introduction to Test-Driven Development (TDD) for the world of web development in Python using the Django framework.\n\nThe tutorial is suitable for people who are new to either testing, or Django, or both, although some basic working knowledge of Python syntax (or programming in another language) is assumed.\n\nLearn about:\n\n- Unit testing and Functional testing\n- the Selenium browser automation tool\n- Python's unittest standard library module\n- Django models, views and templates\n- testing front-end and back-end code\n- refactoring, using tests\n- the unit-test/code cycle, or Red-Green-Refactor, TDD workflow\n- and the Testing Goat, Python's unofficial mascot for testing!\n\nCome prepared!  You'll need a Python 3.6 virtualenv with Django and Selenium installed.  Detailed instructions are provided `here <https://www.obeythetestinggoat.com/book/pre-requisite-installations.html>`_."}, {"title": "Beyond Unit Tests: Taking Your Testing to the Next Level", "description": "You've used pytest and you've used mypy, but bugs are still slipping through your code. What's next? In this talk, we cover two simple but powerful tools for keeping your code problem-free. Property-based testing, provided by the `Hypothesis <https://hypothesis.readthedocs.io/en/latest/>`_ library, lets you run hundreds of tests from a single template. Contracts, via `dpcontracts <https://github.com/deadpixi/contracts>`_, make your program test itself. You'll learn how and why to use these tools and how to combine them with the rest of your testing suite."}, {"title": "How we designed an inclusivity-first conference on a shoestring budget and short timeline", "description": "Speakers: Christopher Neugebauer, Josh Simmons, Sam Kitajima-Kimbrel\n\nNew conferences rarely have resources to run the sort of outreach and inclusion programs that big conferences have. It\u2019s hard to guess how much money you\u2019ll have to spend, how many attendees you\u2019ll have, and what your new community will look like. With so many things to worry about, it\u2019s no surprise that most events don\u2019t prioritise outreach until they\u2019ve got a few years under their belt, if at all.\n\nIt doesn\u2019t have to be this way, and it can even be easier to build a new event around outreach and inclusion than it is to build it in later on!\n\nThis talk shares the story of North Bay Python\u2019s inaugural conference, which we planned in under 6 months, ran on a $40,000 budget, and built a welcoming community to make it real. We made inclusivity a founding principle and did so without compromising our speaker lineup while still attracting great sponsorship and hosted an event that almost every attendee wants to return to.\n\nIn this talk, we\u2019re going to share with you how we built a conference, from the ground up, to be as inclusive as we could make it. We\u2019ll touch on early organisation, marketing, and on-the ground logistics. Throughout the talk, you\u2019ll learn:\n\n* How we designed a budget that let us prioritise outreach and inclusion activities\n* How we built the community that we wanted before the conference even started\n* How we ran an event that proved that we meant everything we said\n\nYou too can host a new conference with a great lineup on a shoestring budget and short timeline, and you can do it while being inclusive, welcoming, and putting attendee safety first. Find out how you can have your cake, eat it, and still have lots to share with your new community."}, {"title": "How to Write Deployment-friendly Applications", "description": "The DevOps movement gave us many ways to put Python applications into production.  But should your *application* care?  Should it need to know whether it\u2019s running on your notebook, on a server, in a Docker container, or in some cloud platform as a service?\n\nIt should not, because environment-agnostic applications are easier to **test**, easier to **deploy**, easier to **handle**, and easier to **scale**.\n\nBut how can you *practically* structure and configure your applications to make them indifferent to the environment they run in?  How do secrets fit into the picture?  And where do you put that log file?\n\nBy the end of this talk you\u2019ll know the tools and techniques that enable you to write such Python applications and you\u2019ll be ready for the next big change."}, {"title": "Workflow Engines Up and Running", "description": "Join us for an introduction hands on tutorial of Python based workflow engines.\n\nYou will get to create, run and monitor a real time workflow job with two Python based popular workflow engines: Airflow and Luigi.\nDevelopers may have some long running batch jobs and may be using one of the tools we will cover or might be using a different engine, and would like a more in depth hands-on experience learning these tools."}, {"title": "Adapting from Spark to Dask: what to expect", "description": "Until very recently, Apache Spark has been a de facto standard choice of a framework for batch data processing. For Python developers, diving into Spark is challenging, because it requires learning the Java infrastructure, memory management, configuration management. The multiple layers of indirection also make it harder to debug things, especially when throwing the Pyspark wrapper into the equation.\n\nWith Dask emerging as a pure Python framework for parallel computing, Python developers might be looking at it with new hope, wondering if it might work for them in place of Spark. In this talk, I\u2019m using a data aggregation example to highlight the important differences between the two frameworks, and make it clear how involved the switch may be.\n\nNote: Just in case it's unclear, there's no Java of any kind in this talk. All the code / examples use Python (PySpark)."}, {"title": "HOWTO Write a Function", "description": "A function is a small chunk of code that does useful work. Your job when writing a function is to do it in a way that it easy to read. Based on over 15 years of code reviews here are some tips and guidelines I give again and again."}, {"title": "Exploratory Data Visualization with Vega, Vega-Lite, and Altair", "description": "Exploring a new dataset visually can provide quick intuition into the\nrelationships within the data. There are a few well-developed\nvisualization packages in Python, but they often have very imperative\nAPIs that force the user to focus on the mechanics of the visualization\n\u2013 tick locations, axis limits, legends, etc. \u2013 rather than the salient\nrelationships within the data.\n\nThis tutorial will introduce data visualization with `Altair`_, a\npackage designed for exploratory visualization in Python that features a\ndeclarative API, allowing data scientists to focus more on the data than\nthe incidental details. Altair is based on the `Vega`_ and `Vega-Lite`_\nvisualization grammars, and thus automatically incorporates best\npractices drawn from recent research in effective data visualization.\n\nThe tutorial will provide an introduction to the Altair package and its\nAPI, but more importantly will dive into the core concepts of effective\ndata visualization that can be applied using any visualization package\nor tool.\n\n.. _Altair: http://altair-viz.github.io\n.. _Vega: https://vega.github.io/\n.. _Vega-Lite: https://vega.github.io/vega-lite/"}, {"title": "Performance Python: Seven Strategies for Optimizing Your Numerical Code", "description": "Python provides a powerful platform for working with data, but often the most straightforward data analysis can be painfully slow. When used effectively, though, Python can be as fast as even compiled languages like C. This talk presents an overview of how to effectively approach optimization of numerical code in Python, touching on tools like numpy, pandas, scipy, cython, numba, and more."}, {"title": "A Bit about Bytes: Understanding Python Bytecode", "description": "At some point every Python programmer sees Python bytecode files -- they're those '.pyc' files Python likes to leave behind after it runs. But have you ever wondered what's really going on in those files? Well, wonder no more! In this talk you'll learn what Python bytecode is and how it's used to execute your code, as well as how to decipher and read it, and how to reason about bytecode to understand the performance of your Python code."}, {"title": "Programming microbes using Python", "description": "The genome of a typical microbe contains roughly 5 million base pairs of DNA including more than 4000 genes, which provide the instructions for cellular replication, energy metabolism, and other biological processes. At Zymergen, we edit DNA to design microbes with improved ability to produce valuable materials and molecules. Microbes with these edits are built and tested in high throughput by our fleet of robots. Genomes are far too large for exhaustive search, so identifying which edits to make requires machine learning on non-standard features. Our task to extract information from trees, networks, and graphs of independently representable knowledge bases (metabolism, genomics, regulation), in ways that respect the strongly causal relationships between systems. In this talk, I will describe how we use Python\u2019s biological packages (e.g. BioPython, CobraPy, Escher, goatools) and other packages (NetworkX, TensorFlow, PyStan, AirFlow) to extract machine learning features and predict which genetic edits will produce high-performance microbes."}, {"title": "Fighting the Good Fight: Python 3 in your organization", "description": "Today, services built on Python 3.6.3 are widely used at Facebook. But as recently as May of 2014 it was actually impossible at all to use Python 3 at Facebook. Come learn how we cut the Gordian Knot of dependencies and social aversion to the point where new services are now being written in Python 3 while older Python 2 projects are actively migrated to Python 3. All accomplished by a small group of individual contributors in their spare time. Learn to fight the good fight and upgrade your organization to Python 3 like we did at Facebook."}, {"title": "Keynote - Jason Huggins ", "description": "Speaker: Jason Huggins"}, {"title": "Building a Data Pipeline with Testing in Mind", "description": "It\u2019s one thing to build a robust data pipeline process in python but a whole other challenge to find tooling and build out the framework that allows for testing a data process. In order to truly iterate and develop a codebase, one has to be able to confidently test during the development process and monitor the production system.\n\nIn this talk, I hope to address the key components for building out end to end testing for data pipelines by borrowing concepts from how we test python web services. Just like how we want to check for healthy status codes from our API responses, we want to be able to check that a pipeline is working as expected given the correct inputs. We\u2019ll talk about key features that allows a data pipeline to be easily testable and how to identify timeseries metrics that can be used to monitor the health of a data pipeline."}, {"title": "Thinking Outside the GIL with AsyncIO and Multiprocessing", "description": "Have you ever written a small, elegant application that couldn't keep up with the growth of your data or user demand? Did your beautiful design end up buried in threads and locks? Did Python's very special Global Interpreter Lock make all of this an exercise in futility?\n\nThis talk is for you! With the combined powers of AsyncIO and multiprocessing, we'll redesign an old multithreaded application limited by the GIL into a modern solution that scales with the demand using only the standard library. No prior AsyncIO or multiprocessing experience required."}, {"title": "Invited Speaker - EduBlocks", "description": "Speaker: Josh Lowe. Creator of EduBlocks and 14 years old software developer."}, {"title": "Build Teams as an Engineer", "description": "We build product and software as teams. And as anyone who as worked on a team knows, there\u2019s often a lot more that goes into working together to build that product than actually just building the product itself. A highly functional team is not as elusive it may seem. Software engineering is a skill we\u2019ve developed, but even more importantly software engineering on teams is another skill we\u2019ve been practicing and improving on as an industry. Software engineering principles and best practices may seem to have very little to do with teamwork, but being able to thoughtfully apply some of what we\u2019ve learned as engineers towards teamwork, we can help move towards creating such success with our teams."}, {"title": "Beyond scraping: how to use machine learning when you're not sure where to start", "description": "Scraping one web site for information is easy, scraping 10000 different sites is hard. Beyond page-specific scraping, how do you build a program than can extract the publication date of (almost) any news article online, no matter the web site?\n\nWe\u2019ll cover when to use machine learning vs. humans or heuristics for data extraction, the different steps of how to phrase the problem in terms of machine learning, including feature selection on HTML documents, and issues that arise when turning research into production code."}, {"title": "Build a Search Engine with Python + Elasticsearch", "description": "One of the most common actions that we take when visiting any website is search. A common service that powers search for many sites is Elasticsearch -  but what makes it so powerful? What can you do with Elasticsearch that you can\u2019t with a regular database?\n\nThis tutorial starts with an introduction to Elasticsearch architecture, including what makes it great for search and not so great for other use cases. We will then build an application together with a search engine powered by Elasticsearch. We will also discuss how to optimize search queries and scale as the volume of data increases."}, {"title": "Strategies to Edit Production Data", "description": "At some point, we all find ourselves at a SQL prompt making edits to the production database. We know it's a bad practice and we always intend to put in place safer infrastructure before we need to do it again \u2014 what does a better system actually look like?\n\nThis talk progresses through 5 strategies for teams using a Python stack to do SQL writes against a database, to achieve increasing safety and auditability:\n\n(1) Develop a process for raw SQL edits\n(2) Run scripts locally\n(3) Deploy and run scripts on an existing server\n(4) Use a task runner\n(5) Build a Script Runner service\n\nWe\u2019ll talk about the pros and cons of each strategy and help you determine which one is right for your specific needs.\n\nBy the end of this talk you\u2019ll be ready to start upgrading your infrastructure for making changes to your production database safely!"}, {"title": "\"WHAT IS THIS MESS?\" - Writing tests for pre-existing code bases", "description": "Many of us practice test driven development, and pride ourselves in our code coverage. This is relatively easy to do when you begin a new project, but what happens when you take over an existing code base with little to no tests? Where and how do you start writing tests? This task can be very intimidating and frustrating, but can be accomplished!\n\nThis talk will run through some common approaches and methodologies for adding test coverage to pre-existing code (that you might not even be familiar with at all). The next time you take over an untested monolith,  you will be able to do the right thing and start writing tests instead of hoping for the best!"}, {"title": "Python across the USA: This is the Bus.", "description": "For 2 years, a family of three has traveled on a converted school bus from conference to conference, building tooling for the road in Python and visiting Python families in every corner of the country."}, {"title": "Augmenting Human Decision Making with Data Science", "description": "Do we even need humans? Humans and data science are flawed on their own. Humans lack the ability to process large volumes of information. Machines lack intuition, empathy, and nuance. You'll learn how to guide users of expert-use systems by applying data science to their user experience. This allows us to take advantage of the human-touch while leveraging our large datasets. What is the relationship between human decisions and algorithms? Are we thinking about data science all wrong? In this talk, you'll learn the ways we balance human decisions and data science throughout our applications, the challenges we have faced along the way and the future of the relationship between humans and data."}, {"title": "Pipenv: The Future of Python Dependency Management", "description": "This talk is about the history of Python packaging, the tools that have been historically available for application deployment, the problems/constraints presented by them, and presents a holistic solution to many of these problems: Pipenv.\n\nA live demo of the tool will be presented, as well as a Q&A session."}, {"title": "Using pandas for Better (and Worse) Data Science", "description": "The pandas library is a powerful tool for multiple phases of the data science workflow, including data cleaning, visualization, and exploratory data analysis. However, proper data science requires careful coding, and pandas will not stop you from creating misleading plots, drawing incorrect conclusions, ignoring relevant data, including misleading data, or executing incorrect calculations.\n\nIn this tutorial, you'll perform a variety of data science tasks on a handful of real-world datasets using pandas. With each task, you'll learn how to avoid either a pandas pitfall or a data science pitfall. By the end of the tutorial, you'll be more confident that you're using pandas for good rather than evil!\n\nParticipants should have a working knowledge of pandas and an interest in data science, but are not required to have any experience with the data science workflow. Datasets will be provided by the instructor."}, {"title": "Birding with Python and Machine Learning", "description": "In the past few years, the power of computer vision has exploded. In this talk, we'll apply a deep learning model to a bird feeder. We'll use that model to detect, identify, and record birds that come to a smart bird feeder.\n\nAlong the way, we'll learn about different platforms to deploy deep learning cameras on, from the lowly Raspberry PI all the way up to the powerful NVIDIA Jetson embedded computer with a built in GPU."}, {"title": "Automating Code Quality", "description": "Writing quality Python code can be both tough and tedious. On top of the general design, there are many code quality aspects that you need to watch out for when writing and reviewing code such as adherence to PEP8, docstring quality, test quality, etc. Furthermore, everyone is human. If you are catching these code quality issues by hand, there is a good chance that at some point you will miss an easy opportunity to improve code quality. If the quality check can be done by a machine, then why would you even try to catch the code quality issue by hand? In the end, the machine will be able to perform the quality check with much more speed, accuracy, and consistency than a person.\n\nThis talk will dive into how existing open source projects offload and automate many of these code quality checks resulting in:\n\n- A higher quality and a more consistent codebase\n- Maintainers being able to focus more on the higher level design and interfaces of a project.\n- An improved contribution process and higher quality pull requests from external contributors\n\nBy diving into how these open source projects automate code quality checks, you will learn about:\n\n- The available tooling related to checking code quality such as `flake8`, `pylint`, `coverage`, etc.\n- How to automate code quality checks for both a development and team setting.\n- First-hand accounts of the benefits and lessons learned from automating code quality checks in real-life open source projects."}, {"title": "Solve Your Problem With Sloppy Python", "description": "Stop writing crappy shell scripts\u2014write crappy Python scripts instead!\n\nOther talks will show you how to write clean, performant, robust Python.  But that's not always necessary.  When writing personal automation or solving one-shot problems, it can be safe (and fun!) to quickly hack something together.\n\nThis talk will show examples of problems suitable for this approach, scenarios where it's reasonable to cut corners, novel techniques that can help break a problem down, and shortcuts that can speed development."}, {"title": "GenZeal: A new generation of thinkers who design, develop, and distribute for tomorrow", "description": "The GenZeal project is an after-school program where students learn design thinking, applied computational thinking, and programming skills to solve a problem in their community. Students research and work with local organizations and businesses to design and program microcontrollers that run entirely on renewable energy sources to solve a specific need. Through the process, students earn physical and digital badges for each skill they learn and apply with their project. Students learn applied design thinking, computational thinking, and open-source programming languages. They use what they learn to design, prototype, and program their project. The student projects are installed in the community and they monitor their use in conjunction with the community coach.\n\nI will provide details and examples of this project that can be replicated in small through large school districts, rural and urban. I will also explain how our school district redefined our curriculum from little computer science concepts to purposeful, applied PreK-12 computer science principles."}, {"title": "Learning Python like a Pro", "description": "There are many awesome tools to learn and teach Python to beginners. You can teach it with games, interactive tutorials and microcontrollers. However, if one is to stay in the world of programming, sooner or later one needs to start using more professional tools such as IDEs, debuggers, profilers, version control systems and databases. Needless to say, the transition from IDLE to PyCharm can be very frustrating.\n\nCreating your own course is a time-consuming process, but after the course has been created you also need to check students' solutions which consumes even more time. Wouldn't it be great to automate checking process and to concentrate on the creative part of content creation and explaining concepts to students?\n\nAs an attempt to solve these problems `EduTools plugin`_ was created.\nIt\u2019s a free open-source plugin that can be installed on PyCharm/IntelliJ\nIDEA IDEs to create and take programming courses right inside the IDE.\nThis way a novice programmer dives into professional environment\nstraight away and an educator gets a tool to automate solution checking.\nNot only the plugin allows to create courses, but it also comes with\nintegration with `Stepik MOOC platform`_.\n\nIn this talk I'd like to demonstrate how one can create a course with automated checks using EduTools plugin, share it with students and connect to Stepik platform to gather solutions and statistics. I'll show how to create a simple course containing theory, code task with feedback prompts and test with choice problems. I'll also show how to use our existing free courses in class with the ability to view your students' solutions.\n\n.. _EduTools plugin: https://plugins.jetbrains.com/plugin/10081-edutools\n.. _Stepik MOOC platform: https://stepik.org"}, {"title": "Lightning Talks Friday 2018-05-11", "description": ".. list-table:: Lightning Talks\n   :widths: 10 30 60\n   :header-rows: 1\n\n\n   * - Time\n     - Speaker\n     - Title\n   * - 00:40_\n     - Katie Cunningham\n     - You need a hobby\n   * - 05:01_\n     - \u0141ukasz Langa\n     - Black\n   * - 10:05_\n     - Sage Sharp\n     - Outreachy\n   * - 14:44_\n     - Joshua Lowe\n     - Edublocks\n   * - 18:07_\n     - Mahmoud Hasemi\n     - Restructuring Data in Python\n   * - 23:00_\n     - Quang Wu\n     - Python code style for blind programmers\n   * - 28:50_\n     - Alex Rosengarten\n     - Music from chaos: Audiofying the Lorenz Attractor\n   * - 34:05_\n     - Sahuna Gordon-McKeon\n     - Legacies of disruption\n   * - 39:02_\n     - Travis Oliphant\n     - More sustainable Open Source!\n   * - 42:07_\n     - James Powell\n     - Code or die\n   * - 48:56_\n     - Scott Shawcroft\n     - Circuit Python\n   * - 51:57_\n     - Sean Harrington\n     - Hacking on 23&Me and DbSNP\n\n\n.. _00:40: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=00m40s\n.. _05:01: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=05m01s\n.. _10:05: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=10m05s\n.. _14:44: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=14m44s\n.. _18:07: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=18m07s\n.. _23:00: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=23m00s\n.. _28:50: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=28m50s\n.. _34:05: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=34m05s\n.. _39:02: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=39m02s\n.. _42:07: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=42m07s\n.. _48:56: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=48m56s\n.. _51:57: https://www.youtube.com/watch?v=bTAFl8P2DkE&t=51m57s\n"}, {"title": "Lightning Talks Saturday Evening 2018-05-12", "description": ".. list-table:: Lightning Talks\n   :widths: 10 30 60\n   :header-rows: 1\n\n\n   * - Time\n     - Speaker\n     - Title\n   * - 00:10_\n     - Caleb Collins-Parks\n     - AREPL - A real-time python evaluator\n   * - 04:35_\n     - Michael Foord\n     - Abstractions\n   * - 10:27_\n     - Turicas (\u00c1lvaro) Justen\n     - Roasting Coffee with Python\n   * - 16:27_\n     - Petr Viktorin\n     - Blinky's Async Adventure\n   * - 22:17_\n     -\n     - Type Hint\n   * - 26:25_\n     - Scott Sanderson\n     - A Class is a Poor Man's...Loop\n   * - 31:25_\n     - Nick Humrich\n     - RIP HTTP\n   * - 36:08_\n     - Allen Downey\n     - Modeling and Simulation in Python\n   * - 40:00_\n     - Petr Mitev\n     - Python in Arch\n   * - 44:53_\n     - Steven C. Howell\n     - Bayesian Hacking\n   * - 50:47_\n     - James Bennett Saxon\n     - Code Lives & Things can happen\n   * - 56:42_\n     - Andr\u00e9s Garc\u00eda Garc\u00eda\n     - Why should we care about Processing\n   * - 1:01:40_\n     - Meredydd Luff\n     - Making the web more pythonic\n   * - 1:07:10_\n     - Kenneth Reitz\n     - Running for the board\ufeff\n\n\n.. _00:10: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=00m10s\n.. _04:35: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=04m35s\n.. _10:27: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=10m27s\n.. _16:27: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=16m27s\n.. _22:17: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=22m17s\n.. _26:25: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=26m25s\n.. _31:25: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=31m25s\n.. _36:08: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=36m08s\n.. _40:00: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=40m00s\n.. _44:53: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=44m53s\n.. _50:47: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=50m47s\n.. _56:42: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=56m42s\n.. _1:01:40: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=61:40\n.. _1:07:10: https://www.youtube.com/watch?v=c-I0md_3fbQ&t=67:10\n"}, {"title": "Lightning Talks Thursday 2018-05-10", "description": ""}, {"title": "Lights Camera Action! Scrape, explore, and model to predict Oscar winners & box office hits", "description": "Using Jupyter notebooks, HTTP requests, BeautifulSoup, NumPy, Pandas,\nscikit learn, and matplotlib, you\u2019ll predict whether a movie is likely\nto `win an Oscar`_ or be a box office hit. We\u2019ll step through the\ncreation of an effective dataset: asking a question your data can\nanswer, writing a web scraper, and answering those questions using\nnothing but Python libraries and data from the Internet.\n\n.. _win an Oscar: http://oscarpredictor.github.io/"}, {"title": "Don't Look Back in Anger: Wildman Whitehouse and the Great Failure of 1858", "description": "In the 1850s, Edward Orange Wildman Whitehouse was appointed the lead engineer of the first attempt to build a trans-Atlantic telegraph cable. With the entire population of two continents waiting for his go-live, their handlebar moustaches aquiver, he demonstrated in fine form just how spectacularly a big project can be a bigger disaster.\n\nThis is a tale of long-winded rants, spectacular sideburns, and gentlemen scientists behaving badly. It is also a lesson about the importance of honest reflection in technical teamwork. Lilly outlines some of the mistakes made during one of the biggest tech delivery projects in history, and how a constructive view of failure helped to turn it all around. Through the public meltdowns of Wildman Whitehouse you will learn the importance of feedback, how to handle complex tasks gracefully, and the best way to recover from having your pipeline eaten by a whale."}, {"title": "Demystifying the Patch Function", "description": "One of the most challenging and important thing fors for Python developers learn is the unittest mock library. The patch function is in particular confusing- there are many different ways to use it. Should I use a context manager? Decorator? When would I use it manually? Improperly used patch functions can make unit tests useless, all the while making them look as if they are correctly testing code. Let\u2019s learn how to wield patch with confidence!"}, {"title": "Software Library APIs: Lessons Learned from scikit-learn", "description": "When you think of an API, you\u2019re probably thinking about a web service. But it\u2019s important to think about your developer interface when designing a software library as well! I\u2019ll talk about the scikit-learn package, and how its API makes it easy to construct complex models from simple building blocks, using three basic pieces: transformers, estimators, and meta-estimators. Then I\u2019ll show how this interface enabled us to construct our own meta-estimator for model stacking. This will demonstrate how to implement new modeling techniques in a scikit-learn style, and more generally, the value of writing libraries with the developer interface in mind."}, {"title": "Build-a-GitHub-Bot Workshop", "description": "GitHub provides a great platform for collaborating. You can take it to the next level by creating custom GitHub bots. By delegating some of the chores to a bot, you get to spend more time developing your project and collaborating with others.\n\nLearn how to automate your workflow by building a personal GitHub assistant for your own project. We'll use libraries called `gidgethub` and `aiohttp` to write a GitHub bot that does the following:\n\n- Greet the person who created an issue in your project.\n\n- Say thanks when a pull request has been closed.\n\n- Apply a label to issues or pull requests.\n\n- Gives a thumbs up reaction to comments **you** made. (becoming your own personal cheer squad).\n\nThe best part is, you get to do all of the above using Python 3.6! F-strings included!"}, {"title": "What is a Python Core Developer?", "description": "How do you become a Python core developer? How can I become one? What is it like to be a Python core developer?\n\nThese are the questions I often receive ever since I became a Python core developer a year ago. Contributing to Python is a long journey that does not end when one earns the commit privilege. There are responsibilities to bear and expectations to live up to.\n\nIn the past year, I've been learning more about what it really means to be a Python core developer. Let me share all of that with you."}, {"title": "Effortless Logging: A deep dive into the logging module", "description": "Logs are our best friend, especially on those late nights when we try to troubleshoot a problem in production that was written by a co-worker who is on vacation. Logs are the main way to know what is happening with an application at runtime, but we don\u2019t realize how important they are until we actually need them. Unfortunately, they are usually an under-estimated part of the development process.\n\nThis talk aims to transmit the need for the logging module, briefly explains how to use it and how it is built, and dives into all the complexity that is hidden to us. This will help attendees not just understand all the magic that allows us to inspect our applications at runtime, but also to avoid mistakes and adapt the module to our needs for more esoteric scenarios.\n\nThe talk is structured to simplify the understanding of the logging module. Many people have read the documentation, but still struggle to fully understand what is happening under the hood. This talk aims to eliminate that barrier by presenting it in an easier-to-digest manner."}, {"title": "Python Performance Investigation by Example", "description": "Occasionally we\u2019ll find that some bit of Python we\u2019ve written doesn\u2019t\nrun as fast as we\u2019d like, what can we do? Performance bottlenecks aren\u2019t\nalways intuitive or easy to spot by reading code so we need to collect\ndata with `profiling`_. Once we\u2019ve identified the bottleneck we\u2019ll need\nto change our approach, but what options are faster than others?\n\nThis talk illustrates a Python performance investigation and\nimprovements using an `Advent of Code`_ programming challenge. I\u2019ll walk\nthrough starting from a slow (but correct) solution, look at profiling\ndata to investigate *why* it\u2019s slow, and explore multiple paths for\nimproving performance, including more efficient algorithms and using\nthird-party tools like `Cython`_. You\u2019ll leave this talk with a recipe\nfor analyzing Python performance and information about some options for\nimproved performance.\n\n.. _profiling: https://docs.python.org/3.6/library/profile.html\n.. _Advent of Code: http://www.adventofcode.com/\n.. _Cython: http://cython.org/"}, {"title": "Democratizing Distributed Computing with Dask and JupyterHub", "description": "We use JupyterHub, XArray, Dask, and Kubernetes to build a cloud-based system to enable scientists to analyze and manage large datasets.  We use this in practice to serve a broad community of atmospheric and climate scientists.\n\nAtmospheric and climate scientists analyze large volumes of observational and simulated data to better understand our planet.  They have historically used tools like NumPy and SciPy along with Jupyter notebooks to combine efficient computation with accessibility.  However, as datasets increase in size and collaboration extends to new populations of scientists these tools begin to feel their age.  In this talk we use more recent libraries to build a modern deployment for academic scientists.  In particular we use the following tools:\n\n- **Dask:** to parallelize and scale NumPy computations\n- **XArray**: as a self-discribing data model and tool kit for labeled and index arrays\n- **JupyterLab:** to enable more APIs for users beyond the classic notebook\n- **JupyterHub:** to manage users and maintain environments for a new population of cloud-friendly users\n- **Kubernetes:** to manage everything and deploy easily on cloud hardware\n\nThis talk will focus less on how these libraries work and will instead be a case study of using them together in an operational setting.  During the talk we will build up and deploy a running system that the audience can then use to access distributed computing resources."}, {"title": "Python for N00bs: A cognitive and educational approach", "description": "This talk will put a new spin on helping complete beginners to use Python. We all tend to teach Python the way that we learned it. However, by applying lessons learned from cognitive science and educational psychology, we can better help a wide range of beginners and open up Python to new audiences.\n\nThe speaker will share examples of successes and failures in teaching Python in several contexts including high school classrooms, the Young Coders program, as well as online and printed curricula. Topics covered will include teaching the command line, helping new programming concepts to \u201cstick,\u201d increasing engagement with abstract concepts, and supporting the independence of new programmers.\n\nThe Python community is an ecosystem built on learning from others and giving back to others. The strategies covered in this talk are useful for creating documentation for new users, writing a book or tutorial, teaching a child or adult, running a workshop, or teaching a class."}, {"title": "Code Your Heart Out: Beginning Python for Human People with Feelings", "description": "This tutorial is for people who are **brand new to Python**. It's for people with curioisty to feed, anxiety to overcome, and worlds to change. It's for people named Edna. (And others not named Edna.)\n\nDuring this tutorial you'll be encouraged to **bring your whole self to learning**. We'll start with the very basics of Python, keeping your fingers on the keyboard to gain as much practice as possible. Between strings, functions, and other fun Python-y things, we'll discuss learning deeply, **nourishing our brains**, and boosting happiness with science.\n\nNo prior experience required; come just as you are. **This is about being a whole person**. It's about learning Python, because Python is really cool. It's also about staying afloat. Being productive. Focusing. It's about finding joy in the error codes.\n\nCome play. It'll be awesome."}, {"title": "Going Serverless with OpenFaaS, Kubernetes, and Python", "description": "OpenFaaS (Functions as a Service) is a framework for building serverless, event-driven functions with Docker and Kubernetes.\n\nIn this tutorial, you'll learn how to build and deploy a full-stack application that uses Flask (client-facing app) along with OpenFaaS to handle background processes."}, {"title": "Oops! I Committed My Password To GitHub!", "description": "What do AWS, GitHub, Travis CI, DockerHub, Google, Stripe, New Relic, and the rest of the myriad of services that make our developer life easier have in common?\nThey all give you secret keys to authenticate with. Did you ever commit one of these to source control by mistake? That happened to me more times than I'm willing to admit!\n\nIn this talk I'm going to go over the best practices to follow when when writing Python applications that prevent this type of accident."}, {"title": "Faster Python Programs - Measure, don't Guess", "description": "Optimization can often help to make Python programs faster or use less memory. Developing a strategy, establishing solid measuring and visualization techniques as well as knowing about algorithmic basics and datastructures are the foundation for a successful optimization. The tutorial will cover these topics.\nExamples will give you a hands-on experience on how to approach efficiently.\n\nPython is a great language. But it can be slow compared to other languages\nfor certain types of tasks. If applied appropriately, optimization may reduce\nprogram runtime or memory consumption considerably. But this often comes at a price. Optimization can be time consuming and the optimized program may be more complicated. This, in turn, means more maintenance effort. How do you find out if it is worthwhile to optimize your program? Where should you start?\n\nThis tutorial will help you to answer these questions. You will learn how\nto find  an optimization strategy based on quantitative and objective criteria.\nYou will experience that one's gut feeling what to optimize is often wrong.\n\nThe solution to this problem is: \u201eMeasure, Measure, and Measure!\u201c. You will\nlearn how to measure program run times as well as profile CPU and memory.\nThere are great tools available. You will learn how to use some of them.\nMeasuring is not easy because, by definition, as soon as you start to measure,\nyou influence your system. Keeping this impact as small as possible is\nimportant. Therefore, we will cover different measuring techniques.\n\nFurthermore, we will look at algorithmic improvements. You will see that the\nright data structure for the job can make a big difference. Finally, you will\nlearn about different caching techniques."}, {"title": "Web Applications, A to Z", "description": "Modern web applications have gotten complicated -- backend logic, front-end logic, storage and deployment options abound.\n\nThis tutorial will take a tour of all the pieces that go into making a web application, and show how they all fit together -- using specific choices, specific examples and a lot of hands-on programming, to give participants a chance to  actually write a web applications: all the parts.\n\nWe will use some external third-party services, but care is taken to fit into the free tier."}, {"title": "Network Analysis Made Simple: Part II", "description": "Daenerys or Jon Snow? Diffusion of news through Twitter? JFK, ORD or ATL, do these codes look familiar? In this tutorial we build up on the fundamentals of Part 1 tutorial and look at various applications of network analysis to real world datasets like the US Airport Dataset, Game of Thrones character co-occurrence network, and foray into diffusion processes on networks."}, {"title": "Trio: Async concurrency for mere mortals", "description": "Concurrent programs are super useful: think of web apps juggling lots of\nsimultaneous downloads and websocket connections, chat bots tracking\nmultiple concurrent conversations, or web spiders fetching pages in\nparallel. But *writing* concurrent programs is complicated, intimidating\nto newcomers, and often challenging even for experts.\n\nDoes it have to be? Python is famous for being simple and\nstraightforward; can Python make concurrent programming simple and\nstraightforward too? I think so. By carefully analyzing usability\npitfalls in other libraries, and taking advantage of new Python 3\nfeatures, I\u2019ve come up with a new set of primitives that make it\ndramatically easier to write correct concurrent programs, and\nimplemented them in a new library called `Trio`_. In this talk, I\u2019ll\ndescribe these primitives, and demonstrate how to use them to implement\na basic algorithm for speeding up TCP connections. Compared to the best\nprevious Python implementation, our version turns out to be easier to\nunderstand, more correct, and dramatically shorter.\n\nThis talk assumes basic familiarity with Python, but does *not* require\nany prior experience with concurrency, async/await, or networking.\n\n.. _Trio: https://trio.readthedocs.io"}, {"title": "Big-O: How Code Slows as Data Grows", "description": "Big-O is a computer science technique for analyzing how code performs as data gets larger.  It's a very handy tool for the working programmer, but it's often shrouded in off-putting mathematics.\n\nIn this talk, I'll teach you what you need to know about Big-O, and how to use it to keep your programs running well.  Big-O helps you choose the data structures and algorithms that will let your code work efficiently even on large data sets.\n\nYou can understand Big-O even if you aren't a theoretical computer science math nerd. Big-O isn't as mystical as it appears. It's wrapped in mathematical trappings, but doesn't have to be more than a common-sense assessment of how your code will behave."}, {"title": "Mu - How to Make a Kids' Code Editor", "description": "`The Raspberry Pi Foundation`_ receives feedback about the difficulties\nbeginner programmers encounter when learning Python from thousands of\nvolunteer mentors at after-school CodeClubs and thousands of teachers\nfrom around the world.\n\n`Mu`_ is a Python code editor for beginner programmers based upon this\nfeedback.\n\nThis talk tells the story of Mu: why it was created, how we built it and\nincludes a demonstration of how it works.\n\n.. _The Raspberry Pi Foundation: http://raspberrypi.org/\n.. _Mu: http://codewith.mu/"}, {"title": "Graph Databases: Talking about your Data Relationships with Python", "description": "Have you ever considered how many relationships you have in your virtual life? Every friend or page liked on Facebook, each connection in LinkedIn or Twitter account followed is a new relationship not only between two people, but also between their data. In Brazil only, we have 160 millions Facebook users. How can we represent and manipulate all these relationships? Graph Databases are storage systems that use graph structure (nodes and edges) to represent and store data in a semantic way.\n\nThis talk will begin approaching the challenge in representing relationships in Relational Databases and introducing a more friendly solution using graph. The definition of Graph Database, its pros and cons and some available tools (Neo4J, OrientDB and TitanDB) will be shown during the presentation, as well as how these tools can be integrated with Python."}, {"title": "Elegant Solutions For Everyday Python Problems", "description": "Are you an intermediate python developer looking to level up? Luckily, python provides us with a unique set of tools to make our code more elegant and readable by providing language features that make your code more intuitive and cut down on repetition. In this talk, I\u2019ll share practical pythonic solutions for supercharging your code.\n\nSpecifically, I'll cover:\n\n- What magic methods are, and show you how to use them in your own code.\n- When and how to use partial methods.\n- An explanation of ContextManagers and Decorators, as well as multiple techniques for implementing them.\n- How to effectively use `NamedTuples`, and even subclass and extend them!\n\nLastly, I'll go over some example code that ties many of these techniques together in a cohesive way. You'll leave this talk feeling confident about using these tools and techniques in your next python project!"}, {"title": "Controlling apples with snakes: Automating mobile apps with Appium", "description": "Testing mobile applications is hard. Testing manually is nearly impossible.\nThat\u2019s where automated testing shines. Just sit back and watch the machine go!\nPython is a very powerful language for writing automated tests, but since Python is not installed on mobile platforms, we need to find a way to remotely control and monitor the device.\nBut how do we automate a device remotely? The answer is Appium.\n\nIn this talk I will go over the process of deploying and testing iOS (or Android) applications, and how to work with Appium to easily generate Python 3 code for testing your application."}, {"title": "Listen, Attend, and Walk : Interpreting natural language navigational instructions", "description": "Imagine you have an appointment in a large building you do not know. Your host sent instructions describing how to reach their office. Though the instructions were fairly clear, in a few places, such as at the end, you had to infer what to do. How does a *robot (agent)* interpret an instruction in the environment to infer the correct course of action? Enabling harmonious *Human - Robot Interaction* is of primary importance if they are to work seamlessly alongside people.\n\nDealing with natural language instructions in hard because of two main reasons, first being, Humans - through their prior experience know how to interpret natural language but agents can\u2019t, and second is overcoming the ambiguity that is inherently associated with natural language instructions. This talk is about how deep learning models were used to solve such complex and ambiguous problem of converting natural language instruction into its corresponding action sequence.\n\nFollowing verbal route instructions requires knowledge of language, space, action and perception. In this talk I shall be presenting, a neural sequence-to-sequence model for direction following, a task that is essential to realize effective autonomous agents.\n\nAt a high level, a sequence-to- sequence model is an end-to-end model made up of two recurrent neural networks:\n\n- **Encoder** - which takes the model\u2019s input sequence as input and encodes it into a fixed-size context vector.\n- **Decoder** - which uses the context vector from above as a seed from which to generate an output sequence.\n\nFor this reason, sequence-to-sequence models are often referred to as *encoder-decoder* models. The alignment based encoder-decoder model would translate the natural language instructions into corresponding action sequences. This model does not assume any prior linguistic knowledge: syntactic, semantic or lexical. The model learns the meaning of every word, including object names, verbs, spatial relations as well as syntax and the compositional semantics of the language on its own.\n\nIn this talk, steps involved in pre-processing of data, training the model, testing the model and final simulation of the model in the virtual environment will be discussed. This talk will also cover some of the challenges and trade-offs made while designing the model."}, {"title": "Easy 2D Game Creation With Arcade", "description": "Want to have fun with Python? Do something visual? Get started today?\nLearn how to draw, animate, and use sprites for games with the `Python\nArcade`_ library.\n\n\u201cArcade\u201d is an easy-to-use Python library for creating 2D arcade games.\nWe\u2019ll show you how to get started creating your own game, and find\nplenty of example code to get an idea of what you can do with this\nlibrary. If you are familiar with PyGame, Arcade is easier, more\npowerful, and uses recent Python features like type hinting and\ndecorators.\n\nThis talk is great for beginners, educators, and people who want to\ncreate their own arcade games.\n\n.. _Python Arcade: http://arcade.academy/"}, {"title": "API-Driven Django", "description": "As the web continues to evolve, the demand for data-driven backends matched with rich frontend experiences grows every day. Django comes with a robust templating system and rendering engine, but more and more web applications using Django are just focusing on it\u2019s API abilities.\n\nWhat if we could have the best of both worlds? What if we could use Django and django-rest-framework to write views that let us prototype quickly using the Django templating system, and have those same views return API responses to rich clients?\n\nIn this tutorial, we\u2019ll build a sample data collection and display web application, taking advantage of the ways Django and django-rest-framework work together. The end result will be a web application you could adapt for many kinds of data collection needs, and you\u2019ll come away knowing how to get a rich API and a frontend prototype out of just one Django view."}, {"title": "All in the timing: How side channel attacks work", "description": "In this talk, you\u2019ll learn about a category of security issue known as side channel attacks. You\u2019ll be amused to see how features like automatic data compression, short-circuit execution, and deterministic hashing can be abused to bypass security systems. No security background knowledge is required. The talk assumes at least intermediate Python experience.\n\nWe\u2019ll take a tour of real side channel vulnerabilities in open source Python codebases, including the patches that fixed them. It also offers practical advice for avoiding these issues. My goal is to demystify this topic, even if you aren\u2019t writing security-critical software."}, {"title": "Types, Deeper Static Analysis, and you", "description": "Many projects already take advantage of static analysis tools like flake8, PyLint, and MyPy. Can we do better? In this talk, I'll discuss how to take a type checker, bolt on an interprocedural static analyzer, and delight your security team with high quality results.\n\n**Abstract**\n\nIt is incredibly challenging to build a halfway decent static analysis tool for a dynamic language like Python. Fortunately, it gets quite a bit easier with Python type annotations. To explain why, I'll present a tool that finds security vulnerabilities by tracking dangerous flows of information interprocedurally across an entire codebase. **Then,** I'll demonstrate how that tool is really just a slightly slower, more sophisticated, type checker."}, {"title": "PSF Community Service Awards - Catherine Devlin Keynote - Final Remarks", "description": "PSF Community Service Awards\n\nSlides can be found at: https://speakerdeck.com/pycon2018 and https://github.com/PyCon/2018-slides\n\nKeynote Speaker: Catherine Devlin"}, {"title": "Python, Locales and Writing Systems", "description": "Python 3 removes a lot of the confusion around Unicode handling in Python, but that by no means fixes everything. Different locales and writing systems have unique behaviours that can trip you up. Here\u2019s some of the worst ones and how to handle them correctly."}, {"title": "Dataclasses:  The code generator to end all code generators", "description": "The PEP 557 dataclasses module is available in starting in Python 3.7.   It will become an essential part of every Python programmer's toolkit.  This talk shows what problem the module solves, explains its key design decisions, and provides practical examples of how to put it to work.\n\nDataclasses are shown to be the next step in a progression of data aggregation tools: tuple, dict, simple class, bunch recipe, named tuples, records, attrs, and then dataclasses. Each builds upon the one that came before, adding expressiveness at the expense of complexity.\n\nDataclasses are unique in that they let you selectively turn-on or turn-off its various capabilities and it lets the user choose the underlying data store (either instance dictionary, instance slots, or an inherited base class).\n\nDataclasses and typing.NamedTuple both use variable annotations which were new in Python 3.6.\n"}, {"title": "User focused API Design", "description": "When we talk about Web API Design, we're usually driven to think in architecture, verbs, and nouns. But we often forget our user: the developer.\n\nUX designers rely on many techniques to create great experiences. User research, User Testing, Personas, Usage Data Analysis and others. However when creating `invisible products` we\u2019re not used to think in usability. So why don\u2019t we take advantage of this background to improve our APIs experiences?"}, {"title": "When data meets education! The secret life of data in education", "description": "In the last decades, the power of data and analytics has transformed instruction in education. Increasingly, large-scale data is available on student learning and interaction online. Much of this data represents student behavior. This has allowed researchers to model and track many elements of student learning that were not previously feasible at scale: engagement, affect, collaborative skill, and robust learning. In turn, these models can be used in prediction of long-term student outcomes, and to analyze the factors driving long-term success of students,\n\nThis talk will focus on secret life of data in education, the key points of my talk will be:\n\n- Data meets education\n- Course tracking\n- Student Behaviour\n- Data-driven education\n- Finishing strong\n"}, {"title": "A Python-flavored Introduction to Containers And Kubernetes", "description": "Containers have more or less taken over the world of application, web APIs, mobile endpoints and other forms of deployment. They have become the currency, the \"table stakes\" and de-facto application deployment unit. Their raise to the fore has brought about a whole host of use cases which weren't practical or accessible in the world of \"classic\" paradigms of infrastructure and virtualization. Containers have also brought application deployment closer and more accessible to developers.\n\nBut as more use cases, deployment styles and exponential adoption of containers was ongoing, a new set of problems began to surface: how do you manage the ever growing number of containers in a deployment? How do you make sure containers have the right resources, deployed to the right machine, running with the correct parameters, how do you scale in and out without disruption? How do you make sure in a fleet of X containers that they\u2019re all running and in healthy state? Enter Kubernetes.\n\nInitially developed internally by Google to replace their own complex container orchestration and management framework. It had to meet all the stringent standards and mind-boggling scale that Google operates on, but from the get-go an effort was made to make the learning curve and developer experience as approachable as possible. At certain point the creators made the case to Google to release kubernetes to the open source community -- a crucial decision that has helped \u201ck8s\u201d (as it\u2019s commonly referred to as) reach rock star levels of fame and mind share not just in the FOSS community but also across industries and businesses from small operations to gigantic multinational corporations with thousands of deployments."}, {"title": "Building a cross-platform native app with BeeWare", "description": "Have you ever wanted to write a GUI application you can run on your laptop? What about an app that you can run on your phone? Historically, these have been difficult to achieve with Python, and impossible to achieve without learning a different API for each platform. But no more.\n\nBeeWare is a collection of tools and libraries that allows you to build cross-platform native GUI applications in pure Python, targeting desktop, mobile and web platforms. In this talk, you'll be introduced to the BeeWare suite of tools and libraries, and see how you can use them to develop, from scratch, a GUI ChatBot application that can be deployed as a standalone desktop application, a mobile phone application, and a single page webapp - without making any changes to the application's codebase."}, {"title": "Bowerbirds of Technology: Architecture and Teams at Less-than-Google Scale", "description": "Facebook, Google, Uber, LinkedIn, and friends are the rarefied heights of software engineering. They encounter and solve problems at scales shared by few others, and as a result, their priorities in production engineering and architecture are just a bit different from the rest of us down here in the other 99% of services. Through deconstructing a few blog posts from these giants, we\u2019ll evaluate just what is it that they\u2019re thinking about when they build systems and whether any of their choices are relevant to those of us operating at high scale yet still something less than millions of requests per second.\n\nThis talk will go into depth on how to make technological decisions to meet your customers\u2019 requirements without requiring a small army of engineers to answer 2 AM pages, and how to set realistic goals for your team around operations, uptime, communications, and disaster recovery.\n\nWith these guidelines in mind, you should be better equipped to say no (or yes!) the next time your team\u2019s software hipster proposes moving everything to the Next Big Thing."}, {"title": "The Journey Over the Intermediate Gap", "description": "Congratulations on finishing your first tutorials or classes in python! In the parlance of the hero\u2019s journey myth, you\u2019ve had your \u2018threshold moment\u201d: you\u2019ve started down a path that could lead to a long and fulfilling career. But the road to this glorious future is frustratingly obscured by a lack of guidance in the present. You know enough to realize that you don\u2019t have all the skills you need yet, but it\u2019s hard to know how to learn those skills, or even articulate what they are. There are no easy solutions to this problem. There are, however, a few fundamental things to know and advice to keep in mind. Drawing from my own experience and with input from others, I\u2019ve compiled some helpful hints about the skills, tools, and guiding questions that will get you to mastery."}, {"title": "Saturday Morning Lightning Talks + Keynotes", "description": "Keynote Speakers: Ying Li, Qumisha Goss"}, {"title": "Foundations of Numerical Computing in Python", "description": "Python is one of the world's most popular programming languages for numerical\ncomputing. In areas of application like physical simulation, signal processing,\npredictive analytics, and more, engineers and data scientists increasingly use\nPython as their primary tool for working with numerical large-scale data.\n\nDespite this diversity of application domains, almost all numerical programming\nin Python builds upon a small foundation of libraries. In particular, the\n`numpy.ndarray` is the core data structure for the entire PyData ecosystem, and\nthe `numpy` library provides many of the foundational algorithms used to power\nmore domain-specific libraries.\n\nThe goal of this tutorial is to provide an introduction to numpy -- how it\nworks, how it's used, and what problems it aims to solve. In particular, we\nwill focus on building up students' mental model of how numpy works and how\n**idiomatic** usage of numpy allows us to implement algorithms much more\nefficiently than is possible in pure Python."}, {"title": "Surviving (and thriving!) when you are overloaded", "description": "Taking on leadership roles always includes new demands on your attention and time. Inevitably, your finite work week will conflict with the sheer amount of tasks you have to do. How can we as leaders keep stepping up to new responsibilities while balancing our pre-existing ones?\n\nThis talk will focus on strategies for managing a too-large workload without abandoning important tasks or doing a shoddy job. We\u2019ll look at techniques to prioritize what work matters most, identify tasks we should be doing ourselves, and finally delegate the rest to build our team\u2019s skills while reducing our own workload."}, {"title": "You're an expert. Here's how to teach like one.", "description": "Knowing how to code and being able to teach it are two separate skills. When we have expertise in a subject, it's common to take for granted that we'll be able to effectively communicate our expertise to someone else. Come learn (or re-learn!) how to teach and discover practical examples you can put to work right away.\n\nBy sharpening your teaching skills, you'll be a more effective mentor, trainer, and team member."}, {"title": "Beyond Django Basics", "description": "Finished with the official Django getting started guide, and not sure what to do next?  This tutorial has you covered.\n\nWe'll extend the blog built in the official guide, using a variety of slightly more advanced Django features.  Topics to be covered include: extending the in-built user model, using the in-built login system, enhancing forms, using view mixins and overriding view methods, and changing up your database backend.\n\nWith each extension, we'll talk about not just how to use these features but also *why* you'd want to use them.  We'll conclude by talking about other Django features you may want to learn about as you grow more proficient with this versatile framework."}, {"title": "CuPy: A NumPy-compatible Library for GPU", "description": ".. figure:: https://cupy.chainer.org/images/cupy.png\n   :alt: Logo\n   :figclass: header\n\n\n**CuPy : NumPy-like API accelerated with CUDA**\n\n\n`Website`_ \\| `Docs`_ \\| `Install Guide`_ \\| `Tutorial`_ \\| **Examples**\n(`Official`_) \\| `Forum`_\n\nCuPy is an open-source library with NumPy syntax that increases speed by\ndoing matrix operations on NVIDIA GPUs. It is accelerated with the CUDA\nplatform from NVIDIA and also uses CUDA-related libraries, including\ncuBLAS, cuDNN, cuRAND, cuSOLVER, cuSPARSE, and NCCL, to make full use of\nthe GPU architecture. CuPy\u2019s interface is highly compatible with NumPy;\nin most cases it can be used as a drop-in replacement. CuPy supports\nvarious methods, data types, indexing, broadcasting, and more.\n\n.. _Website: https://cupy.chainer.org/\n.. _Docs: https://docs-cupy.chainer.org/en/stable/\n.. _Install Guide: https://docs-cupy.chainer.org/en/stable/install.html\n.. _Tutorial: https://docs-cupy.chainer.org/en/stable/tutorial/\n.. _Official: https://github.com/cupy/cupy/blob/master/examples\n.. _Forum: https://groups.google.com/forum/#!forum/cupy"}, {"title": "Introduction to Python for Data Science", "description": "This tutorial introduces users to Python for data science. From data cleaning to model building, we will work through a series of short examples together using some real-world health inspection data. Attendees will have their hands on the keyboard, using the Python standard library and pandas to clean data and scikit-learn to build some models."}, {"title": "Code Reviews Using Art Critique Principles", "description": "Code reviews don't have to be a time consuming, morale zapping, arduous tasks. Not only can they catch bugs and errors but they can contribute in positive ways to the individual developer, the team, management and company as a whole.\n\nArt critiques have existed in academia for hundreds of years. The methodology of the critique has evolved to be time sensitive and productive, while keeping the enthusiasm of the student artist intact.\n\nThe purpose of the art critique is to get peers and mentors to look at the work and raise any problems they may see. It's also time where people with more experience could contribute their knowledge in a helpful way. This process is about producing the best work, quickly and in a productive and constructive way.\n\nThese methods can be applied to code review.\n"}, {"title": "Exploring Deep Learning Framework PyTorch", "description": "Anyone who is interested in deep learning has gotten their hands dirty playing around with Tensorflow, Google's open source deep learning framework. Tensorflow has its benefits like wide scale adoption, deployment on mobile, and support for distributed computing, but it also has a somewhat challenging learning curve, is difficult to debug, and hard to deploy in production. PyTorch is a new deep learning framework that solves a lot of those problems.\n\nPyTorch is only in beta, but users are rapidly adopting this modular deep learning framework. PyTorch supports tensor computation and dynamic computation graphs that allow you to change how the network behaves on the fly unlike static graphs that are used in frameworks such as Tensorflow. PyTorch offers modularity which enhances the ability to debug or see within the network and for many, is more intuitive to learn than Tensorflow.\n\nThis talk will objectively look at PyTorch and why it might be the best fit for your deep learning use case and we'll look at use cases that will showcase why you might want consider using Tensorflow instead.\n"}, {"title": "The Hare Wins the Race: Getting the most out of RabbitMQ in distributed applications", "description": "As web apps grow increasingly complex, distributing asynchronous work\nacross multiple background workers is often a basic requirement of a\nperformant app. While there are a variety of tools that exist to solve\nthis issue, one common feature among them is the need for a robust\nmessaging platform.\n\n`RabbitMQ`_ is a stable, full-featured, and mature solution that is\nusually found in the Python ecosystem backing `Celery`_ implementations.\nWhile Celery\u2019s utilization of RabbitMQ works just fine out of the gate,\nusers with complex workflows, unique constraints, or tight budgets can\ntake advantage of the flexibility of RabbitMQ to streamline their data\npipelines and get the most out of their infrastructure.\n\nThis talk will provide an overview of RabbitMQ, review its varied\nmessage-routing capabilities, and demonstrate some of the ways in which\nthese features can be utilized in Python applications to solve common\nyet difficult use-cases.\n\n.. _RabbitMQ: https://www.rabbitmq.com/\n.. _Celery: http://www.celeryproject.org/"}, {"title": "Python by Immersion", "description": "A fast introduction to Python for software developers with experience in other programming languages. Instead of a traditional top-down presentation of Python's features, syntax, and semantics, students are immersed in the language bottom-up with hundreds of small examples using the interactive interpreter to quickly gain familiarity with most of the core language features. Special attention is given to concepts in Python that often trip up those new to the language.\n\nNote that this tutorial is not designed to pair with the Python by Epiphanies tutorial, i.e. we recommend you sign up for one or the other, but no both."}, {"title": "Python Epiphanies", "description": "This tutorial is for those who've been using Python for a while and would consider themselves at an intermediate level but are looking to get to the next level.\n\nWe'll explore core language features, look a bit under the hood, and to understand and learn how not to be too afraid of bytecode, monkey patching, decorators, and metaclasses.\n\nIn many ways Python is very similar to other programming languages.  However, in a few subtle ways it is quite different, and many software developers new to Python, after their initial successes, hit a plateau and have difficulty getting past it.  Others don't hit or perceive a plateau, but still find some of Python's features a little mysterious or confusing.  This tutorial will help deconstruct some common incorrect assumptions about Python.\n\nIf in your use of Python you sometimes feel like an outsider, like you're missing the inside jokes, like you have most of the puzzle pieces but they don't quite fit together yet, or like there are parts of Python you just don't get, this may be a good tutorial for you."}, {"title": "Sunday Morning Lightning Talks + Keynote", "description": "Keynote Speaker: Brett Cannon"}, {"title": "Down the rabbit hole. A 101 on reproducible workflows with Python", "description": "There has been a massive interest in reproducible research / data\nanalysis pipelines over the last few years.\nBut... how can I ensure that what I produce as a Python\nuser is reproducible?\nIn this tutorial we'll be taking you on a journey down the rabbit hole\nof reproducibility.\nWe'll be taking a step by step approach to reproducible scientific development\nin Python.\nThis means you get a crash course on version control, execution environments, testing,\nand continuous integration. And a guide on how to integrate all of these in your\nsoftware projects.\nBy the end of the course we hope you will have the necessary tools to make your\nPython workflows reproducible no matter if you're starting a brand new project\nor if this is ready to be shared with the world."}, {"title": "The importance of exploratory data analysis and data visualization in machine learning", "description": "All the data in the world is useless if you cannot understand it. EDA and data visualization are the most crucial yet overlooked stage in analytics process. This is because they give insights on the most relevant features in a particular data set required to build an accurate model. It is often said that the more the data, the better the model but sometimes, this can be counter-productive as more data can be a disadvantage. EDA helps avoid that.\n\nEDA is useful for professionals while data visualization is useful for end-users.\n\nFor end-users:\nA good sketch is better than a long speech. The value of a machine learning model is not known unless it is used to make data driven decisions. It is therefore necessary for data scientists to master the act of telling a story for their work to stay relevant. This is where data visualization is extremely useful.\nWe must remember that the end-users of the results are not professionals like us but people who know little or nothing about data analysis. For effective communication of our analysis, there is need for a detailed yet simple data visualization because the work of a data scientist is not done if data-driven insights and decisions are not made.\n\nFor professionals:\nHow do you ensure you are ready to use machine learning algorithms in a project? How do you choose the most suitable algorithms for your data set? How do you define the feature variables that can potentially be used for machine learning? Most data scientists ask these questions.  EDA answers these questions explicitly.\nAlso, EDA helps in understanding the data. Understanding the data brings familiarity with the data, giving insights on the best models that fit the data set, the features in the dataset that will be useful for building an accurate machine learning model, making feature engineering an easy process.\n\nIn this talk, I will give a detailed explanation on what EDA and data visualization are and why they are very helpful in building accurate machine learning models for analytics as well as enhancing productivity and better understanding for clients. I will also discuss the risks of not mastering EDA and data visualization as a data scientist."}, {"title": "Parallel Data Analysis with Dask", "description": "The libraries that power data analysis in Python are essentially limited to a single CPU core and to datasets that fit in RAM. Attendees will see how dask can parallelize their workflows, while still writing what looks like normal python, NumPy, or pandas code.\n\nDask is a parallel computing framework, with a focus on analytical computing. We'll start with `dask.delayed`, which helps parallelize your existing Python code. We\u2019ll demonstrate `dask.delayed` on a small example, introducing the concepts at the heart of dask like the *task graph* and the *schedulers* that execute tasks. We\u2019ll compare this approach to the simpler, but less flexible, parallelization methods available in the standard library like `concurrent.futures`.\n\nAttendees will see the high-level collections dask provides for writing regular Python, NumPy, or Pandas code that is then executed in parallel on datasets that may be larger than memory. These high level collections provide a familiar API, but the execution model is very different. We'll discuss concepts like the GIL, serialization, and other headaches that come up with parallel programming. We\u2019ll use dask\u2019s various schedulers to illustrate the differences between multi-threaded, multi-processes, and distributed computing.\n\nDask includes a distributed scheduler for executing task graphs on a cluster of machines. We\u2019ll provide each person access to their own cluster."}, {"title": "Python 2 to 3: How to Upgrade and What Features to Start Using", "description": "The end of life for Python 2 is 2020. Python 3 is the future and you'll need to consider both your upgrade plan and what steps you'll take after upgrading to start leveraging Python 3 features.\n\nDuring this talk we'll briefly discuss how to start **the process of upgrading your code to Python 3**. We'll then dive into some of **the most useful Python 3 features** that you'll be able to start embracing once you drop Python 2 support.\n\nA number of the most powerful Python 3 features are syntactic features that are **Python 3 only**. You won't get any experience using these features until you fully upgrade. These features are an incentive to drop Python 2 support in existing 2 and 3 compatible code. You can consider this talk as a teaser of Python 3 features that you may have never used.\n\nAfter this talk I hope you'll be inspired to fully upgrade your code to Python 3."}, {"title": "Using List Comprehensions and Generator Expressions For Data Processing", "description": "Creating one list out of another list is a very common thing to do in Python, so common that Python includes a special construct just for this purpose: list comprehensions. We'll get hands-on experience using list comprehensions, set comprehensions, and dictionary comprehensions during this tutorial. We'll also learn how and when we can slightly tweak our comprehensions to turn them into more performant generator expressions.\n\nWe will learn some tricks for figuring out which of our \"for\" loops can be rewritten as comprehensions and which cannot. We will focus heavily on code readability and code clarity and we'll discuss when comprehensions help readability and when they hurt.\n\nAll new skills will be acquired through practice. We'll work through many exercises both individually and as a group. All students will also receive a cheat sheet which can be used for guidance during future comprehension-writing journeys.\n\nA laptop with Python installed is required for this workshop."}, {"title": "Using GitHub, Travis CI, and Python to Introduce Collaborative Software Development", "description": "Real-world software engineering is collaborative, commonly involving the use of Git, GitHub, and continuous integration with Travis CI. This presentation will explain how to use these technologies and platforms to teach interdisciplinary and introductory courses in computer programming and software engineering. This presentation will first show how to create a GitHub organization connected to a GitHub Classroom with unlimited private repositories that contain instructor solutions and starter kits and assignment submissions for both individual and team-based programming assignments. The talk will next explain how to connect GitHub repositories to continuous integration servers hosted by Travis CI, thus supporting the cloud-based execution of tests and checks.\n\nThe presentation will subsequently introduce a Python program, called\n`GatorGrader`_, that supports the local and cloud-based checking of a\nstudent\u2019s source code and technical writing for a programming project.\nGatorGrader can check, for example, that a submission contains the\nrequired number of comments and produces the correct number of lines of\nconsole output. Suitable for use on either a local workstation or a\ncloud-based server provided by Travis CI, GatorGrader can, for instance,\nensure that a student makes the requisite number of commits to a GitHub\nrepository and structures a program in a specified fashion. GatorGrader\ncan also invoke external programs that ensure the quality of a student\u2019s\ntechnical writing. Finally, since most of the aforementioned assignments\nare designed to be completed in teams, this presentation introduces\n`GatorGrouper`_, another Python program that uses student responses on a\nGoogle Form to create suitable groups of students who collaboratively\ncomplete programming projects with GitHub.\n\n.. _GatorGrader: https://github.com/gkapfham/gatorgrader\n.. _GatorGrouper: https://github.com/GatorGrouper/gatorgrouper"}, {"title": "Using Python to build an AI to play and win SNES StreetFighter II", "description": ".. figure:: http://www.thesimplelogic.com/wordpress/wp-content/uploads/2017/12/ryu-python.png\n   :alt: ryu-python\n\nHear the story of how we used Python to build an AI that plays Super\nStreetFighter II on the Super NES. We\u2019ll cover how Python provided the\nkey glue between the SNES emulator and AI, and how the AI was built with\n``gym``, ``keras-rl`` and ``tensorflow``. We\u2019ll show examples of game\nplay and training, and talk about which bot beat which bot in the\nbot-v-bot tournament we ran.\n\nAfter this talk you\u2019ll know how easy it is to use Python and Python\u2019s\nmachine learning libraries to teach a computer to play games. You\u2019ll see\na practical example of the same type of machine learning used by\nAlphaGo, and also get to find out which character in StreetFighter II is\nbest to pick when playing your friends."}, {"title": "Reactive Programming with RxPy", "description": "Web applications contains lots of database operations, network calls, nested callbacks and other computationally expensive tasks that might take a long time to complete or even block other threads until it's done, here is where ReactiveX enters, it doesn't only gives us the facility to convert almost anything to a stream; variables, properties, user inputs, caches, etc to manage it asynchronously. But it also gives us an easy way to handle errors which is a hard task within asynchronous programming. ReactiveX makes our code more flexible, readable, maintainable and easy to write.\n\nWe will be exploring how ReactiveX help us to make things easier with its operators toolbox that can be used to filter, create, transform or unify any of those streams. We will learn that in just a few lines of maintainable code, we can have multiple web sockets which recieves multiple requests all handled by an asynchronous process that serves a filtered output.\n\nTo do that I decided to explain an example of the use with an example by implementing observables, observers/subscribers and subjects. We will start by requesting our data stream from the Github API with a Tornado web socket and then filtering and processing it asynchrounosly."}, {"title": "Deconstructing the US Patent Database", "description": "In 2011 I gave a talk about \"Killing Patents with Python\" - finding the right piece of prior art by using statistical natural language processing techniques on the US Patent Database. A number of unexpected benefits came out of that exploration, including the ability to describe large patent portfolios and businesses in a way that had not been done before.\n\nSince then, the state of the art has advanced - and so has the ability to do strange and wonderful things by applying the latest neural network-based analysis to the nine million patents and patent applications that people have submitted to the USPTO. Not only can we learn new things about what people have invented, we might just be able to get the computer to do a little \"inventing\" itself."}, {"title": "Python 3: ten years later", "description": "Looking back at Python evolutions over the last 10 years.\n\nPython 3.0 was released ten years ago (December 2008). It's time to look back: analyze the migration from Python 2 to Python 3, see the progress we made on the language, list bugs by cannot be fixed in Python 2 because of the backward compatibility, and discuss if it's time or not to bury Python 2.\n\nPython became the defacto language in the scientific world and the favorite programming language as the first language to learn programming."}, {"title": "Pumping up Python modules using Rust", "description": "If you\u2019ve spent much time writing (or debugging) Python performance problems, you\u2019ve probably had a hard time managing memory with its limited language support.\n\nIn this talk, we venture deep into the belly of the Rust Language to uncover the secret incantations for building high performance and memory safe Python extensions using Rust.\n\nRust has a lot to offer in terms of safety and performance for high-level programming languages such Python, Ruby, Js and more with its easy Foreign Function Interface capabilities which enables developers to easily develop bindings for foreign code."}, {"title": "The human nature of failure & resiliency", "description": "Projects fail in droves. Systems hiccup and hours of downtime follows. Screws fall out all the time; the world is an imperfect place.\n\nWe talk a lot about building resilient systems, but all systems are (at least for now) built by humans. Humans who have been making the same types of mistakes for thousands of years.\n\nJust because failure happens doesn\u2019t mean we can\u2019t do our best to prevent it or\u2014at the very least\u2014to minimize the damage when it does. As a matter of fact, embracing failure can be one of the best things you do for your system. Failure is a vital part of evolution. By learning to love failure we learn how to take the next step forward. Ignoring or punishing failure leads to stagnation and wasted potential.\n\nThis talk distills 3000 pages of failure research into 40 minutes of knowledge about the human factors of failure, how it can be recognised, and how you can work around it to create more resilient systems.\n\nBy the end of this talk the audience will have an awareness of the most common psychological reasons for mistakes and failures and how to develop systems and processes to protect against them."}, {"title": "Coding as Enrichment: How to Empower Students with Creative Coding Experiences", "description": "My goal is to share resources, pedagogy, best practices and lessons\nlearned in bringing hands-on coding workshops to underserved K-12\nstudents.\n\nFor fall 2017 over ten weeks, `Code Park Houston`_, a a 501(c)(3)\nnon-profit organization piloted a free after-school Creative Coding\nprogram at `BakerRipley - Leonel Castillo \\| BakerRipley`_. We focused\non **Coding as Enrichment** by encouraging our students to pursue\ncreative endeavors such as storytelling with Minecraft and making\nprocedural art with `p5.js \\| get started`_. Instead of traversing a\nprogramming language\u2019s syntax peculiarities, our students drew colorful\nlines, made interactive buttons, and shared their creations.\n\nWe also worked to provide a positive and collaborative learning\nenvironment. Our students were encouraged to learn by making mistakes\nand exploring his or her own interests. In the process, we just happened\nto facilitate knowledge in coding, problem-solving, electronics science\nand collaboration.\n\nWhen it comes to technology, the arts can be an unusual pathway to\nsuccess. But we know and see that creativity is the secret sauce that\ninspires the next generation of diverse and passionate students.\n\nThis program was a rewarding experience for everyone involved. We faced\nand overcame many challenges. For the talk I would like to share:\n\n**Tools of the Trade**\u200a\u2014\u200awhat software and hardware we used and why.\n**Classroom Set Up**\u200a\u2014\u200ahow to provide a positive and encouraging\nlearning environment. **Best Practices for Tech Educators**\u200a\u2014\u200awhy we are\nlearning facilitators. **Open Source Creative Coding Curriculum**\u200a\u2014\u200aopen\nsource curriculum to be used in your own classroom!\n\n.. _Code Park Houston: https://codeparkhouston.org/\n.. _BakerRipley - Leonel Castillo \\| BakerRipley: https://www.bakerripley.org/locations/leonel-castillo-community-center\n.. _p5.js \\| get started: https://p5js.org/get-started/"}, {"title": "There and Back Again: Disable and re-enable garbage collector at Instagram", "description": "Python's cyclic garbage collector wonderfully hides the complexity of memory management from the programmer. But we pay the price in performance. Ever wondered how that works? In this talk, you'll learn how garbage collection is designed in Python, what the tradeoffs are and how Instagram battled copy-on-write memory issues by disabling the garbage collector entirely.\n\nYou'll also learn why that isn't such a great idea after all and how we ended up extending the garbage collector API which allowed us to (mostly) re-enable garbage collection. We'll discuss our upstream contributions to the garbage collector that landed in Python 3.6 and 3.7.\n\nThis is an in-depth talk about memory management but no prior experience with CPython internals is necessary to follow it."}]